
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000611c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00037a88  08006304  08006304  00016304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803dd8c  0803dd8c  000500cc  2**0
                  CONTENTS
  4 .ARM          00000000  0803dd8c  0803dd8c  000500cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0803dd8c  0803dd8c  000500cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0803dd8c  0803dd8c  0004dd8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0803dd90  0803dd90  0004dd90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0803dd94  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200000cc  0803de60  000500cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  0803de60  000501ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000500cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e27d  00000000  00000000  000500f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000218a  00000000  00000000  0005e372  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f38  00000000  00000000  00060500  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e58  00000000  00000000  00061438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002468  00000000  00000000  00062290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d01  00000000  00000000  000646f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c99b  00000000  00000000  000753f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00111d94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004684  00000000  00000000  00111de4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	200000cc 	.word	0x200000cc
 8000204:	00000000 	.word	0x00000000
 8000208:	080062ec 	.word	0x080062ec

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	200000d0 	.word	0x200000d0
 8000224:	080062ec 	.word	0x080062ec

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	3c01      	subs	r4, #1
 8000364:	bf28      	it	cs
 8000366:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800036a:	d2e9      	bcs.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__gedf2>:
 80009c4:	f04f 3cff 	mov.w	ip, #4294967295
 80009c8:	e006      	b.n	80009d8 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__ledf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	e002      	b.n	80009d8 <__cmpdf2+0x4>
 80009d2:	bf00      	nop

080009d4 <__cmpdf2>:
 80009d4:	f04f 0c01 	mov.w	ip, #1
 80009d8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009dc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ee:	d01b      	beq.n	8000a28 <__cmpdf2+0x54>
 80009f0:	b001      	add	sp, #4
 80009f2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009f6:	bf0c      	ite	eq
 80009f8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009fc:	ea91 0f03 	teqne	r1, r3
 8000a00:	bf02      	ittt	eq
 8000a02:	ea90 0f02 	teqeq	r0, r2
 8000a06:	2000      	moveq	r0, #0
 8000a08:	4770      	bxeq	lr
 8000a0a:	f110 0f00 	cmn.w	r0, #0
 8000a0e:	ea91 0f03 	teq	r1, r3
 8000a12:	bf58      	it	pl
 8000a14:	4299      	cmppl	r1, r3
 8000a16:	bf08      	it	eq
 8000a18:	4290      	cmpeq	r0, r2
 8000a1a:	bf2c      	ite	cs
 8000a1c:	17d8      	asrcs	r0, r3, #31
 8000a1e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a22:	f040 0001 	orr.w	r0, r0, #1
 8000a26:	4770      	bx	lr
 8000a28:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d102      	bne.n	8000a38 <__cmpdf2+0x64>
 8000a32:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a36:	d107      	bne.n	8000a48 <__cmpdf2+0x74>
 8000a38:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d1d6      	bne.n	80009f0 <__cmpdf2+0x1c>
 8000a42:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a46:	d0d3      	beq.n	80009f0 <__cmpdf2+0x1c>
 8000a48:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdrcmple>:
 8000a50:	4684      	mov	ip, r0
 8000a52:	4610      	mov	r0, r2
 8000a54:	4662      	mov	r2, ip
 8000a56:	468c      	mov	ip, r1
 8000a58:	4619      	mov	r1, r3
 8000a5a:	4663      	mov	r3, ip
 8000a5c:	e000      	b.n	8000a60 <__aeabi_cdcmpeq>
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdcmpeq>:
 8000a60:	b501      	push	{r0, lr}
 8000a62:	f7ff ffb7 	bl	80009d4 <__cmpdf2>
 8000a66:	2800      	cmp	r0, #0
 8000a68:	bf48      	it	mi
 8000a6a:	f110 0f00 	cmnmi.w	r0, #0
 8000a6e:	bd01      	pop	{r0, pc}

08000a70 <__aeabi_dcmpeq>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff fff4 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a78:	bf0c      	ite	eq
 8000a7a:	2001      	moveq	r0, #1
 8000a7c:	2000      	movne	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmplt>:
 8000a84:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a88:	f7ff ffea 	bl	8000a60 <__aeabi_cdcmpeq>
 8000a8c:	bf34      	ite	cc
 8000a8e:	2001      	movcc	r0, #1
 8000a90:	2000      	movcs	r0, #0
 8000a92:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a96:	bf00      	nop

08000a98 <__aeabi_dcmple>:
 8000a98:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a9c:	f7ff ffe0 	bl	8000a60 <__aeabi_cdcmpeq>
 8000aa0:	bf94      	ite	ls
 8000aa2:	2001      	movls	r0, #1
 8000aa4:	2000      	movhi	r0, #0
 8000aa6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aaa:	bf00      	nop

08000aac <__aeabi_dcmpge>:
 8000aac:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab0:	f7ff ffce 	bl	8000a50 <__aeabi_cdrcmple>
 8000ab4:	bf94      	ite	ls
 8000ab6:	2001      	movls	r0, #1
 8000ab8:	2000      	movhi	r0, #0
 8000aba:	f85d fb08 	ldr.w	pc, [sp], #8
 8000abe:	bf00      	nop

08000ac0 <__aeabi_dcmpgt>:
 8000ac0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac4:	f7ff ffc4 	bl	8000a50 <__aeabi_cdrcmple>
 8000ac8:	bf34      	ite	cc
 8000aca:	2001      	movcc	r0, #1
 8000acc:	2000      	movcs	r0, #0
 8000ace:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2iz>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000adc:	d215      	bcs.n	8000b0a <__aeabi_d2iz+0x36>
 8000ade:	d511      	bpl.n	8000b04 <__aeabi_d2iz+0x30>
 8000ae0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ae4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae8:	d912      	bls.n	8000b10 <__aeabi_d2iz+0x3c>
 8000aea:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000af2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000af6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000afa:	fa23 f002 	lsr.w	r0, r3, r2
 8000afe:	bf18      	it	ne
 8000b00:	4240      	negne	r0, r0
 8000b02:	4770      	bx	lr
 8000b04:	f04f 0000 	mov.w	r0, #0
 8000b08:	4770      	bx	lr
 8000b0a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b0e:	d105      	bne.n	8000b1c <__aeabi_d2iz+0x48>
 8000b10:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	bf08      	it	eq
 8000b16:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b1a:	4770      	bx	lr
 8000b1c:	f04f 0000 	mov.w	r0, #0
 8000b20:	4770      	bx	lr
 8000b22:	bf00      	nop

08000b24 <__aeabi_d2uiz>:
 8000b24:	004a      	lsls	r2, r1, #1
 8000b26:	d211      	bcs.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b28:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b2c:	d211      	bcs.n	8000b52 <__aeabi_d2uiz+0x2e>
 8000b2e:	d50d      	bpl.n	8000b4c <__aeabi_d2uiz+0x28>
 8000b30:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b34:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b38:	d40e      	bmi.n	8000b58 <__aeabi_d2uiz+0x34>
 8000b3a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b3e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b42:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b46:	fa23 f002 	lsr.w	r0, r3, r2
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d102      	bne.n	8000b5e <__aeabi_d2uiz+0x3a>
 8000b58:	f04f 30ff 	mov.w	r0, #4294967295
 8000b5c:	4770      	bx	lr
 8000b5e:	f04f 0000 	mov.w	r0, #0
 8000b62:	4770      	bx	lr

08000b64 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	e002      	b.n	8000b74 <Delay+0x10>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	3b01      	subs	r3, #1
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d1f9      	bne.n	8000b6e <Delay+0xa>
 8000b7a:	bf00      	nop
 8000b7c:	bf00      	nop
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bc80      	pop	{r7}
 8000b84:	4770      	bx	lr

08000b86 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);
 8000b8c:	2001      	movs	r0, #1
 8000b8e:	f000 f829 	bl	8000be4 <LCD_BackLed_Control>
	LCD_Rst();
 8000b92:	f000 f80f 	bl	8000bb4 <LCD_Rst>
	LCD_REG_Config();
 8000b96:	f000 f85f 	bl	8000c58 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	9300      	str	r3, [sp, #0]
 8000b9e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000ba2:	22f0      	movs	r2, #240	; 0xf0
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	2000      	movs	r0, #0
 8000ba8:	f000 f9e7 	bl	8000f7a <LCD_Clear>
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
	...

08000bb4 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	2102      	movs	r1, #2
 8000bbc:	4807      	ldr	r0, [pc, #28]	; (8000bdc <LCD_Rst+0x28>)
 8000bbe:	f002 fb0a 	bl	80031d6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000bc2:	4807      	ldr	r0, [pc, #28]	; (8000be0 <LCD_Rst+0x2c>)
 8000bc4:	f7ff ffce 	bl	8000b64 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	2102      	movs	r1, #2
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <LCD_Rst+0x28>)
 8000bce:	f002 fb02 	bl	80031d6 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000bd2:	4803      	ldr	r0, [pc, #12]	; (8000be0 <LCD_Rst+0x2c>)
 8000bd4:	f7ff ffc6 	bl	8000b64 <Delay>
}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40011800 	.word	0x40011800
 8000be0:	0002bffc 	.word	0x0002bffc

08000be4 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	b082      	sub	sp, #8
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	4603      	mov	r3, r0
 8000bec:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d006      	beq.n	8000c02 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bfa:	4807      	ldr	r0, [pc, #28]	; (8000c18 <LCD_BackLed_Control+0x34>)
 8000bfc:	f002 faeb 	bl	80031d6 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000c00:	e005      	b.n	8000c0e <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <LCD_BackLed_Control+0x34>)
 8000c0a:	f002 fae4 	bl	80031d6 <HAL_GPIO_WritePin>
}
 8000c0e:	bf00      	nop
 8000c10:	3708      	adds	r7, #8
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40011400 	.word	0x40011400

08000c1c <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b083      	sub	sp, #12
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000c26:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000c2a:	88fb      	ldrh	r3, [r7, #6]
 8000c2c:	8013      	strh	r3, [r2, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	370c      	adds	r7, #12
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8000c42:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <LCD_Write_Data+0x1c>)
 8000c44:	88fb      	ldrh	r3, [r7, #6]
 8000c46:	8013      	strh	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	370c      	adds	r7, #12
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bc80      	pop	{r7}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	60020000 	.word	0x60020000

08000c58 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000c5c:	20cf      	movs	r0, #207	; 0xcf
 8000c5e:	f7ff ffdd 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8000c62:	2000      	movs	r0, #0
 8000c64:	f7ff ffe8 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000c68:	2081      	movs	r0, #129	; 0x81
 8000c6a:	f7ff ffe5 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8000c6e:	2030      	movs	r0, #48	; 0x30
 8000c70:	f7ff ffe2 	bl	8000c38 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000c74:	20ed      	movs	r0, #237	; 0xed
 8000c76:	f7ff ffd1 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000c7a:	2064      	movs	r0, #100	; 0x64
 8000c7c:	f7ff ffdc 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000c80:	2003      	movs	r0, #3
 8000c82:	f7ff ffd9 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000c86:	2012      	movs	r0, #18
 8000c88:	f7ff ffd6 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000c8c:	2081      	movs	r0, #129	; 0x81
 8000c8e:	f7ff ffd3 	bl	8000c38 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8000c92:	20e8      	movs	r0, #232	; 0xe8
 8000c94:	f7ff ffc2 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000c98:	2085      	movs	r0, #133	; 0x85
 8000c9a:	f7ff ffcd 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000c9e:	2010      	movs	r0, #16
 8000ca0:	f7ff ffca 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000ca4:	2078      	movs	r0, #120	; 0x78
 8000ca6:	f7ff ffc7 	bl	8000c38 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000caa:	20cb      	movs	r0, #203	; 0xcb
 8000cac:	f7ff ffb6 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8000cb0:	2039      	movs	r0, #57	; 0x39
 8000cb2:	f7ff ffc1 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000cb6:	202c      	movs	r0, #44	; 0x2c
 8000cb8:	f7ff ffbe 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ffbb 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8000cc2:	2034      	movs	r0, #52	; 0x34
 8000cc4:	f7ff ffb8 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000cc8:	2002      	movs	r0, #2
 8000cca:	f7ff ffb5 	bl	8000c38 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 8000cce:	20f7      	movs	r0, #247	; 0xf7
 8000cd0:	f7ff ffa4 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 8000cd4:	2020      	movs	r0, #32
 8000cd6:	f7ff ffaf 	bl	8000c38 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 8000cda:	20ea      	movs	r0, #234	; 0xea
 8000cdc:	f7ff ff9e 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff ffa9 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff ffa6 	bl	8000c38 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 8000cec:	20b1      	movs	r0, #177	; 0xb1
 8000cee:	f7ff ff95 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000cf2:	2000      	movs	r0, #0
 8000cf4:	f7ff ffa0 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000cf8:	201b      	movs	r0, #27
 8000cfa:	f7ff ff9d 	bl	8000c38 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 8000cfe:	20b6      	movs	r0, #182	; 0xb6
 8000d00:	f7ff ff8c 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 8000d04:	200a      	movs	r0, #10
 8000d06:	f7ff ff97 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 8000d0a:	20a2      	movs	r0, #162	; 0xa2
 8000d0c:	f7ff ff94 	bl	8000c38 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 8000d10:	20c0      	movs	r0, #192	; 0xc0
 8000d12:	f7ff ff83 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 8000d16:	2035      	movs	r0, #53	; 0x35
 8000d18:	f7ff ff8e 	bl	8000c38 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 8000d1c:	20c1      	movs	r0, #193	; 0xc1
 8000d1e:	f7ff ff7d 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 8000d22:	2011      	movs	r0, #17
 8000d24:	f7ff ff88 	bl	8000c38 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 8000d28:	20c5      	movs	r0, #197	; 0xc5
 8000d2a:	f7ff ff77 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8000d2e:	2045      	movs	r0, #69	; 0x45
 8000d30:	f7ff ff82 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000d34:	2045      	movs	r0, #69	; 0x45
 8000d36:	f7ff ff7f 	bl	8000c38 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000d3a:	20c7      	movs	r0, #199	; 0xc7
 8000d3c:	f7ff ff6e 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000d40:	20a2      	movs	r0, #162	; 0xa2
 8000d42:	f7ff ff79 	bl	8000c38 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000d46:	20f2      	movs	r0, #242	; 0xf2
 8000d48:	f7ff ff68 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff73 	bl	8000c38 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000d52:	2026      	movs	r0, #38	; 0x26
 8000d54:	f7ff ff62 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000d58:	2001      	movs	r0, #1
 8000d5a:	f7ff ff6d 	bl	8000c38 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000d5e:	20e0      	movs	r0, #224	; 0xe0
 8000d60:	f7ff ff5c 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000d64:	200f      	movs	r0, #15
 8000d66:	f7ff ff67 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000d6a:	2026      	movs	r0, #38	; 0x26
 8000d6c:	f7ff ff64 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000d70:	2024      	movs	r0, #36	; 0x24
 8000d72:	f7ff ff61 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000d76:	200b      	movs	r0, #11
 8000d78:	f7ff ff5e 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000d7c:	200e      	movs	r0, #14
 8000d7e:	f7ff ff5b 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000d82:	2009      	movs	r0, #9
 8000d84:	f7ff ff58 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000d88:	2054      	movs	r0, #84	; 0x54
 8000d8a:	f7ff ff55 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000d8e:	20a8      	movs	r0, #168	; 0xa8
 8000d90:	f7ff ff52 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000d94:	2046      	movs	r0, #70	; 0x46
 8000d96:	f7ff ff4f 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000d9a:	200c      	movs	r0, #12
 8000d9c:	f7ff ff4c 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000da0:	2017      	movs	r0, #23
 8000da2:	f7ff ff49 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000da6:	2009      	movs	r0, #9
 8000da8:	f7ff ff46 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000dac:	200f      	movs	r0, #15
 8000dae:	f7ff ff43 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000db2:	2007      	movs	r0, #7
 8000db4:	f7ff ff40 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000db8:	2000      	movs	r0, #0
 8000dba:	f7ff ff3d 	bl	8000c38 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000dbe:	20e1      	movs	r0, #225	; 0xe1
 8000dc0:	f7ff ff2c 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff ff37 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000dca:	2019      	movs	r0, #25
 8000dcc:	f7ff ff34 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000dd0:	201b      	movs	r0, #27
 8000dd2:	f7ff ff31 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000dd6:	2004      	movs	r0, #4
 8000dd8:	f7ff ff2e 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000ddc:	2010      	movs	r0, #16
 8000dde:	f7ff ff2b 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000de2:	2007      	movs	r0, #7
 8000de4:	f7ff ff28 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000de8:	202a      	movs	r0, #42	; 0x2a
 8000dea:	f7ff ff25 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000dee:	2047      	movs	r0, #71	; 0x47
 8000df0:	f7ff ff22 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000df4:	2039      	movs	r0, #57	; 0x39
 8000df6:	f7ff ff1f 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000dfa:	2003      	movs	r0, #3
 8000dfc:	f7ff ff1c 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e00:	2006      	movs	r0, #6
 8000e02:	f7ff ff19 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000e06:	2006      	movs	r0, #6
 8000e08:	f7ff ff16 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000e0c:	2030      	movs	r0, #48	; 0x30
 8000e0e:	f7ff ff13 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000e12:	2038      	movs	r0, #56	; 0x38
 8000e14:	f7ff ff10 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000e18:	200f      	movs	r0, #15
 8000e1a:	f7ff ff0d 	bl	8000c38 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000e1e:	2036      	movs	r0, #54	; 0x36
 8000e20:	f7ff fefc 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000e24:	20c8      	movs	r0, #200	; 0xc8
 8000e26:	f7ff ff07 	bl	8000c38 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000e2a:	202a      	movs	r0, #42	; 0x2a
 8000e2c:	f7ff fef6 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e30:	2000      	movs	r0, #0
 8000e32:	f7ff ff01 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fefe 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f7ff fefb 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000e42:	20ef      	movs	r0, #239	; 0xef
 8000e44:	f7ff fef8 	bl	8000c38 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000e48:	202b      	movs	r0, #43	; 0x2b
 8000e4a:	f7ff fee7 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f7ff fef2 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000e54:	2000      	movs	r0, #0
 8000e56:	f7ff feef 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000e5a:	2001      	movs	r0, #1
 8000e5c:	f7ff feec 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000e60:	203f      	movs	r0, #63	; 0x3f
 8000e62:	f7ff fee9 	bl	8000c38 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000e66:	203a      	movs	r0, #58	; 0x3a
 8000e68:	f7ff fed8 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000e6c:	2055      	movs	r0, #85	; 0x55
 8000e6e:	f7ff fee3 	bl	8000c38 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000e72:	2011      	movs	r0, #17
 8000e74:	f7ff fed2 	bl	8000c1c <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000e78:	4803      	ldr	r0, [pc, #12]	; (8000e88 <LCD_REG_Config+0x230>)
 8000e7a:	f7ff fe73 	bl	8000b64 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000e7e:	2029      	movs	r0, #41	; 0x29
 8000e80:	f7ff fecc 	bl	8000c1c <LCD_Write_Cmd>
	
	
}
 8000e84:	bf00      	nop
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	0002bffc 	.word	0x0002bffc

08000e8c <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000e8c:	b590      	push	{r4, r7, lr}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4604      	mov	r4, r0
 8000e94:	4608      	mov	r0, r1
 8000e96:	4611      	mov	r1, r2
 8000e98:	461a      	mov	r2, r3
 8000e9a:	4623      	mov	r3, r4
 8000e9c:	80fb      	strh	r3, [r7, #6]
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80bb      	strh	r3, [r7, #4]
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	807b      	strh	r3, [r7, #2]
 8000ea6:	4613      	mov	r3, r2
 8000ea8:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000eaa:	202a      	movs	r0, #42	; 0x2a
 8000eac:	f7ff feb6 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000eb0:	88fb      	ldrh	r3, [r7, #6]
 8000eb2:	0a1b      	lsrs	r3, r3, #8
 8000eb4:	b29b      	uxth	r3, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff febe 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000ebc:	88fb      	ldrh	r3, [r7, #6]
 8000ebe:	b2db      	uxtb	r3, r3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff feb8 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000ec8:	88fa      	ldrh	r2, [r7, #6]
 8000eca:	887b      	ldrh	r3, [r7, #2]
 8000ecc:	4413      	add	r3, r2
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	121b      	asrs	r3, r3, #8
 8000ed2:	b29b      	uxth	r3, r3
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff feaf 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000eda:	88fa      	ldrh	r2, [r7, #6]
 8000edc:	887b      	ldrh	r3, [r7, #2]
 8000ede:	4413      	add	r3, r2
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	3b01      	subs	r3, #1
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff fea4 	bl	8000c38 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000ef0:	202b      	movs	r0, #43	; 0x2b
 8000ef2:	f7ff fe93 	bl	8000c1c <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000ef6:	88bb      	ldrh	r3, [r7, #4]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b29b      	uxth	r3, r3
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff fe9b 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000f02:	88bb      	ldrh	r3, [r7, #4]
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	b29b      	uxth	r3, r3
 8000f08:	4618      	mov	r0, r3
 8000f0a:	f7ff fe95 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000f0e:	88ba      	ldrh	r2, [r7, #4]
 8000f10:	883b      	ldrh	r3, [r7, #0]
 8000f12:	4413      	add	r3, r2
 8000f14:	3b01      	subs	r3, #1
 8000f16:	121b      	asrs	r3, r3, #8
 8000f18:	b29b      	uxth	r3, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff fe8c 	bl	8000c38 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000f20:	88ba      	ldrh	r2, [r7, #4]
 8000f22:	883b      	ldrh	r3, [r7, #0]
 8000f24:	4413      	add	r3, r2
 8000f26:	b29b      	uxth	r3, r3
 8000f28:	3b01      	subs	r3, #1
 8000f2a:	b29b      	uxth	r3, r3
 8000f2c:	b2db      	uxtb	r3, r3
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	4618      	mov	r0, r3
 8000f32:	f7ff fe81 	bl	8000c38 <LCD_Write_Data>
	
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd90      	pop	{r4, r7, pc}

08000f3e <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
 8000f46:	460b      	mov	r3, r1
 8000f48:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000f4e:	202c      	movs	r0, #44	; 0x2c
 8000f50:	f7ff fe64 	bl	8000c1c <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
 8000f58:	e006      	b.n	8000f68 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000f5a:	887b      	ldrh	r3, [r7, #2]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f7ff fe6b 	bl	8000c38 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	3301      	adds	r3, #1
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d3f4      	bcc.n	8000f5a <LCD_FillColor+0x1c>
		
}
 8000f70:	bf00      	nop
 8000f72:	bf00      	nop
 8000f74:	3710      	adds	r7, #16
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000f7a:	b590      	push	{r4, r7, lr}
 8000f7c:	b083      	sub	sp, #12
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4604      	mov	r4, r0
 8000f82:	4608      	mov	r0, r1
 8000f84:	4611      	mov	r1, r2
 8000f86:	461a      	mov	r2, r3
 8000f88:	4623      	mov	r3, r4
 8000f8a:	80fb      	strh	r3, [r7, #6]
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	80bb      	strh	r3, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
 8000f94:	4613      	mov	r3, r2
 8000f96:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000f98:	883b      	ldrh	r3, [r7, #0]
 8000f9a:	887a      	ldrh	r2, [r7, #2]
 8000f9c:	88b9      	ldrh	r1, [r7, #4]
 8000f9e:	88f8      	ldrh	r0, [r7, #6]
 8000fa0:	f7ff ff74 	bl	8000e8c <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000fa4:	887b      	ldrh	r3, [r7, #2]
 8000fa6:	883a      	ldrh	r2, [r7, #0]
 8000fa8:	fb02 f303 	mul.w	r3, r2, r3
 8000fac:	461a      	mov	r2, r3
 8000fae:	8b3b      	ldrh	r3, [r7, #24]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	4610      	mov	r0, r2
 8000fb4:	f7ff ffc3 	bl	8000f3e <LCD_FillColor>
	
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd90      	pop	{r4, r7, pc}

08000fc0 <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	80fb      	strh	r3, [r7, #6]
 8000fca:	460b      	mov	r3, r1
 8000fcc:	80bb      	strh	r3, [r7, #4]
 8000fce:	4613      	mov	r3, r2
 8000fd0:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000fd2:	78fb      	ldrb	r3, [r7, #3]
 8000fd4:	3b20      	subs	r3, #32
 8000fd6:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000fd8:	88b9      	ldrh	r1, [r7, #4]
 8000fda:	88f8      	ldrh	r0, [r7, #6]
 8000fdc:	2310      	movs	r3, #16
 8000fde:	2208      	movs	r2, #8
 8000fe0:	f7ff ff54 	bl	8000e8c <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000fe4:	202c      	movs	r0, #44	; 0x2c
 8000fe6:	f7ff fe19 	bl	8000c1c <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000fea:	2300      	movs	r3, #0
 8000fec:	73bb      	strb	r3, [r7, #14]
 8000fee:	e023      	b.n	8001038 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000ff0:	7b3a      	ldrb	r2, [r7, #12]
 8000ff2:	7bbb      	ldrb	r3, [r7, #14]
 8000ff4:	4914      	ldr	r1, [pc, #80]	; (8001048 <LCD_DrawChar+0x88>)
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	440a      	add	r2, r1
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001000:	2300      	movs	r3, #0
 8001002:	737b      	strb	r3, [r7, #13]
 8001004:	e012      	b.n	800102c <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	f003 0301 	and.w	r3, r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d003      	beq.n	8001018 <LCD_DrawChar+0x58>
				LCD_Write_Data ( BLACK );
 8001010:	2000      	movs	r0, #0
 8001012:	f7ff fe11 	bl	8000c38 <LCD_Write_Data>
 8001016:	e003      	b.n	8001020 <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  WHITE );
 8001018:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800101c:	f7ff fe0c 	bl	8000c38 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	085b      	lsrs	r3, r3, #1
 8001024:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8001026:	7b7b      	ldrb	r3, [r7, #13]
 8001028:	3301      	adds	r3, #1
 800102a:	737b      	strb	r3, [r7, #13]
 800102c:	7b7b      	ldrb	r3, [r7, #13]
 800102e:	2b07      	cmp	r3, #7
 8001030:	d9e9      	bls.n	8001006 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	3301      	adds	r3, #1
 8001036:	73bb      	strb	r3, [r7, #14]
 8001038:	7bbb      	ldrb	r3, [r7, #14]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	d9d8      	bls.n	8000ff0 <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 800103e:	bf00      	nop
 8001040:	bf00      	nop
 8001042:	3710      	adds	r7, #16
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}
 8001048:	08006328 	.word	0x08006328

0800104c <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	603a      	str	r2, [r7, #0]
 8001056:	80fb      	strh	r3, [r7, #6]
 8001058:	460b      	mov	r3, r1
 800105a:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 800105c:	e01c      	b.n	8001098 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 800105e:	88fb      	ldrh	r3, [r7, #6]
 8001060:	2be8      	cmp	r3, #232	; 0xe8
 8001062:	d904      	bls.n	800106e <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001064:	2300      	movs	r3, #0
 8001066:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8001068:	88bb      	ldrh	r3, [r7, #4]
 800106a:	3310      	adds	r3, #16
 800106c:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 800106e:	88bb      	ldrh	r3, [r7, #4]
 8001070:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8001074:	d903      	bls.n	800107e <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8001076:	2300      	movs	r3, #0
 8001078:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 800107a:	2300      	movs	r3, #0
 800107c:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	781a      	ldrb	r2, [r3, #0]
 8001082:	88b9      	ldrh	r1, [r7, #4]
 8001084:	88fb      	ldrh	r3, [r7, #6]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff ff9a 	bl	8000fc0 <LCD_DrawChar>
		
		pStr ++;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	3301      	adds	r3, #1
 8001090:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	3308      	adds	r3, #8
 8001096:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	781b      	ldrb	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d1de      	bne.n	800105e <LCD_DrawString+0x12>
		
	}
	
}
 80010a0:	bf00      	nop
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}
	...

080010ac <LCD_DisplayInterface>:
    }
	
}


void LCD_DisplayInterface(void){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
	LCD_OpenWindow(0, 0, 240, 320);
 80010b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80010b6:	22f0      	movs	r2, #240	; 0xf0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff fee6 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 80010c0:	202c      	movs	r0, #44	; 0x2c
 80010c2:	f7ff fdab 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 320; i++){
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
 80010ca:	e018      	b.n	80010fe <LCD_DisplayInterface+0x52>
		for(int j = 0; j < 240; j++){
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	e00f      	b.n	80010f2 <LCD_DisplayInterface+0x46>
			LCD_Write_Data (interface[i][j]);
 80010d2:	490f      	ldr	r1, [pc, #60]	; (8001110 <LCD_DisplayInterface+0x64>)
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	011b      	lsls	r3, r3, #4
 80010da:	1a9b      	subs	r3, r3, r2
 80010dc:	011b      	lsls	r3, r3, #4
 80010de:	683a      	ldr	r2, [r7, #0]
 80010e0:	4413      	add	r3, r2
 80010e2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fda6 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 240; j++){
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	3301      	adds	r3, #1
 80010f0:	603b      	str	r3, [r7, #0]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	2bef      	cmp	r3, #239	; 0xef
 80010f6:	ddec      	ble.n	80010d2 <LCD_DisplayInterface+0x26>
	for(int i = 0; i < 320; i++){
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	3301      	adds	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001104:	dbe2      	blt.n	80010cc <LCD_DisplayInterface+0x20>
		}
	}

}
 8001106:	bf00      	nop
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	08018540 	.word	0x08018540

08001114 <LCD_Display0>:

/**
 * @param n: first or second digit
 */
void LCD_Display0(int n){
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(72, 175-n*65, 79, 50);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	b29b      	uxth	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	0292      	lsls	r2, r2, #10
 8001124:	1ad2      	subs	r2, r2, r3
 8001126:	0192      	lsls	r2, r2, #6
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	b29b      	uxth	r3, r3
 800112c:	33af      	adds	r3, #175	; 0xaf
 800112e:	b299      	uxth	r1, r3
 8001130:	2332      	movs	r3, #50	; 0x32
 8001132:	224f      	movs	r2, #79	; 0x4f
 8001134:	2048      	movs	r0, #72	; 0x48
 8001136:	f7ff fea9 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 800113a:	202c      	movs	r0, #44	; 0x2c
 800113c:	f7ff fd6e 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 50; i++){
 8001140:	2300      	movs	r3, #0
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	e019      	b.n	800117a <LCD_Display0+0x66>
		for(int j = 0; j < 79; j++){
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	e010      	b.n	800116e <LCD_Display0+0x5a>
			LCD_Write_Data (zero[i][j]);
 800114c:	490f      	ldr	r1, [pc, #60]	; (800118c <LCD_Display0+0x78>)
 800114e:	68fa      	ldr	r2, [r7, #12]
 8001150:	4613      	mov	r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	4413      	add	r3, r2
 8001156:	011b      	lsls	r3, r3, #4
 8001158:	1a9b      	subs	r3, r3, r2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff fd68 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 79; j++){
 8001168:	68bb      	ldr	r3, [r7, #8]
 800116a:	3301      	adds	r3, #1
 800116c:	60bb      	str	r3, [r7, #8]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	2b4e      	cmp	r3, #78	; 0x4e
 8001172:	ddeb      	ble.n	800114c <LCD_Display0+0x38>
	for(int i = 0; i < 50; i++){
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	3301      	adds	r3, #1
 8001178:	60fb      	str	r3, [r7, #12]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	2b31      	cmp	r3, #49	; 0x31
 800117e:	dde2      	ble.n	8001146 <LCD_Display0+0x32>
		}
	}
}
 8001180:	bf00      	nop
 8001182:	bf00      	nop
 8001184:	3710      	adds	r7, #16
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	08006918 	.word	0x08006918

08001190 <LCD_Display1>:

void LCD_Display1(int n){
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(72, 187-n*65, 76, 28);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	b29b      	uxth	r3, r3
 800119c:	461a      	mov	r2, r3
 800119e:	0292      	lsls	r2, r2, #10
 80011a0:	1ad2      	subs	r2, r2, r3
 80011a2:	0192      	lsls	r2, r2, #6
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	b29b      	uxth	r3, r3
 80011a8:	33bb      	adds	r3, #187	; 0xbb
 80011aa:	b299      	uxth	r1, r3
 80011ac:	231c      	movs	r3, #28
 80011ae:	224c      	movs	r2, #76	; 0x4c
 80011b0:	2048      	movs	r0, #72	; 0x48
 80011b2:	f7ff fe6b 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 80011b6:	202c      	movs	r0, #44	; 0x2c
 80011b8:	f7ff fd30 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 28; i++){
 80011bc:	2300      	movs	r3, #0
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	e017      	b.n	80011f2 <LCD_Display1+0x62>
		for(int j = 0; j < 76; j++){
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	e00e      	b.n	80011e6 <LCD_Display1+0x56>
			LCD_Write_Data (one[i][j]);
 80011c8:	490e      	ldr	r1, [pc, #56]	; (8001204 <LCD_Display1+0x74>)
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	224c      	movs	r2, #76	; 0x4c
 80011ce:	fb03 f202 	mul.w	r2, r3, r2
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	4413      	add	r3, r2
 80011d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff fd2c 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 76; j++){
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	3301      	adds	r3, #1
 80011e4:	60bb      	str	r3, [r7, #8]
 80011e6:	68bb      	ldr	r3, [r7, #8]
 80011e8:	2b4b      	cmp	r3, #75	; 0x4b
 80011ea:	dded      	ble.n	80011c8 <LCD_Display1+0x38>
	for(int i = 0; i < 28; i++){
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	3301      	adds	r3, #1
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	2b1b      	cmp	r3, #27
 80011f6:	dde4      	ble.n	80011c2 <LCD_Display1+0x32>
		}
	}
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	080087f4 	.word	0x080087f4

08001208 <LCD_Display2>:

void LCD_Display2(int n){
 8001208:	b580      	push	{r7, lr}
 800120a:	b084      	sub	sp, #16
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(72, 175-n*65, 77, 47);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	b29b      	uxth	r3, r3
 8001214:	461a      	mov	r2, r3
 8001216:	0292      	lsls	r2, r2, #10
 8001218:	1ad2      	subs	r2, r2, r3
 800121a:	0192      	lsls	r2, r2, #6
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	b29b      	uxth	r3, r3
 8001220:	33af      	adds	r3, #175	; 0xaf
 8001222:	b299      	uxth	r1, r3
 8001224:	232f      	movs	r3, #47	; 0x2f
 8001226:	224d      	movs	r2, #77	; 0x4d
 8001228:	2048      	movs	r0, #72	; 0x48
 800122a:	f7ff fe2f 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 800122e:	202c      	movs	r0, #44	; 0x2c
 8001230:	f7ff fcf4 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 47; i++){
 8001234:	2300      	movs	r3, #0
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	e017      	b.n	800126a <LCD_Display2+0x62>
		for(int j = 0; j < 77; j++){
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	e00e      	b.n	800125e <LCD_Display2+0x56>
			LCD_Write_Data (two[i][j]);
 8001240:	490e      	ldr	r1, [pc, #56]	; (800127c <LCD_Display2+0x74>)
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	224d      	movs	r2, #77	; 0x4d
 8001246:	fb03 f202 	mul.w	r2, r3, r2
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	4413      	add	r3, r2
 800124e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001252:	4618      	mov	r0, r3
 8001254:	f7ff fcf0 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 77; j++){
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3301      	adds	r3, #1
 800125c:	60bb      	str	r3, [r7, #8]
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2b4c      	cmp	r3, #76	; 0x4c
 8001262:	dded      	ble.n	8001240 <LCD_Display2+0x38>
	for(int i = 0; i < 47; i++){
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	3301      	adds	r3, #1
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	2b2e      	cmp	r3, #46	; 0x2e
 800126e:	dde4      	ble.n	800123a <LCD_Display2+0x32>
		}
	}
}
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	3710      	adds	r7, #16
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	08009894 	.word	0x08009894

08001280 <LCD_Display3>:

void LCD_Display3(int n){
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(72, 175-n*65, 79, 46);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	b29b      	uxth	r3, r3
 800128c:	461a      	mov	r2, r3
 800128e:	0292      	lsls	r2, r2, #10
 8001290:	1ad2      	subs	r2, r2, r3
 8001292:	0192      	lsls	r2, r2, #6
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	b29b      	uxth	r3, r3
 8001298:	33af      	adds	r3, #175	; 0xaf
 800129a:	b299      	uxth	r1, r3
 800129c:	232e      	movs	r3, #46	; 0x2e
 800129e:	224f      	movs	r2, #79	; 0x4f
 80012a0:	2048      	movs	r0, #72	; 0x48
 80012a2:	f7ff fdf3 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 80012a6:	202c      	movs	r0, #44	; 0x2c
 80012a8:	f7ff fcb8 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 46; i++){
 80012ac:	2300      	movs	r3, #0
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	e019      	b.n	80012e6 <LCD_Display3+0x66>
		for(int j = 0; j < 79; j++){
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	e010      	b.n	80012da <LCD_Display3+0x5a>
			LCD_Write_Data (three[i][j]);
 80012b8:	490f      	ldr	r1, [pc, #60]	; (80012f8 <LCD_Display3+0x78>)
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	4613      	mov	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	4413      	add	r3, r2
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	1a9b      	subs	r3, r3, r2
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	4413      	add	r3, r2
 80012ca:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fcb2 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 79; j++){
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	3301      	adds	r3, #1
 80012d8:	60bb      	str	r3, [r7, #8]
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	2b4e      	cmp	r3, #78	; 0x4e
 80012de:	ddeb      	ble.n	80012b8 <LCD_Display3+0x38>
	for(int i = 0; i < 46; i++){
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	3301      	adds	r3, #1
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	2b2d      	cmp	r3, #45	; 0x2d
 80012ea:	dde2      	ble.n	80012b2 <LCD_Display3+0x32>
		}
	}
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	0800b4dc 	.word	0x0800b4dc

080012fc <LCD_Display4>:

void LCD_Display4(int n){
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(72, 175-n*65, 76, 53);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	b29b      	uxth	r3, r3
 8001308:	461a      	mov	r2, r3
 800130a:	0292      	lsls	r2, r2, #10
 800130c:	1ad2      	subs	r2, r2, r3
 800130e:	0192      	lsls	r2, r2, #6
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	b29b      	uxth	r3, r3
 8001314:	33af      	adds	r3, #175	; 0xaf
 8001316:	b299      	uxth	r1, r3
 8001318:	2335      	movs	r3, #53	; 0x35
 800131a:	224c      	movs	r2, #76	; 0x4c
 800131c:	2048      	movs	r0, #72	; 0x48
 800131e:	f7ff fdb5 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 8001322:	202c      	movs	r0, #44	; 0x2c
 8001324:	f7ff fc7a 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 53; i++){
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	e017      	b.n	800135e <LCD_Display4+0x62>
		for(int j = 0; j < 76; j++){
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	e00e      	b.n	8001352 <LCD_Display4+0x56>
			LCD_Write_Data (four[i][j]);
 8001334:	490e      	ldr	r1, [pc, #56]	; (8001370 <LCD_Display4+0x74>)
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	224c      	movs	r2, #76	; 0x4c
 800133a:	fb03 f202 	mul.w	r2, r3, r2
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	4413      	add	r3, r2
 8001342:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff fc76 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 76; j++){
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	3301      	adds	r3, #1
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2b4b      	cmp	r3, #75	; 0x4b
 8001356:	dded      	ble.n	8001334 <LCD_Display4+0x38>
	for(int i = 0; i < 53; i++){
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	3301      	adds	r3, #1
 800135c:	60fb      	str	r3, [r7, #12]
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b34      	cmp	r3, #52	; 0x34
 8001362:	dde4      	ble.n	800132e <LCD_Display4+0x32>
		}
	}
}
 8001364:	bf00      	nop
 8001366:	bf00      	nop
 8001368:	3710      	adds	r7, #16
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	0800d140 	.word	0x0800d140

08001374 <LCD_Display5>:

void LCD_Display5(int n){
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(72, 175-n*65, 78, 47);
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	b29b      	uxth	r3, r3
 8001380:	461a      	mov	r2, r3
 8001382:	0292      	lsls	r2, r2, #10
 8001384:	1ad2      	subs	r2, r2, r3
 8001386:	0192      	lsls	r2, r2, #6
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	b29b      	uxth	r3, r3
 800138c:	33af      	adds	r3, #175	; 0xaf
 800138e:	b299      	uxth	r1, r3
 8001390:	232f      	movs	r3, #47	; 0x2f
 8001392:	224e      	movs	r2, #78	; 0x4e
 8001394:	2048      	movs	r0, #72	; 0x48
 8001396:	f7ff fd79 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 800139a:	202c      	movs	r0, #44	; 0x2c
 800139c:	f7ff fc3e 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 47; i++){
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	e017      	b.n	80013d6 <LCD_Display5+0x62>
		for(int j = 0; j < 78; j++){
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	e00e      	b.n	80013ca <LCD_Display5+0x56>
			LCD_Write_Data (five[i][j]);
 80013ac:	490e      	ldr	r1, [pc, #56]	; (80013e8 <LCD_Display5+0x74>)
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	224e      	movs	r2, #78	; 0x4e
 80013b2:	fb03 f202 	mul.w	r2, r3, r2
 80013b6:	68bb      	ldr	r3, [r7, #8]
 80013b8:	4413      	add	r3, r2
 80013ba:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80013be:	4618      	mov	r0, r3
 80013c0:	f7ff fc3a 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 78; j++){
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	3301      	adds	r3, #1
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	2b4d      	cmp	r3, #77	; 0x4d
 80013ce:	dded      	ble.n	80013ac <LCD_Display5+0x38>
	for(int i = 0; i < 47; i++){
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	3301      	adds	r3, #1
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2b2e      	cmp	r3, #46	; 0x2e
 80013da:	dde4      	ble.n	80013a6 <LCD_Display5+0x32>
		}
	}
}
 80013dc:	bf00      	nop
 80013de:	bf00      	nop
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	0800f0b8 	.word	0x0800f0b8

080013ec <LCD_Display6>:

void LCD_Display6(int n){
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b084      	sub	sp, #16
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(72, 175-n*65, 79, 50);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	b29b      	uxth	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	0292      	lsls	r2, r2, #10
 80013fc:	1ad2      	subs	r2, r2, r3
 80013fe:	0192      	lsls	r2, r2, #6
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	b29b      	uxth	r3, r3
 8001404:	33af      	adds	r3, #175	; 0xaf
 8001406:	b299      	uxth	r1, r3
 8001408:	2332      	movs	r3, #50	; 0x32
 800140a:	224f      	movs	r2, #79	; 0x4f
 800140c:	2048      	movs	r0, #72	; 0x48
 800140e:	f7ff fd3d 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 8001412:	202c      	movs	r0, #44	; 0x2c
 8001414:	f7ff fc02 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 50; i++){
 8001418:	2300      	movs	r3, #0
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	e019      	b.n	8001452 <LCD_Display6+0x66>
		for(int j = 0; j < 79; j++){
 800141e:	2300      	movs	r3, #0
 8001420:	60bb      	str	r3, [r7, #8]
 8001422:	e010      	b.n	8001446 <LCD_Display6+0x5a>
			LCD_Write_Data (six[i][j]);
 8001424:	490f      	ldr	r1, [pc, #60]	; (8001464 <LCD_Display6+0x78>)
 8001426:	68fa      	ldr	r2, [r7, #12]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	011b      	lsls	r3, r3, #4
 8001430:	1a9b      	subs	r3, r3, r2
 8001432:	68ba      	ldr	r2, [r7, #8]
 8001434:	4413      	add	r3, r2
 8001436:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800143a:	4618      	mov	r0, r3
 800143c:	f7ff fbfc 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 79; j++){
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	3301      	adds	r3, #1
 8001444:	60bb      	str	r3, [r7, #8]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	2b4e      	cmp	r3, #78	; 0x4e
 800144a:	ddeb      	ble.n	8001424 <LCD_Display6+0x38>
	for(int i = 0; i < 50; i++){
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	3301      	adds	r3, #1
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2b31      	cmp	r3, #49	; 0x31
 8001456:	dde2      	ble.n	800141e <LCD_Display6+0x32>
		}
	}
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	08010d5c 	.word	0x08010d5c

08001468 <LCD_Display7>:

void LCD_Display7(int n){
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(72, 175-n*65, 76, 46);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	b29b      	uxth	r3, r3
 8001474:	461a      	mov	r2, r3
 8001476:	0292      	lsls	r2, r2, #10
 8001478:	1ad2      	subs	r2, r2, r3
 800147a:	0192      	lsls	r2, r2, #6
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	b29b      	uxth	r3, r3
 8001480:	33af      	adds	r3, #175	; 0xaf
 8001482:	b299      	uxth	r1, r3
 8001484:	232e      	movs	r3, #46	; 0x2e
 8001486:	224c      	movs	r2, #76	; 0x4c
 8001488:	2048      	movs	r0, #72	; 0x48
 800148a:	f7ff fcff 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 800148e:	202c      	movs	r0, #44	; 0x2c
 8001490:	f7ff fbc4 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 46; i++){
 8001494:	2300      	movs	r3, #0
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	e017      	b.n	80014ca <LCD_Display7+0x62>
		for(int j = 0; j < 76; j++){
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	e00e      	b.n	80014be <LCD_Display7+0x56>
			LCD_Write_Data (seven[i][j]);
 80014a0:	490e      	ldr	r1, [pc, #56]	; (80014dc <LCD_Display7+0x74>)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	224c      	movs	r2, #76	; 0x4c
 80014a6:	fb03 f202 	mul.w	r2, r3, r2
 80014aa:	68bb      	ldr	r3, [r7, #8]
 80014ac:	4413      	add	r3, r2
 80014ae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff fbc0 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 76; j++){
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	3301      	adds	r3, #1
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	2b4b      	cmp	r3, #75	; 0x4b
 80014c2:	dded      	ble.n	80014a0 <LCD_Display7+0x38>
	for(int i = 0; i < 46; i++){
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	3301      	adds	r3, #1
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	2b2d      	cmp	r3, #45	; 0x2d
 80014ce:	dde4      	ble.n	800149a <LCD_Display7+0x32>
		}
	}
}
 80014d0:	bf00      	nop
 80014d2:	bf00      	nop
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	08012c38 	.word	0x08012c38

080014e0 <LCD_Display8>:

void LCD_Display8(int n){
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(72, 175-n*65, 79, 50);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	461a      	mov	r2, r3
 80014ee:	0292      	lsls	r2, r2, #10
 80014f0:	1ad2      	subs	r2, r2, r3
 80014f2:	0192      	lsls	r2, r2, #6
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	33af      	adds	r3, #175	; 0xaf
 80014fa:	b299      	uxth	r1, r3
 80014fc:	2332      	movs	r3, #50	; 0x32
 80014fe:	224f      	movs	r2, #79	; 0x4f
 8001500:	2048      	movs	r0, #72	; 0x48
 8001502:	f7ff fcc3 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 8001506:	202c      	movs	r0, #44	; 0x2c
 8001508:	f7ff fb88 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 50; i++){
 800150c:	2300      	movs	r3, #0
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	e019      	b.n	8001546 <LCD_Display8+0x66>
		for(int j = 0; j < 79; j++){
 8001512:	2300      	movs	r3, #0
 8001514:	60bb      	str	r3, [r7, #8]
 8001516:	e010      	b.n	800153a <LCD_Display8+0x5a>
			LCD_Write_Data (eight[i][j]);
 8001518:	490f      	ldr	r1, [pc, #60]	; (8001558 <LCD_Display8+0x78>)
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4613      	mov	r3, r2
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	4413      	add	r3, r2
 8001522:	011b      	lsls	r3, r3, #4
 8001524:	1a9b      	subs	r3, r3, r2
 8001526:	68ba      	ldr	r2, [r7, #8]
 8001528:	4413      	add	r3, r2
 800152a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff fb82 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 79; j++){
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	3301      	adds	r3, #1
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
 800153c:	2b4e      	cmp	r3, #78	; 0x4e
 800153e:	ddeb      	ble.n	8001518 <LCD_Display8+0x38>
	for(int i = 0; i < 50; i++){
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	3301      	adds	r3, #1
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b31      	cmp	r3, #49	; 0x31
 800154a:	dde2      	ble.n	8001512 <LCD_Display8+0x32>
		}
	}
}
 800154c:	bf00      	nop
 800154e:	bf00      	nop
 8001550:	3710      	adds	r7, #16
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	08014788 	.word	0x08014788

0800155c <LCD_Display9>:

void LCD_Display9(int n){
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(72, 175-n*65, 79, 50);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	b29b      	uxth	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	0292      	lsls	r2, r2, #10
 800156c:	1ad2      	subs	r2, r2, r3
 800156e:	0192      	lsls	r2, r2, #6
 8001570:	1ad3      	subs	r3, r2, r3
 8001572:	b29b      	uxth	r3, r3
 8001574:	33af      	adds	r3, #175	; 0xaf
 8001576:	b299      	uxth	r1, r3
 8001578:	2332      	movs	r3, #50	; 0x32
 800157a:	224f      	movs	r2, #79	; 0x4f
 800157c:	2048      	movs	r0, #72	; 0x48
 800157e:	f7ff fc85 	bl	8000e8c <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 8001582:	202c      	movs	r0, #44	; 0x2c
 8001584:	f7ff fb4a 	bl	8000c1c <LCD_Write_Cmd>
	for(int i = 0; i < 50; i++){
 8001588:	2300      	movs	r3, #0
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	e019      	b.n	80015c2 <LCD_Display9+0x66>
		for(int j = 0; j < 79; j++){
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	e010      	b.n	80015b6 <LCD_Display9+0x5a>
			LCD_Write_Data (nine[i][j]);
 8001594:	490f      	ldr	r1, [pc, #60]	; (80015d4 <LCD_Display9+0x78>)
 8001596:	68fa      	ldr	r2, [r7, #12]
 8001598:	4613      	mov	r3, r2
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	4413      	add	r3, r2
 800159e:	011b      	lsls	r3, r3, #4
 80015a0:	1a9b      	subs	r3, r3, r2
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	4413      	add	r3, r2
 80015a6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015aa:	4618      	mov	r0, r3
 80015ac:	f7ff fb44 	bl	8000c38 <LCD_Write_Data>
		for(int j = 0; j < 79; j++){
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	3301      	adds	r3, #1
 80015b4:	60bb      	str	r3, [r7, #8]
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	2b4e      	cmp	r3, #78	; 0x4e
 80015ba:	ddeb      	ble.n	8001594 <LCD_Display9+0x38>
	for(int i = 0; i < 50; i++){
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	3301      	adds	r3, #1
 80015c0:	60fb      	str	r3, [r7, #12]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	2b31      	cmp	r3, #49	; 0x31
 80015c6:	dde2      	ble.n	800158e <LCD_Display9+0x32>
		}
	}
}
 80015c8:	bf00      	nop
 80015ca:	bf00      	nop
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	08016664 	.word	0x08016664

080015d8 <LCD_DisplayNum>:

void LCD_DisplayNum(int num){
 80015d8:	b580      	push	{r7, lr}
 80015da:	b084      	sub	sp, #16
 80015dc:	af02      	add	r7, sp, #8
 80015de:	6078      	str	r0, [r7, #4]
	LCD_Clear (72, 110, 79, 120, BACKGROUND);
 80015e0:	2300      	movs	r3, #0
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2378      	movs	r3, #120	; 0x78
 80015e6:	224f      	movs	r2, #79	; 0x4f
 80015e8:	216e      	movs	r1, #110	; 0x6e
 80015ea:	2048      	movs	r0, #72	; 0x48
 80015ec:	f7ff fcc5 	bl	8000f7a <LCD_Clear>
	switch(num/10){
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	4a4c      	ldr	r2, [pc, #304]	; (8001724 <LCD_DisplayNum+0x14c>)
 80015f4:	fb82 1203 	smull	r1, r2, r2, r3
 80015f8:	1092      	asrs	r2, r2, #2
 80015fa:	17db      	asrs	r3, r3, #31
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b09      	cmp	r3, #9
 8001600:	d83e      	bhi.n	8001680 <LCD_DisplayNum+0xa8>
 8001602:	a201      	add	r2, pc, #4	; (adr r2, 8001608 <LCD_DisplayNum+0x30>)
 8001604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001608:	08001631 	.word	0x08001631
 800160c:	08001639 	.word	0x08001639
 8001610:	08001641 	.word	0x08001641
 8001614:	08001649 	.word	0x08001649
 8001618:	08001651 	.word	0x08001651
 800161c:	08001659 	.word	0x08001659
 8001620:	08001661 	.word	0x08001661
 8001624:	08001669 	.word	0x08001669
 8001628:	08001671 	.word	0x08001671
 800162c:	08001679 	.word	0x08001679
		case 0:
			LCD_Display0(0);
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fd6f 	bl	8001114 <LCD_Display0>
			break;
 8001636:	e023      	b.n	8001680 <LCD_DisplayNum+0xa8>
		case 1:
			LCD_Display1(0);
 8001638:	2000      	movs	r0, #0
 800163a:	f7ff fda9 	bl	8001190 <LCD_Display1>
			break;
 800163e:	e01f      	b.n	8001680 <LCD_DisplayNum+0xa8>
		case 2:
			LCD_Display2(0);
 8001640:	2000      	movs	r0, #0
 8001642:	f7ff fde1 	bl	8001208 <LCD_Display2>
			break;
 8001646:	e01b      	b.n	8001680 <LCD_DisplayNum+0xa8>
		case 3:
			LCD_Display3(0);
 8001648:	2000      	movs	r0, #0
 800164a:	f7ff fe19 	bl	8001280 <LCD_Display3>
			break;
 800164e:	e017      	b.n	8001680 <LCD_DisplayNum+0xa8>
		case 4:
			LCD_Display4(0);
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fe53 	bl	80012fc <LCD_Display4>
			break;
 8001656:	e013      	b.n	8001680 <LCD_DisplayNum+0xa8>
		case 5:
			LCD_Display5(0);
 8001658:	2000      	movs	r0, #0
 800165a:	f7ff fe8b 	bl	8001374 <LCD_Display5>
			break;
 800165e:	e00f      	b.n	8001680 <LCD_DisplayNum+0xa8>
		case 6:
			LCD_Display6(0);
 8001660:	2000      	movs	r0, #0
 8001662:	f7ff fec3 	bl	80013ec <LCD_Display6>
			break;
 8001666:	e00b      	b.n	8001680 <LCD_DisplayNum+0xa8>
		case 7:
			LCD_Display7(0);
 8001668:	2000      	movs	r0, #0
 800166a:	f7ff fefd 	bl	8001468 <LCD_Display7>
			break;
 800166e:	e007      	b.n	8001680 <LCD_DisplayNum+0xa8>
		case 8:
			LCD_Display8(0);
 8001670:	2000      	movs	r0, #0
 8001672:	f7ff ff35 	bl	80014e0 <LCD_Display8>
			break;
 8001676:	e003      	b.n	8001680 <LCD_DisplayNum+0xa8>
		case 9:
			LCD_Display9(0);
 8001678:	2000      	movs	r0, #0
 800167a:	f7ff ff6f 	bl	800155c <LCD_Display9>
			break;
 800167e:	bf00      	nop
	}
	switch(num%10){
 8001680:	6879      	ldr	r1, [r7, #4]
 8001682:	4b28      	ldr	r3, [pc, #160]	; (8001724 <LCD_DisplayNum+0x14c>)
 8001684:	fb83 2301 	smull	r2, r3, r3, r1
 8001688:	109a      	asrs	r2, r3, #2
 800168a:	17cb      	asrs	r3, r1, #31
 800168c:	1ad2      	subs	r2, r2, r3
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	1aca      	subs	r2, r1, r3
 8001698:	2a09      	cmp	r2, #9
 800169a:	d83f      	bhi.n	800171c <LCD_DisplayNum+0x144>
 800169c:	a301      	add	r3, pc, #4	; (adr r3, 80016a4 <LCD_DisplayNum+0xcc>)
 800169e:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 80016a2:	bf00      	nop
 80016a4:	080016cd 	.word	0x080016cd
 80016a8:	080016d5 	.word	0x080016d5
 80016ac:	080016dd 	.word	0x080016dd
 80016b0:	080016e5 	.word	0x080016e5
 80016b4:	080016ed 	.word	0x080016ed
 80016b8:	080016f5 	.word	0x080016f5
 80016bc:	080016fd 	.word	0x080016fd
 80016c0:	08001705 	.word	0x08001705
 80016c4:	0800170d 	.word	0x0800170d
 80016c8:	08001715 	.word	0x08001715
		case 0:
			LCD_Display0(1);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f7ff fd21 	bl	8001114 <LCD_Display0>
			break;
 80016d2:	e023      	b.n	800171c <LCD_DisplayNum+0x144>
		case 1:
			LCD_Display1(1);
 80016d4:	2001      	movs	r0, #1
 80016d6:	f7ff fd5b 	bl	8001190 <LCD_Display1>
			break;
 80016da:	e01f      	b.n	800171c <LCD_DisplayNum+0x144>
		case 2:
			LCD_Display2(1);
 80016dc:	2001      	movs	r0, #1
 80016de:	f7ff fd93 	bl	8001208 <LCD_Display2>
			break;
 80016e2:	e01b      	b.n	800171c <LCD_DisplayNum+0x144>
		case 3:
			LCD_Display3(1);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fdcb 	bl	8001280 <LCD_Display3>
			break;
 80016ea:	e017      	b.n	800171c <LCD_DisplayNum+0x144>
		case 4:
			LCD_Display4(1);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f7ff fe05 	bl	80012fc <LCD_Display4>
			break;
 80016f2:	e013      	b.n	800171c <LCD_DisplayNum+0x144>
		case 5:
			LCD_Display5(1);
 80016f4:	2001      	movs	r0, #1
 80016f6:	f7ff fe3d 	bl	8001374 <LCD_Display5>
			break;
 80016fa:	e00f      	b.n	800171c <LCD_DisplayNum+0x144>
		case 6:
			LCD_Display6(1);
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff fe75 	bl	80013ec <LCD_Display6>
			break;
 8001702:	e00b      	b.n	800171c <LCD_DisplayNum+0x144>
		case 7:
			LCD_Display7(1);
 8001704:	2001      	movs	r0, #1
 8001706:	f7ff feaf 	bl	8001468 <LCD_Display7>
			break;
 800170a:	e007      	b.n	800171c <LCD_DisplayNum+0x144>
		case 8:
			LCD_Display8(1);
 800170c:	2001      	movs	r0, #1
 800170e:	f7ff fee7 	bl	80014e0 <LCD_Display8>
			break;
 8001712:	e003      	b.n	800171c <LCD_DisplayNum+0x144>
		case 9:
			LCD_Display9(1);
 8001714:	2001      	movs	r0, #1
 8001716:	f7ff ff21 	bl	800155c <LCD_Display9>
			break;
 800171a:	bf00      	nop
	}
}
 800171c:	bf00      	nop
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	66666667 	.word	0x66666667

08001728 <led_blink>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_blink(){
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800172c:	2200      	movs	r2, #0
 800172e:	2120      	movs	r1, #32
 8001730:	4817      	ldr	r0, [pc, #92]	; (8001790 <led_blink+0x68>)
 8001732:	f001 fd50 	bl	80031d6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001736:	2064      	movs	r0, #100	; 0x64
 8001738:	f001 fa70 	bl	8002c1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800173c:	2201      	movs	r2, #1
 800173e:	2120      	movs	r1, #32
 8001740:	4813      	ldr	r0, [pc, #76]	; (8001790 <led_blink+0x68>)
 8001742:	f001 fd48 	bl	80031d6 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001746:	2032      	movs	r0, #50	; 0x32
 8001748:	f001 fa68 	bl	8002c1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800174c:	2200      	movs	r2, #0
 800174e:	2120      	movs	r1, #32
 8001750:	480f      	ldr	r0, [pc, #60]	; (8001790 <led_blink+0x68>)
 8001752:	f001 fd40 	bl	80031d6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001756:	2064      	movs	r0, #100	; 0x64
 8001758:	f001 fa60 	bl	8002c1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800175c:	2201      	movs	r2, #1
 800175e:	2120      	movs	r1, #32
 8001760:	480b      	ldr	r0, [pc, #44]	; (8001790 <led_blink+0x68>)
 8001762:	f001 fd38 	bl	80031d6 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001766:	2032      	movs	r0, #50	; 0x32
 8001768:	f001 fa58 	bl	8002c1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800176c:	2200      	movs	r2, #0
 800176e:	2120      	movs	r1, #32
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <led_blink+0x68>)
 8001772:	f001 fd30 	bl	80031d6 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001776:	2064      	movs	r0, #100	; 0x64
 8001778:	f001 fa50 	bl	8002c1c <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 800177c:	2201      	movs	r2, #1
 800177e:	2120      	movs	r1, #32
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <led_blink+0x68>)
 8001782:	f001 fd28 	bl	80031d6 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001786:	2032      	movs	r0, #50	; 0x32
 8001788:	f001 fa48 	bl	8002c1c <HAL_Delay>
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40010c00 	.word	0x40010c00

08001794 <stepper_up>:

void stepper_up(){
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8001798:	2201      	movs	r2, #1
 800179a:	2120      	movs	r1, #32
 800179c:	4808      	ldr	r0, [pc, #32]	; (80017c0 <stepper_up+0x2c>)
 800179e:	f001 fd1a 	bl	80031d6 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 80017a2:	2201      	movs	r2, #1
 80017a4:	2140      	movs	r1, #64	; 0x40
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <stepper_up+0x2c>)
 80017a8:	f001 fd15 	bl	80031d6 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);
 80017ac:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <stepper_up+0x30>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2201      	movs	r2, #1
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1);
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <stepper_up+0x30>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2201      	movs	r2, #1
 80017ba:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40011800 	.word	0x40011800
 80017c4:	2000013c 	.word	0x2000013c

080017c8 <stepper_stop>:

void stepper_stop(){
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <stepper_stop+0x1c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80017d4:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <stepper_stop+0x1c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2200      	movs	r2, #0
 80017da:	639a      	str	r2, [r3, #56]	; 0x38
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	bc80      	pop	{r7}
 80017e2:	4770      	bx	lr
 80017e4:	2000013c 	.word	0x2000013c

080017e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017e8:	b5b0      	push	{r4, r5, r7, lr}
 80017ea:	b09e      	sub	sp, #120	; 0x78
 80017ec:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017ee:	f001 f9b3 	bl	8002b58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017f2:	f000 fa4f 	bl	8001c94 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017f6:	f000 fb49 	bl	8001e8c <MX_GPIO_Init>
  MX_FSMC_Init();
 80017fa:	f000 fc33 	bl	8002064 <MX_FSMC_Init>
  MX_I2C2_Init();
 80017fe:	f000 fa95 	bl	8001d2c <MX_I2C2_Init>
  MX_TIM3_Init();
 8001802:	f000 fac1 	bl	8001d88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  //LCD
  LCD_INIT();
 8001806:	f7ff f9be 	bl	8000b86 <LCD_INIT>
  LCD_DisplayInterface();
 800180a:	f7ff fc4f 	bl	80010ac <LCD_DisplayInterface>
  //timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800180e:	2100      	movs	r1, #0
 8001810:	48b3      	ldr	r0, [pc, #716]	; (8001ae0 <main+0x2f8>)
 8001812:	f003 fa4d 	bl	8004cb0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001816:	2104      	movs	r1, #4
 8001818:	48b1      	ldr	r0, [pc, #708]	; (8001ae0 <main+0x2f8>)
 800181a:	f003 fa49 	bl	8004cb0 <HAL_TIM_PWM_Start>




  //HMC5883L
  char str3[] = "Z:";
 800181e:	4ab1      	ldr	r2, [pc, #708]	; (8001ae4 <main+0x2fc>)
 8001820:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001824:	6812      	ldr	r2, [r2, #0]
 8001826:	4611      	mov	r1, r2
 8001828:	8019      	strh	r1, [r3, #0]
 800182a:	3302      	adds	r3, #2
 800182c:	0c12      	lsrs	r2, r2, #16
 800182e:	701a      	strb	r2, [r3, #0]
  char str6[10];
  char str7[10];

  LCD_DrawString(50, 60, str3);
 8001830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001834:	461a      	mov	r2, r3
 8001836:	213c      	movs	r1, #60	; 0x3c
 8001838:	2032      	movs	r0, #50	; 0x32
 800183a:	f7ff fc07 	bl	800104c <LCD_DrawString>

  uint16_t HMC5883L_Addr = 0x1E;
 800183e:	231e      	movs	r3, #30
 8001840:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  uint8_t CRA = 0x70;
 8001844:	2370      	movs	r3, #112	; 0x70
 8001846:	73fb      	strb	r3, [r7, #15]
  uint8_t CRB = 0xA0;
 8001848:	23a0      	movs	r3, #160	; 0xa0
 800184a:	73bb      	strb	r3, [r7, #14]
  uint8_t mode = 0x00;
 800184c:	2300      	movs	r3, #0
 800184e:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Mem_Write(&hi2c2,HMC5883L_Addr<<1,0x00,1,&CRA,1,100);
 8001850:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	b299      	uxth	r1, r3
 8001858:	2364      	movs	r3, #100	; 0x64
 800185a:	9302      	str	r3, [sp, #8]
 800185c:	2301      	movs	r3, #1
 800185e:	9301      	str	r3, [sp, #4]
 8001860:	f107 030f 	add.w	r3, r7, #15
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2301      	movs	r3, #1
 8001868:	2200      	movs	r2, #0
 800186a:	489f      	ldr	r0, [pc, #636]	; (8001ae8 <main+0x300>)
 800186c:	f001 fe32 	bl	80034d4 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c2,HMC5883L_Addr<<1,0x01,1,&CRB,1,100);
 8001870:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	b299      	uxth	r1, r3
 8001878:	2364      	movs	r3, #100	; 0x64
 800187a:	9302      	str	r3, [sp, #8]
 800187c:	2301      	movs	r3, #1
 800187e:	9301      	str	r3, [sp, #4]
 8001880:	f107 030e 	add.w	r3, r7, #14
 8001884:	9300      	str	r3, [sp, #0]
 8001886:	2301      	movs	r3, #1
 8001888:	2201      	movs	r2, #1
 800188a:	4897      	ldr	r0, [pc, #604]	; (8001ae8 <main+0x300>)
 800188c:	f001 fe22 	bl	80034d4 <HAL_I2C_Mem_Write>
  HAL_I2C_Mem_Write(&hi2c2,HMC5883L_Addr<<1,0x02,1,&mode,1,100);
 8001890:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	b299      	uxth	r1, r3
 8001898:	2364      	movs	r3, #100	; 0x64
 800189a:	9302      	str	r3, [sp, #8]
 800189c:	2301      	movs	r3, #1
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	f107 030d 	add.w	r3, r7, #13
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2301      	movs	r3, #1
 80018a8:	2202      	movs	r2, #2
 80018aa:	488f      	ldr	r0, [pc, #572]	; (8001ae8 <main+0x300>)
 80018ac:	f001 fe12 	bl	80034d4 <HAL_I2C_Mem_Write>
  int8_t mx, my, mz, lx, ly, lz, status;
  int16_t z;
  int init = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	667b      	str	r3, [r7, #100]	; 0x64
  int16_t init_z;
  int counter_size = 50;
 80018b4:	2332      	movs	r3, #50	; 0x32
 80018b6:	643b      	str	r3, [r7, #64]	; 0x40
  int counter = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	65fb      	str	r3, [r7, #92]	; 0x5c

  //touch screeen
  int touch_received;

  //stepper
  int stepper_dir = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	65bb      	str	r3, [r7, #88]	; 0x58
  double current_height = 26.0;
 80018c0:	f04f 0200 	mov.w	r2, #0
 80018c4:	4b89      	ldr	r3, [pc, #548]	; (8001aec <main+0x304>)
 80018c6:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  LCD_DisplayNum(current_height-1);
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b88      	ldr	r3, [pc, #544]	; (8001af0 <main+0x308>)
 80018d0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018d4:	f7fe fcac 	bl	8000230 <__aeabi_dsub>
 80018d8:	4602      	mov	r2, r0
 80018da:	460b      	mov	r3, r1
 80018dc:	4610      	mov	r0, r2
 80018de:	4619      	mov	r1, r3
 80018e0:	f7ff f8f8 	bl	8000ad4 <__aeabi_d2iz>
 80018e4:	4603      	mov	r3, r0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7ff fe76 	bl	80015d8 <LCD_DisplayNum>
  uint32_t timer_temp;
  int temp_d = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  int temp_height = current_height;
 80018f0:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80018f4:	f7ff f8ee 	bl	8000ad4 <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	64bb      	str	r3, [r7, #72]	; 0x48


  int rgb_state = 0;
 80018fc:	2300      	movs	r3, #0
 80018fe:	63bb      	str	r3, [r7, #56]	; 0x38
  uint16_t gpioPin[] = {GPIO_PIN_1, GPIO_PIN_5, GPIO_PIN_0};
 8001900:	4a7c      	ldr	r2, [pc, #496]	; (8001af4 <main+0x30c>)
 8001902:	463b      	mov	r3, r7
 8001904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001908:	6018      	str	r0, [r3, #0]
 800190a:	3304      	adds	r3, #4
 800190c:	8019      	strh	r1, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  touch_received = Check_touchkey();
 800190e:	f001 f835 	bl	800297c <Check_touchkey>
 8001912:	6378      	str	r0, [r7, #52]	; 0x34

	  //If stepper is moving, get the time update. If time change by 2, update height by 1.
	  if(stepper_dir != 0){
 8001914:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001916:	2b00      	cmp	r3, #0
 8001918:	d07b      	beq.n	8001a12 <main+0x22a>
		  current_height += stepper_dir*(double)(HAL_GetTick()-timer_temp)/1900.0;
 800191a:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800191c:	f7fe fdd6 	bl	80004cc <__aeabi_i2d>
 8001920:	4604      	mov	r4, r0
 8001922:	460d      	mov	r5, r1
 8001924:	f001 f970 	bl	8002c08 <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	4618      	mov	r0, r3
 8001930:	f7fe fdbc 	bl	80004ac <__aeabi_ui2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4620      	mov	r0, r4
 800193a:	4629      	mov	r1, r5
 800193c:	f7fe fe30 	bl	80005a0 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	4610      	mov	r0, r2
 8001946:	4619      	mov	r1, r3
 8001948:	a363      	add	r3, pc, #396	; (adr r3, 8001ad8 <main+0x2f0>)
 800194a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800194e:	f7fe ff51 	bl	80007f4 <__aeabi_ddiv>
 8001952:	4602      	mov	r2, r0
 8001954:	460b      	mov	r3, r1
 8001956:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800195a:	f7fe fc6b 	bl	8000234 <__adddf3>
 800195e:	4602      	mov	r2, r0
 8001960:	460b      	mov	r3, r1
 8001962:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
		  timer_temp = HAL_GetTick();
 8001966:	f001 f94f 	bl	8002c08 <HAL_GetTick>
 800196a:	64f8      	str	r0, [r7, #76]	; 0x4c

		  if(current_height >= 25 && stepper_dir == 1){
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <main+0x310>)
 8001972:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001976:	f7ff f899 	bl	8000aac <__aeabi_dcmpge>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d013      	beq.n	80019a8 <main+0x1c0>
 8001980:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001982:	2b01      	cmp	r3, #1
 8001984:	d110      	bne.n	80019a8 <main+0x1c0>
			  current_height = 25;
 8001986:	f04f 0200 	mov.w	r2, #0
 800198a:	4b5b      	ldr	r3, [pc, #364]	; (8001af8 <main+0x310>)
 800198c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			  stepper_dir = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	65bb      	str	r3, [r7, #88]	; 0x58

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001994:	4b52      	ldr	r3, [pc, #328]	; (8001ae0 <main+0x2f8>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2200      	movs	r2, #0
 800199a:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800199c:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <main+0x2f8>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2200      	movs	r2, #0
 80019a2:	639a      	str	r2, [r3, #56]	; 0x38
			  led_blink();
 80019a4:	f7ff fec0 	bl	8001728 <led_blink>
		  }

		  if(current_height <= 15 && stepper_dir == -1){
 80019a8:	f04f 0200 	mov.w	r2, #0
 80019ac:	4b53      	ldr	r3, [pc, #332]	; (8001afc <main+0x314>)
 80019ae:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80019b2:	f7ff f871 	bl	8000a98 <__aeabi_dcmple>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d014      	beq.n	80019e6 <main+0x1fe>
 80019bc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019c2:	d110      	bne.n	80019e6 <main+0x1fe>
			  current_height = 15;
 80019c4:	f04f 0200 	mov.w	r2, #0
 80019c8:	4b4c      	ldr	r3, [pc, #304]	; (8001afc <main+0x314>)
 80019ca:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
			  stepper_dir = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	65bb      	str	r3, [r7, #88]	; 0x58

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80019d2:	4b43      	ldr	r3, [pc, #268]	; (8001ae0 <main+0x2f8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2200      	movs	r2, #0
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80019da:	4b41      	ldr	r3, [pc, #260]	; (8001ae0 <main+0x2f8>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	2200      	movs	r2, #0
 80019e0:	639a      	str	r2, [r3, #56]	; 0x38
			  led_blink();
 80019e2:	f7ff fea1 	bl	8001728 <led_blink>
		  }

		  if((int)current_height != temp_height){
 80019e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80019ea:	f7ff f873 	bl	8000ad4 <__aeabi_d2iz>
 80019ee:	4602      	mov	r2, r0
 80019f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d00d      	beq.n	8001a12 <main+0x22a>
			  temp_height = current_height;
 80019f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80019fa:	f7ff f86b 	bl	8000ad4 <__aeabi_d2iz>
 80019fe:	4603      	mov	r3, r0
 8001a00:	64bb      	str	r3, [r7, #72]	; 0x48
			  LCD_DisplayNum((int)current_height);
 8001a02:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001a06:	f7ff f865 	bl	8000ad4 <__aeabi_d2iz>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fde3 	bl	80015d8 <LCD_DisplayNum>



	  //stepper up down
	  //reset button
	  if(touch_received == 1){
 8001a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a14:	2b01      	cmp	r3, #1
 8001a16:	d116      	bne.n	8001a46 <main+0x25e>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8001a18:	2201      	movs	r2, #1
 8001a1a:	2120      	movs	r1, #32
 8001a1c:	4838      	ldr	r0, [pc, #224]	; (8001b00 <main+0x318>)
 8001a1e:	f001 fbda 	bl	80031d6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2140      	movs	r1, #64	; 0x40
 8001a26:	4836      	ldr	r0, [pc, #216]	; (8001b00 <main+0x318>)
 8001a28:	f001 fbd5 	bl	80031d6 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);
 8001a2c:	4b2c      	ldr	r3, [pc, #176]	; (8001ae0 <main+0x2f8>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2201      	movs	r2, #1
 8001a32:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1);
 8001a34:	4b2a      	ldr	r3, [pc, #168]	; (8001ae0 <main+0x2f8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2201      	movs	r2, #1
 8001a3a:	639a      	str	r2, [r3, #56]	; 0x38
		  stepper_dir = 1;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	65bb      	str	r3, [r7, #88]	; 0x58
		  timer_temp = HAL_GetTick();
 8001a40:	f001 f8e2 	bl	8002c08 <HAL_GetTick>
 8001a44:	64f8      	str	r0, [r7, #76]	; 0x4c
	  }
	  //up button
	  if(touch_received == 3){
 8001a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a48:	2b03      	cmp	r3, #3
 8001a4a:	d116      	bne.n	8001a7a <main+0x292>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	2120      	movs	r1, #32
 8001a50:	482b      	ldr	r0, [pc, #172]	; (8001b00 <main+0x318>)
 8001a52:	f001 fbc0 	bl	80031d6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8001a56:	2201      	movs	r2, #1
 8001a58:	2140      	movs	r1, #64	; 0x40
 8001a5a:	4829      	ldr	r0, [pc, #164]	; (8001b00 <main+0x318>)
 8001a5c:	f001 fbbb 	bl	80031d6 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);
 8001a60:	4b1f      	ldr	r3, [pc, #124]	; (8001ae0 <main+0x2f8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2201      	movs	r2, #1
 8001a66:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1);
 8001a68:	4b1d      	ldr	r3, [pc, #116]	; (8001ae0 <main+0x2f8>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	639a      	str	r2, [r3, #56]	; 0x38
		  stepper_dir = 1;
 8001a70:	2301      	movs	r3, #1
 8001a72:	65bb      	str	r3, [r7, #88]	; 0x58
		  timer_temp = HAL_GetTick();
 8001a74:	f001 f8c8 	bl	8002c08 <HAL_GetTick>
 8001a78:	64f8      	str	r0, [r7, #76]	; 0x4c
	  }
	  //down button
	  if(touch_received == 4){
 8001a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a7c:	2b04      	cmp	r3, #4
 8001a7e:	d117      	bne.n	8001ab0 <main+0x2c8>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8001a80:	2200      	movs	r2, #0
 8001a82:	2120      	movs	r1, #32
 8001a84:	481e      	ldr	r0, [pc, #120]	; (8001b00 <main+0x318>)
 8001a86:	f001 fba6 	bl	80031d6 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	2140      	movs	r1, #64	; 0x40
 8001a8e:	481c      	ldr	r0, [pc, #112]	; (8001b00 <main+0x318>)
 8001a90:	f001 fba1 	bl	80031d6 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);
 8001a94:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <main+0x2f8>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1);
 8001a9c:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <main+0x2f8>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	639a      	str	r2, [r3, #56]	; 0x38
		  stepper_dir = -1;
 8001aa4:	f04f 33ff 	mov.w	r3, #4294967295
 8001aa8:	65bb      	str	r3, [r7, #88]	; 0x58
		  timer_temp = HAL_GetTick();
 8001aaa:	f001 f8ad 	bl	8002c08 <HAL_GetTick>
 8001aae:	64f8      	str	r0, [r7, #76]	; 0x4c
	  }
	  //pause button
	  if(touch_received == 5){
 8001ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab2:	2b05      	cmp	r3, #5
 8001ab4:	d126      	bne.n	8001b04 <main+0x31c>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001ab6:	4b0a      	ldr	r3, [pc, #40]	; (8001ae0 <main+0x2f8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2200      	movs	r2, #0
 8001abc:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <main+0x2f8>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	639a      	str	r2, [r3, #56]	; 0x38
		  stepper_dir = 0;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	65bb      	str	r3, [r7, #88]	; 0x58
		  timer_temp = HAL_GetTick();
 8001aca:	f001 f89d 	bl	8002c08 <HAL_GetTick>
 8001ace:	64f8      	str	r0, [r7, #76]	; 0x4c
 8001ad0:	e018      	b.n	8001b04 <main+0x31c>
 8001ad2:	bf00      	nop
 8001ad4:	f3af 8000 	nop.w
 8001ad8:	00000000 	.word	0x00000000
 8001adc:	409db000 	.word	0x409db000
 8001ae0:	2000013c 	.word	0x2000013c
 8001ae4:	08006308 	.word	0x08006308
 8001ae8:	200000e8 	.word	0x200000e8
 8001aec:	403a0000 	.word	0x403a0000
 8001af0:	3ff00000 	.word	0x3ff00000
 8001af4:	0800630c 	.word	0x0800630c
 8001af8:	40390000 	.word	0x40390000
 8001afc:	402e0000 	.word	0x402e0000
 8001b00:	40011800 	.word	0x40011800
	  }



	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr<<1,0x09,1,&status,1,100);
 8001b04:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	b299      	uxth	r1, r3
 8001b0c:	2364      	movs	r3, #100	; 0x64
 8001b0e:	9302      	str	r3, [sp, #8]
 8001b10:	2301      	movs	r3, #1
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	1dbb      	adds	r3, r7, #6
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2301      	movs	r3, #1
 8001b1a:	2209      	movs	r2, #9
 8001b1c:	485b      	ldr	r0, [pc, #364]	; (8001c8c <main+0x4a4>)
 8001b1e:	f001 fdd3 	bl	80036c8 <HAL_I2C_Mem_Read>
	  if(status%2 == 0){
 8001b22:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80a9 	beq.w	8001c86 <main+0x49e>
		  continue;
	  }


	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr<<1,0x03,1,&mx,1,100);
 8001b34:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	b299      	uxth	r1, r3
 8001b3c:	2364      	movs	r3, #100	; 0x64
 8001b3e:	9302      	str	r3, [sp, #8]
 8001b40:	2301      	movs	r3, #1
 8001b42:	9301      	str	r3, [sp, #4]
 8001b44:	f107 030c 	add.w	r3, r7, #12
 8001b48:	9300      	str	r3, [sp, #0]
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	2203      	movs	r2, #3
 8001b4e:	484f      	ldr	r0, [pc, #316]	; (8001c8c <main+0x4a4>)
 8001b50:	f001 fdba 	bl	80036c8 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr<<1,0x04,1,&lx,1,100);
 8001b54:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	b299      	uxth	r1, r3
 8001b5c:	2364      	movs	r3, #100	; 0x64
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	2301      	movs	r3, #1
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	f107 0309 	add.w	r3, r7, #9
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	4847      	ldr	r0, [pc, #284]	; (8001c8c <main+0x4a4>)
 8001b70:	f001 fdaa 	bl	80036c8 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr<<1,0x05,1,&mz,1,100);
 8001b74:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	b299      	uxth	r1, r3
 8001b7c:	2364      	movs	r3, #100	; 0x64
 8001b7e:	9302      	str	r3, [sp, #8]
 8001b80:	2301      	movs	r3, #1
 8001b82:	9301      	str	r3, [sp, #4]
 8001b84:	f107 030a 	add.w	r3, r7, #10
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	2205      	movs	r2, #5
 8001b8e:	483f      	ldr	r0, [pc, #252]	; (8001c8c <main+0x4a4>)
 8001b90:	f001 fd9a 	bl	80036c8 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr<<1,0x06,1,&lz,1,100);
 8001b94:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	b299      	uxth	r1, r3
 8001b9c:	2364      	movs	r3, #100	; 0x64
 8001b9e:	9302      	str	r3, [sp, #8]
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	1dfb      	adds	r3, r7, #7
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	2301      	movs	r3, #1
 8001baa:	2206      	movs	r2, #6
 8001bac:	4837      	ldr	r0, [pc, #220]	; (8001c8c <main+0x4a4>)
 8001bae:	f001 fd8b 	bl	80036c8 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr<<1,0x07,1,&my,1,100);
 8001bb2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	b299      	uxth	r1, r3
 8001bba:	2364      	movs	r3, #100	; 0x64
 8001bbc:	9302      	str	r3, [sp, #8]
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	f107 030b 	add.w	r3, r7, #11
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	2301      	movs	r3, #1
 8001bca:	2207      	movs	r2, #7
 8001bcc:	482f      	ldr	r0, [pc, #188]	; (8001c8c <main+0x4a4>)
 8001bce:	f001 fd7b 	bl	80036c8 <HAL_I2C_Mem_Read>
	  HAL_I2C_Mem_Read(&hi2c2,HMC5883L_Addr<<1,0x08,1,&ly,1,100);
 8001bd2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	b299      	uxth	r1, r3
 8001bda:	2364      	movs	r3, #100	; 0x64
 8001bdc:	9302      	str	r3, [sp, #8]
 8001bde:	2301      	movs	r3, #1
 8001be0:	9301      	str	r3, [sp, #4]
 8001be2:	f107 0308 	add.w	r3, r7, #8
 8001be6:	9300      	str	r3, [sp, #0]
 8001be8:	2301      	movs	r3, #1
 8001bea:	2208      	movs	r2, #8
 8001bec:	4827      	ldr	r0, [pc, #156]	; (8001c8c <main+0x4a4>)
 8001bee:	f001 fd6b 	bl	80036c8 <HAL_I2C_Mem_Read>

	  z = lz + (mz << 8);
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4413      	add	r3, r2
 8001c04:	b29b      	uxth	r3, r3
 8001c06:	867b      	strh	r3, [r7, #50]	; 0x32
	  if(init == 0){
 8001c08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d104      	bne.n	8001c18 <main+0x430>
		  init_z = z;
 8001c0e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001c10:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
		  init = 1;
 8001c14:	2301      	movs	r3, #1
 8001c16:	667b      	str	r3, [r7, #100]	; 0x64
	  }
	  z = z-init_z;
 8001c18:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8001c1a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	867b      	strh	r3, [r7, #50]	; 0x32
	  int t = 25+z;
 8001c24:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001c28:	3319      	adds	r3, #25
 8001c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  snprintf(str6,5,"%d", t);
 8001c2c:	f107 001c 	add.w	r0, r7, #28
 8001c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c32:	4a17      	ldr	r2, [pc, #92]	; (8001c90 <main+0x4a8>)
 8001c34:	2105      	movs	r1, #5
 8001c36:	f003 fecb 	bl	80059d0 <sniprintf>
	  snprintf(str7,5,"%d", (int)current_height);
 8001c3a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001c3e:	f7fe ff49 	bl	8000ad4 <__aeabi_d2iz>
 8001c42:	4603      	mov	r3, r0
 8001c44:	f107 0010 	add.w	r0, r7, #16
 8001c48:	4a11      	ldr	r2, [pc, #68]	; (8001c90 <main+0x4a8>)
 8001c4a:	2105      	movs	r1, #5
 8001c4c:	f003 fec0 	bl	80059d0 <sniprintf>
	  LCD_Clear(70,60,50,40,0xFFFF);
 8001c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c54:	9300      	str	r3, [sp, #0]
 8001c56:	2328      	movs	r3, #40	; 0x28
 8001c58:	2232      	movs	r2, #50	; 0x32
 8001c5a:	213c      	movs	r1, #60	; 0x3c
 8001c5c:	2046      	movs	r0, #70	; 0x46
 8001c5e:	f7ff f98c 	bl	8000f7a <LCD_Clear>
	  LCD_DrawString(70, 60, str6);
 8001c62:	f107 031c 	add.w	r3, r7, #28
 8001c66:	461a      	mov	r2, r3
 8001c68:	213c      	movs	r1, #60	; 0x3c
 8001c6a:	2046      	movs	r0, #70	; 0x46
 8001c6c:	f7ff f9ee 	bl	800104c <LCD_DrawString>
	  LCD_DrawString(70, 80, str7);
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	461a      	mov	r2, r3
 8001c76:	2150      	movs	r1, #80	; 0x50
 8001c78:	2046      	movs	r0, #70	; 0x46
 8001c7a:	f7ff f9e7 	bl	800104c <LCD_DrawString>

//	  if(counter == 0){
//		  LCD_DisplayNum(temp_d);
//		  counter = counter_size;
//	  }
	  counter--;
 8001c7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001c80:	3b01      	subs	r3, #1
 8001c82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c84:	e643      	b.n	800190e <main+0x126>
		  continue;
 8001c86:	bf00      	nop
  {
 8001c88:	e641      	b.n	800190e <main+0x126>
 8001c8a:	bf00      	nop
 8001c8c:	200000e8 	.word	0x200000e8
 8001c90:	08006304 	.word	0x08006304

08001c94 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b090      	sub	sp, #64	; 0x40
 8001c98:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c9a:	f107 0318 	add.w	r3, r7, #24
 8001c9e:	2228      	movs	r2, #40	; 0x28
 8001ca0:	2100      	movs	r1, #0
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f003 fe8c 	bl	80059c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001cba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cbe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001cc4:	2301      	movs	r3, #1
 8001cc6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ccc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001cd0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001cd2:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cd8:	f107 0318 	add.w	r3, r7, #24
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f002 fab5 	bl	800424c <HAL_RCC_OscConfig>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001ce8:	f000 fa20 	bl	800212c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cec:	230f      	movs	r3, #15
 8001cee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cf8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001d02:	1d3b      	adds	r3, r7, #4
 8001d04:	2102      	movs	r1, #2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f002 fd22 	bl	8004750 <HAL_RCC_ClockConfig>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d001      	beq.n	8001d16 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001d12:	f000 fa0b 	bl	800212c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 8001d16:	2200      	movs	r2, #0
 8001d18:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f002 fe01 	bl	8004924 <HAL_RCC_MCOConfig>
}
 8001d22:	bf00      	nop
 8001d24:	3740      	adds	r7, #64	; 0x40
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <MX_I2C2_Init+0x50>)
 8001d32:	4a13      	ldr	r2, [pc, #76]	; (8001d80 <MX_I2C2_Init+0x54>)
 8001d34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001d36:	4b11      	ldr	r3, [pc, #68]	; (8001d7c <MX_I2C2_Init+0x50>)
 8001d38:	4a12      	ldr	r2, [pc, #72]	; (8001d84 <MX_I2C2_Init+0x58>)
 8001d3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <MX_I2C2_Init+0x50>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001d42:	4b0e      	ldr	r3, [pc, #56]	; (8001d7c <MX_I2C2_Init+0x50>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <MX_I2C2_Init+0x50>)
 8001d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d50:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <MX_I2C2_Init+0x50>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <MX_I2C2_Init+0x50>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d5c:	4b07      	ldr	r3, [pc, #28]	; (8001d7c <MX_I2C2_Init+0x50>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d62:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <MX_I2C2_Init+0x50>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001d68:	4804      	ldr	r0, [pc, #16]	; (8001d7c <MX_I2C2_Init+0x50>)
 8001d6a:	f001 fa6f 	bl	800324c <HAL_I2C_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001d74:	f000 f9da 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001d78:	bf00      	nop
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	200000e8 	.word	0x200000e8
 8001d80:	40005800 	.word	0x40005800
 8001d84:	000186a0 	.word	0x000186a0

08001d88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b08e      	sub	sp, #56	; 0x38
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d92:	2200      	movs	r2, #0
 8001d94:	601a      	str	r2, [r3, #0]
 8001d96:	605a      	str	r2, [r3, #4]
 8001d98:	609a      	str	r2, [r3, #8]
 8001d9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d9c:	f107 0320 	add.w	r3, r7, #32
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001da6:	1d3b      	adds	r3, r7, #4
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
 8001db4:	615a      	str	r2, [r3, #20]
 8001db6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001db8:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dba:	4a33      	ldr	r2, [pc, #204]	; (8001e88 <MX_TIM3_Init+0x100>)
 8001dbc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dc0:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001dc4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc6:	4b2f      	ldr	r3, [pc, #188]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dce:	2231      	movs	r2, #49	; 0x31
 8001dd0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd2:	4b2c      	ldr	r3, [pc, #176]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dde:	4829      	ldr	r0, [pc, #164]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001de0:	f002 febf 	bl	8004b62 <HAL_TIM_Base_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001dea:	f000 f99f 	bl	800212c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001df4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4822      	ldr	r0, [pc, #136]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001dfc:	f003 f8d0 	bl	8004fa0 <HAL_TIM_ConfigClockSource>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001e06:	f000 f991 	bl	800212c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001e0a:	481e      	ldr	r0, [pc, #120]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001e0c:	f002 fef8 	bl	8004c00 <HAL_TIM_PWM_Init>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001e16:	f000 f989 	bl	800212c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001e1e:	2380      	movs	r3, #128	; 0x80
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e22:	f107 0320 	add.w	r3, r7, #32
 8001e26:	4619      	mov	r1, r3
 8001e28:	4816      	ldr	r0, [pc, #88]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001e2a:	f003 fc5d 	bl	80056e8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001e34:	f000 f97a 	bl	800212c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e38:	2360      	movs	r3, #96	; 0x60
 8001e3a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e44:	2300      	movs	r3, #0
 8001e46:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	480d      	ldr	r0, [pc, #52]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001e50:	f002 ffe8 	bl	8004e24 <HAL_TIM_PWM_ConfigChannel>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001e5a:	f000 f967 	bl	800212c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e5e:	1d3b      	adds	r3, r7, #4
 8001e60:	2204      	movs	r2, #4
 8001e62:	4619      	mov	r1, r3
 8001e64:	4807      	ldr	r0, [pc, #28]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001e66:	f002 ffdd 	bl	8004e24 <HAL_TIM_PWM_ConfigChannel>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001e70:	f000 f95c 	bl	800212c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001e74:	4803      	ldr	r0, [pc, #12]	; (8001e84 <MX_TIM3_Init+0xfc>)
 8001e76:	f000 f9f1 	bl	800225c <HAL_TIM_MspPostInit>

}
 8001e7a:	bf00      	nop
 8001e7c:	3738      	adds	r7, #56	; 0x38
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	2000013c 	.word	0x2000013c
 8001e88:	40000400 	.word	0x40000400

08001e8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b08a      	sub	sp, #40	; 0x28
 8001e90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e92:	f107 0318 	add.w	r3, r7, #24
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	605a      	str	r2, [r3, #4]
 8001e9c:	609a      	str	r2, [r3, #8]
 8001e9e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ea0:	4b68      	ldr	r3, [pc, #416]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	4a67      	ldr	r2, [pc, #412]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001ea6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001eaa:	6193      	str	r3, [r2, #24]
 8001eac:	4b65      	ldr	r3, [pc, #404]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001eb4:	617b      	str	r3, [r7, #20]
 8001eb6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eb8:	4b62      	ldr	r3, [pc, #392]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	4a61      	ldr	r2, [pc, #388]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001ebe:	f043 0310 	orr.w	r3, r3, #16
 8001ec2:	6193      	str	r3, [r2, #24]
 8001ec4:	4b5f      	ldr	r3, [pc, #380]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0310 	and.w	r3, r3, #16
 8001ecc:	613b      	str	r3, [r7, #16]
 8001ece:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed0:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	4a5b      	ldr	r2, [pc, #364]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001ed6:	f043 0304 	orr.w	r3, r3, #4
 8001eda:	6193      	str	r3, [r2, #24]
 8001edc:	4b59      	ldr	r3, [pc, #356]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	4b56      	ldr	r3, [pc, #344]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001eea:	699b      	ldr	r3, [r3, #24]
 8001eec:	4a55      	ldr	r2, [pc, #340]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001eee:	f043 0308 	orr.w	r3, r3, #8
 8001ef2:	6193      	str	r3, [r2, #24]
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f00:	4b50      	ldr	r3, [pc, #320]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a4f      	ldr	r2, [pc, #316]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001f06:	f043 0320 	orr.w	r3, r3, #32
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b4d      	ldr	r3, [pc, #308]	; (8002044 <MX_GPIO_Init+0x1b8>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0320 	and.w	r3, r3, #32
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_TP_Pin|dir1_Pin|dir2_Pin|LCD_TPE0_Pin
 8001f18:	2200      	movs	r2, #0
 8001f1a:	2167      	movs	r1, #103	; 0x67
 8001f1c:	484a      	ldr	r0, [pc, #296]	; (8002048 <MX_GPIO_Init+0x1bc>)
 8001f1e:	f001 f95a 	bl	80031d6 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, onboard_led_Pin|onboard_ledB1_Pin|onboard_ledB5_Pin, GPIO_PIN_SET);
 8001f22:	2201      	movs	r2, #1
 8001f24:	2123      	movs	r1, #35	; 0x23
 8001f26:	4849      	ldr	r0, [pc, #292]	; (800204c <MX_GPIO_Init+0x1c0>)
 8001f28:	f001 f955 	bl	80031d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|LCD_TPD13_Pin, GPIO_PIN_RESET);
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001f32:	4847      	ldr	r0, [pc, #284]	; (8002050 <MX_GPIO_Init+0x1c4>)
 8001f34:	f001 f94f 	bl	80031d6 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_TP_Pin dir1_Pin dir2_Pin LCD_TPE0_Pin
                           LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_TP_Pin|dir1_Pin|dir2_Pin|LCD_TPE0_Pin
 8001f38:	2367      	movs	r3, #103	; 0x67
 8001f3a:	61bb      	str	r3, [r7, #24]
                          |LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	2300      	movs	r3, #0
 8001f42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f44:	2303      	movs	r3, #3
 8001f46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f48:	f107 0318 	add.w	r3, r7, #24
 8001f4c:	4619      	mov	r1, r3
 8001f4e:	483e      	ldr	r0, [pc, #248]	; (8002048 <MX_GPIO_Init+0x1bc>)
 8001f50:	f000 ff96 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TPE3_Pin */
  GPIO_InitStruct.Pin = LCD_TPE3_Pin;
 8001f54:	2308      	movs	r3, #8
 8001f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_TPE3_GPIO_Port, &GPIO_InitStruct);
 8001f60:	f107 0318 	add.w	r3, r7, #24
 8001f64:	4619      	mov	r1, r3
 8001f66:	4838      	ldr	r0, [pc, #224]	; (8002048 <MX_GPIO_Init+0x1bc>)
 8001f68:	f000 ff8a 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TP_EXT14_Pin */
  GPIO_InitStruct.Pin = LCD_TP_EXT14_Pin;
 8001f6c:	2310      	movs	r3, #16
 8001f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001f70:	4b38      	ldr	r3, [pc, #224]	; (8002054 <MX_GPIO_Init+0x1c8>)
 8001f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f74:	2301      	movs	r3, #1
 8001f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_TP_EXT14_GPIO_Port, &GPIO_InitStruct);
 8001f78:	f107 0318 	add.w	r3, r7, #24
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4832      	ldr	r0, [pc, #200]	; (8002048 <MX_GPIO_Init+0x1bc>)
 8001f80:	f000 ff7e 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : key2_Pin */
  GPIO_InitStruct.Pin = key2_Pin;
 8001f84:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f8a:	4b33      	ldr	r3, [pc, #204]	; (8002058 <MX_GPIO_Init+0x1cc>)
 8001f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key2_GPIO_Port, &GPIO_InitStruct);
 8001f92:	f107 0318 	add.w	r3, r7, #24
 8001f96:	4619      	mov	r1, r3
 8001f98:	4830      	ldr	r0, [pc, #192]	; (800205c <MX_GPIO_Init+0x1d0>)
 8001f9a:	f000 ff71 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : key1_Pin */
  GPIO_InitStruct.Pin = key1_Pin;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001fa2:	4b2d      	ldr	r3, [pc, #180]	; (8002058 <MX_GPIO_Init+0x1cc>)
 8001fa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key1_GPIO_Port, &GPIO_InitStruct);
 8001faa:	f107 0318 	add.w	r3, r7, #24
 8001fae:	4619      	mov	r1, r3
 8001fb0:	482b      	ldr	r0, [pc, #172]	; (8002060 <MX_GPIO_Init+0x1d4>)
 8001fb2:	f000 ff65 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : onboard_led_Pin onboard_ledB1_Pin onboard_ledB5_Pin */
  GPIO_InitStruct.Pin = onboard_led_Pin|onboard_ledB1_Pin|onboard_ledB5_Pin;
 8001fb6:	2323      	movs	r3, #35	; 0x23
 8001fb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fc6:	f107 0318 	add.w	r3, r7, #24
 8001fca:	4619      	mov	r1, r3
 8001fcc:	481f      	ldr	r0, [pc, #124]	; (800204c <MX_GPIO_Init+0x1c0>)
 8001fce:	f000 ff57 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_TPD13_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_TPD13_Pin;
 8001fd2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001fd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001fe4:	f107 0318 	add.w	r3, r7, #24
 8001fe8:	4619      	mov	r1, r3
 8001fea:	4819      	ldr	r0, [pc, #100]	; (8002050 <MX_GPIO_Init+0x1c4>)
 8001fec:	f000 ff48 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ff0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ff4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ffe:	f107 0318 	add.w	r3, r7, #24
 8002002:	4619      	mov	r1, r3
 8002004:	4816      	ldr	r0, [pc, #88]	; (8002060 <MX_GPIO_Init+0x1d4>)
 8002006:	f000 ff3b 	bl	8002e80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800200a:	2200      	movs	r2, #0
 800200c:	2100      	movs	r1, #0
 800200e:	2006      	movs	r0, #6
 8002010:	f000 feff 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002014:	2006      	movs	r0, #6
 8002016:	f000 ff18 	bl	8002e4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800201a:	2200      	movs	r2, #0
 800201c:	2100      	movs	r1, #0
 800201e:	200a      	movs	r0, #10
 8002020:	f000 fef7 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002024:	200a      	movs	r0, #10
 8002026:	f000 ff10 	bl	8002e4a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800202a:	2200      	movs	r2, #0
 800202c:	2100      	movs	r1, #0
 800202e:	2028      	movs	r0, #40	; 0x28
 8002030:	f000 feef 	bl	8002e12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002034:	2028      	movs	r0, #40	; 0x28
 8002036:	f000 ff08 	bl	8002e4a <HAL_NVIC_EnableIRQ>

}
 800203a:	bf00      	nop
 800203c:	3728      	adds	r7, #40	; 0x28
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40021000 	.word	0x40021000
 8002048:	40011800 	.word	0x40011800
 800204c:	40010c00 	.word	0x40010c00
 8002050:	40011400 	.word	0x40011400
 8002054:	10210000 	.word	0x10210000
 8002058:	10110000 	.word	0x10110000
 800205c:	40011000 	.word	0x40011000
 8002060:	40010800 	.word	0x40010800

08002064 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b088      	sub	sp, #32
 8002068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800206a:	1d3b      	adds	r3, r7, #4
 800206c:	2200      	movs	r2, #0
 800206e:	601a      	str	r2, [r3, #0]
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	609a      	str	r2, [r3, #8]
 8002074:	60da      	str	r2, [r3, #12]
 8002076:	611a      	str	r2, [r3, #16]
 8002078:	615a      	str	r2, [r3, #20]
 800207a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 800207c:	4b28      	ldr	r3, [pc, #160]	; (8002120 <MX_FSMC_Init+0xbc>)
 800207e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002082:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002084:	4b26      	ldr	r3, [pc, #152]	; (8002120 <MX_FSMC_Init+0xbc>)
 8002086:	4a27      	ldr	r2, [pc, #156]	; (8002124 <MX_FSMC_Init+0xc0>)
 8002088:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800208a:	4b25      	ldr	r3, [pc, #148]	; (8002120 <MX_FSMC_Init+0xbc>)
 800208c:	2200      	movs	r2, #0
 800208e:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002090:	4b23      	ldr	r3, [pc, #140]	; (8002120 <MX_FSMC_Init+0xbc>)
 8002092:	2200      	movs	r2, #0
 8002094:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <MX_FSMC_Init+0xbc>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 800209c:	4b20      	ldr	r3, [pc, #128]	; (8002120 <MX_FSMC_Init+0xbc>)
 800209e:	2210      	movs	r2, #16
 80020a0:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80020a2:	4b1f      	ldr	r3, [pc, #124]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80020a8:	4b1d      	ldr	r3, [pc, #116]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80020ae:	4b1c      	ldr	r3, [pc, #112]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020c0:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80020c8:	4b15      	ldr	r3, [pc, #84]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80020ce:	4b14      	ldr	r3, [pc, #80]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80020da:	230f      	movs	r3, #15
 80020dc:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80020de:	230f      	movs	r3, #15
 80020e0:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80020e2:	23ff      	movs	r3, #255	; 0xff
 80020e4:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80020e6:	230f      	movs	r3, #15
 80020e8:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80020ea:	2310      	movs	r3, #16
 80020ec:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80020ee:	2311      	movs	r3, #17
 80020f0:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	2200      	movs	r2, #0
 80020fa:	4619      	mov	r1, r3
 80020fc:	4808      	ldr	r0, [pc, #32]	; (8002120 <MX_FSMC_Init+0xbc>)
 80020fe:	f002 fce3 	bl	8004ac8 <HAL_SRAM_Init>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002108:	f000 f810 	bl	800212c <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <MX_FSMC_Init+0xc4>)
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	4a05      	ldr	r2, [pc, #20]	; (8002128 <MX_FSMC_Init+0xc4>)
 8002112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002116:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002118:	bf00      	nop
 800211a:	3720      	adds	r7, #32
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000184 	.word	0x20000184
 8002124:	a0000104 	.word	0xa0000104
 8002128:	40010000 	.word	0x40010000

0800212c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002130:	b672      	cpsid	i
}
 8002132:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  /* USER CODE END Error_Handler_Debug */
}
 8002134:	bf00      	nop
 8002136:	46bd      	mov	sp, r7
 8002138:	bc80      	pop	{r7}
 800213a:	4770      	bx	lr

0800213c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800213c:	b480      	push	{r7}
 800213e:	b085      	sub	sp, #20
 8002140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_MspInit+0x5c>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	4a14      	ldr	r2, [pc, #80]	; (8002198 <HAL_MspInit+0x5c>)
 8002148:	f043 0301 	orr.w	r3, r3, #1
 800214c:	6193      	str	r3, [r2, #24]
 800214e:	4b12      	ldr	r3, [pc, #72]	; (8002198 <HAL_MspInit+0x5c>)
 8002150:	699b      	ldr	r3, [r3, #24]
 8002152:	f003 0301 	and.w	r3, r3, #1
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800215a:	4b0f      	ldr	r3, [pc, #60]	; (8002198 <HAL_MspInit+0x5c>)
 800215c:	69db      	ldr	r3, [r3, #28]
 800215e:	4a0e      	ldr	r2, [pc, #56]	; (8002198 <HAL_MspInit+0x5c>)
 8002160:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002164:	61d3      	str	r3, [r2, #28]
 8002166:	4b0c      	ldr	r3, [pc, #48]	; (8002198 <HAL_MspInit+0x5c>)
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_MspInit+0x60>)
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800217e:	60fb      	str	r3, [r7, #12]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	4a04      	ldr	r2, [pc, #16]	; (800219c <HAL_MspInit+0x60>)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800218e:	bf00      	nop
 8002190:	3714      	adds	r7, #20
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	40021000 	.word	0x40021000
 800219c:	40010000 	.word	0x40010000

080021a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0310 	add.w	r3, r7, #16
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a16      	ldr	r2, [pc, #88]	; (8002214 <HAL_I2C_MspInit+0x74>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d124      	bne.n	800220a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c0:	4b15      	ldr	r3, [pc, #84]	; (8002218 <HAL_I2C_MspInit+0x78>)
 80021c2:	699b      	ldr	r3, [r3, #24]
 80021c4:	4a14      	ldr	r2, [pc, #80]	; (8002218 <HAL_I2C_MspInit+0x78>)
 80021c6:	f043 0308 	orr.w	r3, r3, #8
 80021ca:	6193      	str	r3, [r2, #24]
 80021cc:	4b12      	ldr	r3, [pc, #72]	; (8002218 <HAL_I2C_MspInit+0x78>)
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	f003 0308 	and.w	r3, r3, #8
 80021d4:	60fb      	str	r3, [r7, #12]
 80021d6:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80021d8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80021dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021de:	2312      	movs	r3, #18
 80021e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021e2:	2303      	movs	r3, #3
 80021e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4619      	mov	r1, r3
 80021ec:	480b      	ldr	r0, [pc, #44]	; (800221c <HAL_I2C_MspInit+0x7c>)
 80021ee:	f000 fe47 	bl	8002e80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021f2:	4b09      	ldr	r3, [pc, #36]	; (8002218 <HAL_I2C_MspInit+0x78>)
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	4a08      	ldr	r2, [pc, #32]	; (8002218 <HAL_I2C_MspInit+0x78>)
 80021f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80021fc:	61d3      	str	r3, [r2, #28]
 80021fe:	4b06      	ldr	r3, [pc, #24]	; (8002218 <HAL_I2C_MspInit+0x78>)
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002206:	60bb      	str	r3, [r7, #8]
 8002208:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800220a:	bf00      	nop
 800220c:	3720      	adds	r7, #32
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	40005800 	.word	0x40005800
 8002218:	40021000 	.word	0x40021000
 800221c:	40010c00 	.word	0x40010c00

08002220 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002220:	b480      	push	{r7}
 8002222:	b085      	sub	sp, #20
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a09      	ldr	r2, [pc, #36]	; (8002254 <HAL_TIM_Base_MspInit+0x34>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d10b      	bne.n	800224a <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_TIM_Base_MspInit+0x38>)
 8002234:	69db      	ldr	r3, [r3, #28]
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <HAL_TIM_Base_MspInit+0x38>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	61d3      	str	r3, [r2, #28]
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_TIM_Base_MspInit+0x38>)
 8002240:	69db      	ldr	r3, [r3, #28]
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	bc80      	pop	{r7}
 8002252:	4770      	bx	lr
 8002254:	40000400 	.word	0x40000400
 8002258:	40021000 	.word	0x40021000

0800225c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b088      	sub	sp, #32
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002264:	f107 0310 	add.w	r3, r7, #16
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
 800226c:	605a      	str	r2, [r3, #4]
 800226e:	609a      	str	r2, [r3, #8]
 8002270:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a0f      	ldr	r2, [pc, #60]	; (80022b4 <HAL_TIM_MspPostInit+0x58>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d117      	bne.n	80022ac <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800227c:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_TIM_MspPostInit+0x5c>)
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	4a0d      	ldr	r2, [pc, #52]	; (80022b8 <HAL_TIM_MspPostInit+0x5c>)
 8002282:	f043 0304 	orr.w	r3, r3, #4
 8002286:	6193      	str	r3, [r2, #24]
 8002288:	4b0b      	ldr	r3, [pc, #44]	; (80022b8 <HAL_TIM_MspPostInit+0x5c>)
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	f003 0304 	and.w	r3, r3, #4
 8002290:	60fb      	str	r3, [r7, #12]
 8002292:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = step1_Pin|step2_Pin;
 8002294:	23c0      	movs	r3, #192	; 0xc0
 8002296:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002298:	2302      	movs	r3, #2
 800229a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800229c:	2303      	movs	r3, #3
 800229e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 0310 	add.w	r3, r7, #16
 80022a4:	4619      	mov	r1, r3
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <HAL_TIM_MspPostInit+0x60>)
 80022a8:	f000 fdea 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80022ac:	bf00      	nop
 80022ae:	3720      	adds	r7, #32
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40000400 	.word	0x40000400
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010800 	.word	0x40010800

080022c0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b086      	sub	sp, #24
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80022c6:	f107 0308 	add.w	r3, r7, #8
 80022ca:	2200      	movs	r2, #0
 80022cc:	601a      	str	r2, [r3, #0]
 80022ce:	605a      	str	r2, [r3, #4]
 80022d0:	609a      	str	r2, [r3, #8]
 80022d2:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 80022d4:	4b18      	ldr	r3, [pc, #96]	; (8002338 <HAL_FSMC_MspInit+0x78>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d129      	bne.n	8002330 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <HAL_FSMC_MspInit+0x78>)
 80022de:	2201      	movs	r2, #1
 80022e0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80022e2:	4b16      	ldr	r3, [pc, #88]	; (800233c <HAL_FSMC_MspInit+0x7c>)
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4a15      	ldr	r2, [pc, #84]	; (800233c <HAL_FSMC_MspInit+0x7c>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ec:	6153      	str	r3, [r2, #20]
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <HAL_FSMC_MspInit+0x7c>)
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80022fa:	f64f 7380 	movw	r3, #65408	; 0xff80
 80022fe:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002300:	2302      	movs	r3, #2
 8002302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002304:	2303      	movs	r3, #3
 8002306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002308:	f107 0308 	add.w	r3, r7, #8
 800230c:	4619      	mov	r1, r3
 800230e:	480c      	ldr	r0, [pc, #48]	; (8002340 <HAL_FSMC_MspInit+0x80>)
 8002310:	f000 fdb6 	bl	8002e80 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002314:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002318:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800231a:	2302      	movs	r3, #2
 800231c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002322:	f107 0308 	add.w	r3, r7, #8
 8002326:	4619      	mov	r1, r3
 8002328:	4806      	ldr	r0, [pc, #24]	; (8002344 <HAL_FSMC_MspInit+0x84>)
 800232a:	f000 fda9 	bl	8002e80 <HAL_GPIO_Init>
 800232e:	e000      	b.n	8002332 <HAL_FSMC_MspInit+0x72>
    return;
 8002330:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002332:	3718      	adds	r7, #24
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}
 8002338:	200001cc 	.word	0x200001cc
 800233c:	40021000 	.word	0x40021000
 8002340:	40011800 	.word	0x40011800
 8002344:	40011400 	.word	0x40011400

08002348 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002350:	f7ff ffb6 	bl	80022c0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002354:	bf00      	nop
 8002356:	3708      	adds	r7, #8
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}

0800235c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002360:	e7fe      	b.n	8002360 <NMI_Handler+0x4>

08002362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002366:	e7fe      	b.n	8002366 <HardFault_Handler+0x4>

08002368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800236c:	e7fe      	b.n	800236c <MemManage_Handler+0x4>

0800236e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800236e:	b480      	push	{r7}
 8002370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002372:	e7fe      	b.n	8002372 <BusFault_Handler+0x4>

08002374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002378:	e7fe      	b.n	8002378 <UsageFault_Handler+0x4>

0800237a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800237a:	b480      	push	{r7}
 800237c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800237e:	bf00      	nop
 8002380:	46bd      	mov	sp, r7
 8002382:	bc80      	pop	{r7}
 8002384:	4770      	bx	lr

08002386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002386:	b480      	push	{r7}
 8002388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800238a:	bf00      	nop
 800238c:	46bd      	mov	sp, r7
 800238e:	bc80      	pop	{r7}
 8002390:	4770      	bx	lr

08002392 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002392:	b480      	push	{r7}
 8002394:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	46bd      	mov	sp, r7
 800239a:	bc80      	pop	{r7}
 800239c:	4770      	bx	lr

0800239e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800239e:	b580      	push	{r7, lr}
 80023a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80023a2:	f000 fc1f 	bl	8002be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 80023b0:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <EXTI0_IRQHandler+0x2c>)
 80023b2:	695b      	ldr	r3, [r3, #20]
 80023b4:	f003 0301 	and.w	r3, r3, #1
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d007      	beq.n	80023cc <EXTI0_IRQHandler+0x20>
	{
		stepper_up();
 80023bc:	f7ff f9ea 	bl	8001794 <stepper_up>

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <EXTI0_IRQHandler+0x2c>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 80023c6:	2001      	movs	r0, #1
 80023c8:	f000 ff36 	bl	8003238 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(key1_Pin);
 80023cc:	2001      	movs	r0, #1
 80023ce:	f000 ff1b 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80023d2:	bf00      	nop
 80023d4:	bd80      	pop	{r7, pc}
 80023d6:	bf00      	nop
 80023d8:	40010400 	.word	0x40010400

080023dc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 80023e0:	4b08      	ldr	r3, [pc, #32]	; (8002404 <EXTI4_IRQHandler+0x28>)
 80023e2:	695b      	ldr	r3, [r3, #20]
 80023e4:	f003 0310 	and.w	r3, r3, #16
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d005      	beq.n	80023f8 <EXTI4_IRQHandler+0x1c>
	  {
//			  ucXPT2046_TouchFlag = 1;
//			  Check_touchkey();

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 80023ec:	4b05      	ldr	r3, [pc, #20]	; (8002404 <EXTI4_IRQHandler+0x28>)
 80023ee:	2210      	movs	r2, #16
 80023f0:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 80023f2:	2010      	movs	r0, #16
 80023f4:	f000 ff20 	bl	8003238 <HAL_GPIO_EXTI_Callback>
	  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_TP_EXT14_Pin);
 80023f8:	2010      	movs	r0, #16
 80023fa:	f000 ff05 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40010400 	.word	0x40010400

08002408 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 800240c:	4b09      	ldr	r3, [pc, #36]	; (8002434 <EXTI15_10_IRQHandler+0x2c>)
 800240e:	695b      	ldr	r3, [r3, #20]
 8002410:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002414:	2b00      	cmp	r3, #0
 8002416:	d007      	beq.n	8002428 <EXTI15_10_IRQHandler+0x20>
	{
		stepper_stop();
 8002418:	f7ff f9d6 	bl	80017c8 <stepper_stop>

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 800241c:	4b05      	ldr	r3, [pc, #20]	; (8002434 <EXTI15_10_IRQHandler+0x2c>)
 800241e:	2201      	movs	r2, #1
 8002420:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8002422:	2001      	movs	r0, #1
 8002424:	f000 ff08 	bl	8003238 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(key2_Pin);
 8002428:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800242c:	f000 feec 	bl	8003208 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	40010400 	.word	0x40010400

08002438 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b086      	sub	sp, #24
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002440:	4a14      	ldr	r2, [pc, #80]	; (8002494 <_sbrk+0x5c>)
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <_sbrk+0x60>)
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800244c:	4b13      	ldr	r3, [pc, #76]	; (800249c <_sbrk+0x64>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d102      	bne.n	800245a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <_sbrk+0x64>)
 8002456:	4a12      	ldr	r2, [pc, #72]	; (80024a0 <_sbrk+0x68>)
 8002458:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800245a:	4b10      	ldr	r3, [pc, #64]	; (800249c <_sbrk+0x64>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4413      	add	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	429a      	cmp	r2, r3
 8002466:	d207      	bcs.n	8002478 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002468:	f003 fa80 	bl	800596c <__errno>
 800246c:	4603      	mov	r3, r0
 800246e:	220c      	movs	r2, #12
 8002470:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002472:	f04f 33ff 	mov.w	r3, #4294967295
 8002476:	e009      	b.n	800248c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002478:	4b08      	ldr	r3, [pc, #32]	; (800249c <_sbrk+0x64>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800247e:	4b07      	ldr	r3, [pc, #28]	; (800249c <_sbrk+0x64>)
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	4413      	add	r3, r2
 8002486:	4a05      	ldr	r2, [pc, #20]	; (800249c <_sbrk+0x64>)
 8002488:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800248a:	68fb      	ldr	r3, [r7, #12]
}
 800248c:	4618      	mov	r0, r3
 800248e:	3718      	adds	r7, #24
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	20010000 	.word	0x20010000
 8002498:	00000400 	.word	0x00000400
 800249c:	200001d0 	.word	0x200001d0
 80024a0:	200001f0 	.word	0x200001f0

080024a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr

080024b0 <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 80024b0:	b480      	push	{r7}
 80024b2:	b085      	sub	sp, #20
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 80024b8:	2300      	movs	r3, #0
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	e00a      	b.n	80024d4 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 80024be:	230c      	movs	r3, #12
 80024c0:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 80024c2:	bf00      	nop
 80024c4:	7afb      	ldrb	r3, [r7, #11]
 80024c6:	1e5a      	subs	r2, r3, #1
 80024c8:	72fa      	strb	r2, [r7, #11]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d1fa      	bne.n	80024c4 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	3301      	adds	r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	68fa      	ldr	r2, [r7, #12]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3f0      	bcc.n	80024be <XPT2046_DelayUS+0xe>

	}
	
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3714      	adds	r7, #20
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 80024f2:	2200      	movs	r2, #0
 80024f4:	2104      	movs	r1, #4
 80024f6:	481d      	ldr	r0, [pc, #116]	; (800256c <XPT2046_WriteCMD+0x84>)
 80024f8:	f000 fe6d 	bl	80031d6 <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 80024fc:	2200      	movs	r2, #0
 80024fe:	2101      	movs	r1, #1
 8002500:	481a      	ldr	r0, [pc, #104]	; (800256c <XPT2046_WriteCMD+0x84>)
 8002502:	f000 fe68 	bl	80031d6 <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
 800250a:	e027      	b.n	800255c <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 800250c:	79fa      	ldrb	r2, [r7, #7]
 800250e:	7bfb      	ldrb	r3, [r7, #15]
 8002510:	f1c3 0307 	rsb	r3, r3, #7
 8002514:	fa42 f303 	asr.w	r3, r2, r3
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <XPT2046_WriteCMD+0x44>
 8002520:	2201      	movs	r2, #1
 8002522:	2104      	movs	r1, #4
 8002524:	4811      	ldr	r0, [pc, #68]	; (800256c <XPT2046_WriteCMD+0x84>)
 8002526:	f000 fe56 	bl	80031d6 <HAL_GPIO_WritePin>
 800252a:	e004      	b.n	8002536 <XPT2046_WriteCMD+0x4e>
 800252c:	2200      	movs	r2, #0
 800252e:	2104      	movs	r1, #4
 8002530:	480e      	ldr	r0, [pc, #56]	; (800256c <XPT2046_WriteCMD+0x84>)
 8002532:	f000 fe50 	bl	80031d6 <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 8002536:	2005      	movs	r0, #5
 8002538:	f7ff ffba 	bl	80024b0 <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 800253c:	2201      	movs	r2, #1
 800253e:	2101      	movs	r1, #1
 8002540:	480a      	ldr	r0, [pc, #40]	; (800256c <XPT2046_WriteCMD+0x84>)
 8002542:	f000 fe48 	bl	80031d6 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 8002546:	2005      	movs	r0, #5
 8002548:	f7ff ffb2 	bl	80024b0 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 800254c:	2200      	movs	r2, #0
 800254e:	2101      	movs	r1, #1
 8002550:	4806      	ldr	r0, [pc, #24]	; (800256c <XPT2046_WriteCMD+0x84>)
 8002552:	f000 fe40 	bl	80031d6 <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	3301      	adds	r3, #1
 800255a:	73fb      	strb	r3, [r7, #15]
 800255c:	7bfb      	ldrb	r3, [r7, #15]
 800255e:	2b07      	cmp	r3, #7
 8002560:	d9d4      	bls.n	800250c <XPT2046_WriteCMD+0x24>
	}
	
}
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	40011800 	.word	0x40011800

08002570 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 8002576:	2300      	movs	r3, #0
 8002578:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 800257a:	2200      	movs	r2, #0
 800257c:	2104      	movs	r1, #4
 800257e:	4819      	ldr	r0, [pc, #100]	; (80025e4 <XPT2046_ReadCMD+0x74>)
 8002580:	f000 fe29 	bl	80031d6 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 8002584:	2201      	movs	r2, #1
 8002586:	2101      	movs	r1, #1
 8002588:	4816      	ldr	r0, [pc, #88]	; (80025e4 <XPT2046_ReadCMD+0x74>)
 800258a:	f000 fe24 	bl	80031d6 <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 800258e:	2300      	movs	r3, #0
 8002590:	71fb      	strb	r3, [r7, #7]
 8002592:	e01e      	b.n	80025d2 <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 8002594:	2200      	movs	r2, #0
 8002596:	2101      	movs	r1, #1
 8002598:	4812      	ldr	r0, [pc, #72]	; (80025e4 <XPT2046_ReadCMD+0x74>)
 800259a:	f000 fe1c 	bl	80031d6 <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 800259e:	2108      	movs	r1, #8
 80025a0:	4810      	ldr	r0, [pc, #64]	; (80025e4 <XPT2046_ReadCMD+0x74>)
 80025a2:	f000 fe01 	bl	80031a8 <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 80025aa:	887a      	ldrh	r2, [r7, #2]
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	f1c3 030b 	rsb	r3, r3, #11
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	b21a      	sxth	r2, r3
 80025b8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80025bc:	4313      	orrs	r3, r2
 80025be:	b21b      	sxth	r3, r3
 80025c0:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 80025c2:	2201      	movs	r2, #1
 80025c4:	2101      	movs	r1, #1
 80025c6:	4807      	ldr	r0, [pc, #28]	; (80025e4 <XPT2046_ReadCMD+0x74>)
 80025c8:	f000 fe05 	bl	80031d6 <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	3301      	adds	r3, #1
 80025d0:	71fb      	strb	r3, [r7, #7]
 80025d2:	79fb      	ldrb	r3, [r7, #7]
 80025d4:	2b0b      	cmp	r3, #11
 80025d6:	d9dd      	bls.n	8002594 <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 80025d8:	88bb      	ldrh	r3, [r7, #4]

}
 80025da:	4618      	mov	r0, r3
 80025dc:	3708      	adds	r7, #8
 80025de:	46bd      	mov	sp, r7
 80025e0:	bd80      	pop	{r7, pc}
 80025e2:	bf00      	nop
 80025e4:	40011800 	.word	0x40011800

080025e8 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b082      	sub	sp, #8
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	4603      	mov	r3, r0
 80025f0:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 80025f2:	79fb      	ldrb	r3, [r7, #7]
 80025f4:	4618      	mov	r0, r3
 80025f6:	f7ff ff77 	bl	80024e8 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 80025fa:	f7ff ffb9 	bl	8002570 <XPT2046_ReadCMD>
 80025fe:	4603      	mov	r3, r0
	
}
 8002600:	4618      	mov	r0, r3
 8002602:	3708      	adds	r7, #8
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}

08002608 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 8002612:	2090      	movs	r0, #144	; 0x90
 8002614:	f7ff ffe8 	bl	80025e8 <XPT2046_ReadAdc>
 8002618:	4603      	mov	r3, r0
 800261a:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 800261c:	2001      	movs	r0, #1
 800261e:	f7ff ff47 	bl	80024b0 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 8002622:	20d0      	movs	r0, #208	; 0xd0
 8002624:	f7ff ffe0 	bl	80025e8 <XPT2046_ReadAdc>
 8002628:	4603      	mov	r3, r0
 800262a:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	89fa      	ldrh	r2, [r7, #14]
 8002630:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	89ba      	ldrh	r2, [r7, #12]
 8002636:	801a      	strh	r2, [r3, #0]
	
	
}
 8002638:	bf00      	nop
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}

08002640 <XPT2046_ReadAdc_Smooth_XY>:


static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b092      	sub	sp, #72	; 0x48
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 800264e:	f107 0308 	add.w	r3, r7, #8
 8002652:	2228      	movs	r2, #40	; 0x28
 8002654:	2100      	movs	r1, #0
 8002656:	4618      	mov	r0, r3
 8002658:	f003 f9b2 	bl	80059c0 <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 800265c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002660:	f107 0332 	add.w	r3, r7, #50	; 0x32
 8002664:	4611      	mov	r1, r2
 8002666:	4618      	mov	r0, r3
 8002668:	f7ff ffce 	bl	8002608 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 800266c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002670:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	3348      	adds	r3, #72	; 0x48
 8002678:	443b      	add	r3, r7
 800267a:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 800267e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002682:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002686:	330a      	adds	r3, #10
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	3348      	adds	r3, #72	; 0x48
 800268c:	443b      	add	r3, r7
 800268e:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 8002692:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002696:	3301      	adds	r3, #1
 8002698:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 800269c:	2110      	movs	r1, #16
 800269e:	4871      	ldr	r0, [pc, #452]	; (8002864 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80026a0:	f000 fd82 	bl	80031a8 <HAL_GPIO_ReadPin>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <XPT2046_ReadAdc_Smooth_XY+0x72>
 80026aa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026ae:	2b09      	cmp	r3, #9
 80026b0:	d9d4      	bls.n	800265c <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 80026b2:	2110      	movs	r1, #16
 80026b4:	486b      	ldr	r0, [pc, #428]	; (8002864 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 80026b6:	f000 fd77 	bl	80031a8 <HAL_GPIO_ReadPin>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 80026c0:	4b69      	ldr	r3, [pc, #420]	; (8002868 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 80026c6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80026ca:	2b0a      	cmp	r3, #10
 80026cc:	f040 80c4 	bne.w	8002858 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 80026d0:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80026d4:	643b      	str	r3, [r7, #64]	; 0x40
 80026d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026d8:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 80026da:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80026de:	63bb      	str	r3, [r7, #56]	; 0x38
 80026e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e2:	637b      	str	r3, [r7, #52]	; 0x34
		
		for ( i = 1; i < 10; i ++ )
 80026e4:	2301      	movs	r3, #1
 80026e6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80026ea:	e02b      	b.n	8002744 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 80026ec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80026f0:	005b      	lsls	r3, r3, #1
 80026f2:	3348      	adds	r3, #72	; 0x48
 80026f4:	443b      	add	r3, r7
 80026f6:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80026fa:	461a      	mov	r2, r3
 80026fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80026fe:	4293      	cmp	r3, r2
 8002700:	dd08      	ble.n	8002714 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8002702:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	3348      	adds	r3, #72	; 0x48
 800270a:	443b      	add	r3, r7
 800270c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002710:	643b      	str	r3, [r7, #64]	; 0x40
 8002712:	e012      	b.n	800273a <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8002714:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	3348      	adds	r3, #72	; 0x48
 800271c:	443b      	add	r3, r7
 800271e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002722:	461a      	mov	r2, r3
 8002724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002726:	4293      	cmp	r3, r2
 8002728:	da07      	bge.n	800273a <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 800272a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800272e:	005b      	lsls	r3, r3, #1
 8002730:	3348      	adds	r3, #72	; 0x48
 8002732:	443b      	add	r3, r7
 8002734:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002738:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 800273a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800273e:	3301      	adds	r3, #1
 8002740:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002744:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002748:	2b09      	cmp	r3, #9
 800274a:	d9cf      	bls.n	80026ec <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 800274c:	2301      	movs	r3, #1
 800274e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8002752:	e02f      	b.n	80027b4 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 8002754:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002758:	330a      	adds	r3, #10
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	3348      	adds	r3, #72	; 0x48
 800275e:	443b      	add	r3, r7
 8002760:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002764:	461a      	mov	r2, r3
 8002766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002768:	4293      	cmp	r3, r2
 800276a:	dd09      	ble.n	8002780 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 800276c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002770:	330a      	adds	r3, #10
 8002772:	005b      	lsls	r3, r3, #1
 8002774:	3348      	adds	r3, #72	; 0x48
 8002776:	443b      	add	r3, r7
 8002778:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800277c:	63bb      	str	r3, [r7, #56]	; 0x38
 800277e:	e014      	b.n	80027aa <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 8002780:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002784:	330a      	adds	r3, #10
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	3348      	adds	r3, #72	; 0x48
 800278a:	443b      	add	r3, r7
 800278c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8002790:	461a      	mov	r2, r3
 8002792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002794:	4293      	cmp	r3, r2
 8002796:	da08      	bge.n	80027aa <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8002798:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800279c:	330a      	adds	r3, #10
 800279e:	005b      	lsls	r3, r3, #1
 80027a0:	3348      	adds	r3, #72	; 0x48
 80027a2:	443b      	add	r3, r7
 80027a4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80027a8:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 80027aa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027ae:	3301      	adds	r3, #1
 80027b0:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80027b4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80027b8:	2b09      	cmp	r3, #9
 80027ba:	d9cb      	bls.n	8002754 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 80027bc:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80027c0:	461a      	mov	r2, r3
 80027c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80027c6:	4413      	add	r3, r2
 80027c8:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80027cc:	4413      	add	r3, r2
 80027ce:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80027d2:	4413      	add	r3, r2
 80027d4:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80027d8:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 80027da:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 80027de:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 80027e0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80027e4:	4413      	add	r3, r2
 80027e6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80027ea:	4413      	add	r3, r2
 80027ec:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80027f0:	4413      	add	r3, r2
 80027f2:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 80027f6:	441a      	add	r2, r3
 80027f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fa:	1ad2      	subs	r2, r2, r3
 80027fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fe:	1ad3      	subs	r3, r2, r3
 8002800:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8002802:	b29a      	uxth	r2, r3
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8002808:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800280c:	461a      	mov	r2, r3
 800280e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002812:	4413      	add	r3, r2
 8002814:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8002818:	4413      	add	r3, r2
 800281a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800281e:	4413      	add	r3, r2
 8002820:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8002824:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8002826:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 800282a:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 800282c:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8002830:	4413      	add	r3, r2
 8002832:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 8002836:	4413      	add	r3, r2
 8002838:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 800283c:	4413      	add	r3, r2
 800283e:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 8002842:	441a      	add	r2, r3
 8002844:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002846:	1ad2      	subs	r2, r2, r3
 8002848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800284a:	1ad3      	subs	r3, r2, r3
 800284c:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 800284e:	b29a      	uxth	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 8002854:	2301      	movs	r3, #1
 8002856:	e000      	b.n	800285a <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 8002858:	2300      	movs	r3, #0
	
	
}
 800285a:	4618      	mov	r0, r3
 800285c:	3748      	adds	r7, #72	; 0x48
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40011800 	.word	0x40011800
 8002868:	200001d4 	.word	0x200001d4

0800286c <XPT2046_Get_TouchedPoint>:



uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 800286c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002870:	b084      	sub	sp, #16
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
 8002876:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 8002878:	2301      	movs	r3, #1
 800287a:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 800287c:	f107 0308 	add.w	r3, r7, #8
 8002880:	4618      	mov	r0, r3
 8002882:	f7ff fedd 	bl	8002640 <XPT2046_ReadAdc_Smooth_XY>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d06e      	beq.n	800296a <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 800288c:	683b      	ldr	r3, [r7, #0]
 800288e:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002892:	893b      	ldrh	r3, [r7, #8]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fe19 	bl	80004cc <__aeabi_i2d>
 800289a:	4602      	mov	r2, r0
 800289c:	460b      	mov	r3, r1
 800289e:	4620      	mov	r0, r4
 80028a0:	4629      	mov	r1, r5
 80028a2:	f7fd fe7d 	bl	80005a0 <__aeabi_dmul>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	4690      	mov	r8, r2
 80028ac:	4699      	mov	r9, r3
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 80028b4:	897b      	ldrh	r3, [r7, #10]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fd fe08 	bl	80004cc <__aeabi_i2d>
 80028bc:	4602      	mov	r2, r0
 80028be:	460b      	mov	r3, r1
 80028c0:	4620      	mov	r0, r4
 80028c2:	4629      	mov	r1, r5
 80028c4:	f7fd fe6c 	bl	80005a0 <__aeabi_dmul>
 80028c8:	4602      	mov	r2, r0
 80028ca:	460b      	mov	r3, r1
 80028cc:	4640      	mov	r0, r8
 80028ce:	4649      	mov	r1, r9
 80028d0:	f7fd fcb0 	bl	8000234 <__adddf3>
 80028d4:	4602      	mov	r2, r0
 80028d6:	460b      	mov	r3, r1
 80028d8:	4610      	mov	r0, r2
 80028da:	4619      	mov	r1, r3
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80028e2:	f7fd fca7 	bl	8000234 <__adddf3>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	4610      	mov	r0, r2
 80028ec:	4619      	mov	r1, r3
 80028ee:	f7fe f919 	bl	8000b24 <__aeabi_d2uiz>
 80028f2:	4603      	mov	r3, r0
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002900:	893b      	ldrh	r3, [r7, #8]
 8002902:	4618      	mov	r0, r3
 8002904:	f7fd fde2 	bl	80004cc <__aeabi_i2d>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4620      	mov	r0, r4
 800290e:	4629      	mov	r1, r5
 8002910:	f7fd fe46 	bl	80005a0 <__aeabi_dmul>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	4690      	mov	r8, r2
 800291a:	4699      	mov	r9, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002922:	897b      	ldrh	r3, [r7, #10]
 8002924:	4618      	mov	r0, r3
 8002926:	f7fd fdd1 	bl	80004cc <__aeabi_i2d>
 800292a:	4602      	mov	r2, r0
 800292c:	460b      	mov	r3, r1
 800292e:	4620      	mov	r0, r4
 8002930:	4629      	mov	r1, r5
 8002932:	f7fd fe35 	bl	80005a0 <__aeabi_dmul>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4640      	mov	r0, r8
 800293c:	4649      	mov	r1, r9
 800293e:	f7fd fc79 	bl	8000234 <__adddf3>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4610      	mov	r0, r2
 8002948:	4619      	mov	r1, r3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8002950:	f7fd fc70 	bl	8000234 <__adddf3>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4610      	mov	r0, r2
 800295a:	4619      	mov	r1, r3
 800295c:	f7fe f8e2 	bl	8000b24 <__aeabi_d2uiz>
 8002960:	4603      	mov	r3, r0
 8002962:	b29a      	uxth	r2, r3
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	805a      	strh	r2, [r3, #2]
 8002968:	e001      	b.n	800296e <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 800296a:	2300      	movs	r3, #0
 800296c:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 800296e:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800297c <Check_touchkey>:
ButtonCoordinates UpButton = { { 240, 10 }, { 300, 60 } };
ButtonCoordinates DownButton = { { 240, 160 }, { 300, 210 } };
ButtonCoordinates PauseButton = { { 240, 75 }, { 300, 145 } };

int Check_touchkey()
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b096      	sub	sp, #88	; 0x58
 8002980:	af02      	add	r7, sp, #8
		strType_XPT2046_Coordinate strDisplayCoordinate;
	
	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) )
 8002982:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002986:	495a      	ldr	r1, [pc, #360]	; (8002af0 <Check_touchkey+0x174>)
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff ff6f 	bl	800286c <XPT2046_Get_TouchedPoint>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a8 	beq.w	8002ae6 <Check_touchkey+0x16a>
	{
		char str1[33];
		char str2[33];

		snprintf(str1,32,"%d", strDisplayCoordinate.x);
 8002996:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800299a:	1d38      	adds	r0, r7, #4
 800299c:	4a55      	ldr	r2, [pc, #340]	; (8002af4 <Check_touchkey+0x178>)
 800299e:	2120      	movs	r1, #32
 80029a0:	f003 f816 	bl	80059d0 <sniprintf>
		snprintf(str2,32,"%d", strDisplayCoordinate.y);
 80029a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029a8:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80029ac:	4a51      	ldr	r2, [pc, #324]	; (8002af4 <Check_touchkey+0x178>)
 80029ae:	2120      	movs	r1, #32
 80029b0:	f003 f80e 	bl	80059d0 <sniprintf>

		LCD_Clear(50,100,30,30,0xFFFF);
 80029b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	231e      	movs	r3, #30
 80029bc:	221e      	movs	r2, #30
 80029be:	2164      	movs	r1, #100	; 0x64
 80029c0:	2032      	movs	r0, #50	; 0x32
 80029c2:	f7fe fada 	bl	8000f7a <LCD_Clear>
		LCD_DrawString(50, 100, str1);
 80029c6:	1d3b      	adds	r3, r7, #4
 80029c8:	461a      	mov	r2, r3
 80029ca:	2164      	movs	r1, #100	; 0x64
 80029cc:	2032      	movs	r0, #50	; 0x32
 80029ce:	f7fe fb3d 	bl	800104c <LCD_DrawString>
		LCD_DrawString(50, 115, str2);
 80029d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80029d6:	461a      	mov	r2, r3
 80029d8:	2173      	movs	r1, #115	; 0x73
 80029da:	2032      	movs	r0, #50	; 0x32
 80029dc:	f7fe fb36 	bl	800104c <LCD_DrawString>


		if( (strDisplayCoordinate.x >= ResetButton.Top_Left.x && strDisplayCoordinate.x <= ResetButton.Bottom_Right.x)  &&
 80029e0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80029e4:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <Check_touchkey+0x17c>)
 80029e6:	881b      	ldrh	r3, [r3, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d313      	bcc.n	8002a14 <Check_touchkey+0x98>
 80029ec:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80029f0:	4b41      	ldr	r3, [pc, #260]	; (8002af8 <Check_touchkey+0x17c>)
 80029f2:	889b      	ldrh	r3, [r3, #4]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d80d      	bhi.n	8002a14 <Check_touchkey+0x98>
			(strDisplayCoordinate.y >= ResetButton.Top_Left.y && strDisplayCoordinate.y <= ResetButton.Bottom_Right.y)){
 80029f8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80029fc:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <Check_touchkey+0x17c>)
 80029fe:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x >= ResetButton.Top_Left.x && strDisplayCoordinate.x <= ResetButton.Bottom_Right.x)  &&
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d307      	bcc.n	8002a14 <Check_touchkey+0x98>
			(strDisplayCoordinate.y >= ResetButton.Top_Left.y && strDisplayCoordinate.y <= ResetButton.Bottom_Right.y)){
 8002a04:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002a08:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <Check_touchkey+0x17c>)
 8002a0a:	88db      	ldrh	r3, [r3, #6]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d801      	bhi.n	8002a14 <Check_touchkey+0x98>
				return 1;
 8002a10:	2301      	movs	r3, #1
 8002a12:	e069      	b.n	8002ae8 <Check_touchkey+0x16c>
			}

		if( (strDisplayCoordinate.x >= AutoButton.Top_Left.x && strDisplayCoordinate.x <= AutoButton.Bottom_Right.x)  &&
 8002a14:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002a18:	4b38      	ldr	r3, [pc, #224]	; (8002afc <Check_touchkey+0x180>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d313      	bcc.n	8002a48 <Check_touchkey+0xcc>
 8002a20:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002a24:	4b35      	ldr	r3, [pc, #212]	; (8002afc <Check_touchkey+0x180>)
 8002a26:	889b      	ldrh	r3, [r3, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d80d      	bhi.n	8002a48 <Check_touchkey+0xcc>
			(strDisplayCoordinate.y >= AutoButton.Top_Left.y && strDisplayCoordinate.y <= AutoButton.Bottom_Right.y)){
 8002a2c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002a30:	4b32      	ldr	r3, [pc, #200]	; (8002afc <Check_touchkey+0x180>)
 8002a32:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x >= AutoButton.Top_Left.x && strDisplayCoordinate.x <= AutoButton.Bottom_Right.x)  &&
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d307      	bcc.n	8002a48 <Check_touchkey+0xcc>
			(strDisplayCoordinate.y >= AutoButton.Top_Left.y && strDisplayCoordinate.y <= AutoButton.Bottom_Right.y)){
 8002a38:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002a3c:	4b2f      	ldr	r3, [pc, #188]	; (8002afc <Check_touchkey+0x180>)
 8002a3e:	88db      	ldrh	r3, [r3, #6]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d801      	bhi.n	8002a48 <Check_touchkey+0xcc>
				return 2;
 8002a44:	2302      	movs	r3, #2
 8002a46:	e04f      	b.n	8002ae8 <Check_touchkey+0x16c>
			}

		if( (strDisplayCoordinate.x >= UpButton.Top_Left.x && strDisplayCoordinate.x <= UpButton.Bottom_Right.x)  &&
 8002a48:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002a4c:	4b2c      	ldr	r3, [pc, #176]	; (8002b00 <Check_touchkey+0x184>)
 8002a4e:	881b      	ldrh	r3, [r3, #0]
 8002a50:	429a      	cmp	r2, r3
 8002a52:	d313      	bcc.n	8002a7c <Check_touchkey+0x100>
 8002a54:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002a58:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <Check_touchkey+0x184>)
 8002a5a:	889b      	ldrh	r3, [r3, #4]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d80d      	bhi.n	8002a7c <Check_touchkey+0x100>
			(strDisplayCoordinate.y >= UpButton.Top_Left.y && strDisplayCoordinate.y <= UpButton.Bottom_Right.y)){
 8002a60:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002a64:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <Check_touchkey+0x184>)
 8002a66:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x >= UpButton.Top_Left.x && strDisplayCoordinate.x <= UpButton.Bottom_Right.x)  &&
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d307      	bcc.n	8002a7c <Check_touchkey+0x100>
			(strDisplayCoordinate.y >= UpButton.Top_Left.y && strDisplayCoordinate.y <= UpButton.Bottom_Right.y)){
 8002a6c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002a70:	4b23      	ldr	r3, [pc, #140]	; (8002b00 <Check_touchkey+0x184>)
 8002a72:	88db      	ldrh	r3, [r3, #6]
 8002a74:	429a      	cmp	r2, r3
 8002a76:	d801      	bhi.n	8002a7c <Check_touchkey+0x100>
				return 3;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e035      	b.n	8002ae8 <Check_touchkey+0x16c>
			}

		if( (strDisplayCoordinate.x >= DownButton.Top_Left.x && strDisplayCoordinate.x <= DownButton.Bottom_Right.x)  &&
 8002a7c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002a80:	4b20      	ldr	r3, [pc, #128]	; (8002b04 <Check_touchkey+0x188>)
 8002a82:	881b      	ldrh	r3, [r3, #0]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d313      	bcc.n	8002ab0 <Check_touchkey+0x134>
 8002a88:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002a8c:	4b1d      	ldr	r3, [pc, #116]	; (8002b04 <Check_touchkey+0x188>)
 8002a8e:	889b      	ldrh	r3, [r3, #4]
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d80d      	bhi.n	8002ab0 <Check_touchkey+0x134>
			(strDisplayCoordinate.y >= DownButton.Top_Left.y && strDisplayCoordinate.y <= DownButton.Bottom_Right.y)){
 8002a94:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002a98:	4b1a      	ldr	r3, [pc, #104]	; (8002b04 <Check_touchkey+0x188>)
 8002a9a:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x >= DownButton.Top_Left.x && strDisplayCoordinate.x <= DownButton.Bottom_Right.x)  &&
 8002a9c:	429a      	cmp	r2, r3
 8002a9e:	d307      	bcc.n	8002ab0 <Check_touchkey+0x134>
			(strDisplayCoordinate.y >= DownButton.Top_Left.y && strDisplayCoordinate.y <= DownButton.Bottom_Right.y)){
 8002aa0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002aa4:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <Check_touchkey+0x188>)
 8002aa6:	88db      	ldrh	r3, [r3, #6]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	d801      	bhi.n	8002ab0 <Check_touchkey+0x134>
				return 4;
 8002aac:	2304      	movs	r3, #4
 8002aae:	e01b      	b.n	8002ae8 <Check_touchkey+0x16c>
			}

		if( (strDisplayCoordinate.x >= PauseButton.Top_Left.x && strDisplayCoordinate.x <= PauseButton.Bottom_Right.x)  &&
 8002ab0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002ab4:	4b14      	ldr	r3, [pc, #80]	; (8002b08 <Check_touchkey+0x18c>)
 8002ab6:	881b      	ldrh	r3, [r3, #0]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d313      	bcc.n	8002ae4 <Check_touchkey+0x168>
 8002abc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8002ac0:	4b11      	ldr	r3, [pc, #68]	; (8002b08 <Check_touchkey+0x18c>)
 8002ac2:	889b      	ldrh	r3, [r3, #4]
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d80d      	bhi.n	8002ae4 <Check_touchkey+0x168>
			(strDisplayCoordinate.y >= PauseButton.Top_Left.y && strDisplayCoordinate.y <= PauseButton.Bottom_Right.y)){
 8002ac8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002acc:	4b0e      	ldr	r3, [pc, #56]	; (8002b08 <Check_touchkey+0x18c>)
 8002ace:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x >= PauseButton.Top_Left.x && strDisplayCoordinate.x <= PauseButton.Bottom_Right.x)  &&
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d307      	bcc.n	8002ae4 <Check_touchkey+0x168>
			(strDisplayCoordinate.y >= PauseButton.Top_Left.y && strDisplayCoordinate.y <= PauseButton.Bottom_Right.y)){
 8002ad4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	; (8002b08 <Check_touchkey+0x18c>)
 8002ada:	88db      	ldrh	r3, [r3, #6]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d801      	bhi.n	8002ae4 <Check_touchkey+0x168>
				return 5;
 8002ae0:	2305      	movs	r3, #5
 8002ae2:	e001      	b.n	8002ae8 <Check_touchkey+0x16c>

	}
	else{
		return 0;
	}
}
 8002ae4:	e000      	b.n	8002ae8 <Check_touchkey+0x16c>
		return 0;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3750      	adds	r7, #80	; 0x50
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	20000008 	.word	0x20000008
 8002af4:	08006314 	.word	0x08006314
 8002af8:	20000038 	.word	0x20000038
 8002afc:	20000040 	.word	0x20000040
 8002b00:	20000048 	.word	0x20000048
 8002b04:	20000050 	.word	0x20000050
 8002b08:	20000058 	.word	0x20000058

08002b0c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002b0c:	f7ff fcca 	bl	80024a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002b10:	480b      	ldr	r0, [pc, #44]	; (8002b40 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002b12:	490c      	ldr	r1, [pc, #48]	; (8002b44 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002b14:	4a0c      	ldr	r2, [pc, #48]	; (8002b48 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b18:	e002      	b.n	8002b20 <LoopCopyDataInit>

08002b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b1e:	3304      	adds	r3, #4

08002b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b24:	d3f9      	bcc.n	8002b1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b26:	4a09      	ldr	r2, [pc, #36]	; (8002b4c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002b28:	4c09      	ldr	r4, [pc, #36]	; (8002b50 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b2c:	e001      	b.n	8002b32 <LoopFillZerobss>

08002b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b30:	3204      	adds	r2, #4

08002b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b34:	d3fb      	bcc.n	8002b2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002b36:	f002 ff1f 	bl	8005978 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002b3a:	f7fe fe55 	bl	80017e8 <main>
  bx lr
 8002b3e:	4770      	bx	lr
  ldr r0, =_sdata
 8002b40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b44:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 8002b48:	0803dd94 	.word	0x0803dd94
  ldr r2, =_sbss
 8002b4c:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 8002b50:	200001ec 	.word	0x200001ec

08002b54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002b54:	e7fe      	b.n	8002b54 <ADC1_2_IRQHandler>
	...

08002b58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <HAL_Init+0x28>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a07      	ldr	r2, [pc, #28]	; (8002b80 <HAL_Init+0x28>)
 8002b62:	f043 0310 	orr.w	r3, r3, #16
 8002b66:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b68:	2003      	movs	r0, #3
 8002b6a:	f000 f947 	bl	8002dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b6e:	200f      	movs	r0, #15
 8002b70:	f000 f808 	bl	8002b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b74:	f7ff fae2 	bl	800213c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	bd80      	pop	{r7, pc}
 8002b7e:	bf00      	nop
 8002b80:	40022000 	.word	0x40022000

08002b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b082      	sub	sp, #8
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b8c:	4b12      	ldr	r3, [pc, #72]	; (8002bd8 <HAL_InitTick+0x54>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_InitTick+0x58>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	4619      	mov	r1, r3
 8002b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f000 f95f 	bl	8002e66 <HAL_SYSTICK_Config>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d001      	beq.n	8002bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bae:	2301      	movs	r3, #1
 8002bb0:	e00e      	b.n	8002bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2b0f      	cmp	r3, #15
 8002bb6:	d80a      	bhi.n	8002bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bb8:	2200      	movs	r2, #0
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8002bc0:	f000 f927 	bl	8002e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bc4:	4a06      	ldr	r2, [pc, #24]	; (8002be0 <HAL_InitTick+0x5c>)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	e000      	b.n	8002bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3708      	adds	r7, #8
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}
 8002bd8:	20000000 	.word	0x20000000
 8002bdc:	20000064 	.word	0x20000064
 8002be0:	20000060 	.word	0x20000060

08002be4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <HAL_IncTick+0x1c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	461a      	mov	r2, r3
 8002bee:	4b05      	ldr	r3, [pc, #20]	; (8002c04 <HAL_IncTick+0x20>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	4a03      	ldr	r2, [pc, #12]	; (8002c04 <HAL_IncTick+0x20>)
 8002bf6:	6013      	str	r3, [r2, #0]
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr
 8002c00:	20000064 	.word	0x20000064
 8002c04:	200001d8 	.word	0x200001d8

08002c08 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  return uwTick;
 8002c0c:	4b02      	ldr	r3, [pc, #8]	; (8002c18 <HAL_GetTick+0x10>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc80      	pop	{r7}
 8002c16:	4770      	bx	lr
 8002c18:	200001d8 	.word	0x200001d8

08002c1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b084      	sub	sp, #16
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c24:	f7ff fff0 	bl	8002c08 <HAL_GetTick>
 8002c28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c34:	d005      	beq.n	8002c42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c36:	4b0a      	ldr	r3, [pc, #40]	; (8002c60 <HAL_Delay+0x44>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	461a      	mov	r2, r3
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002c42:	bf00      	nop
 8002c44:	f7ff ffe0 	bl	8002c08 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	68fa      	ldr	r2, [r7, #12]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d8f7      	bhi.n	8002c44 <HAL_Delay+0x28>
  {
  }
}
 8002c54:	bf00      	nop
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	20000064 	.word	0x20000064

08002c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c80:	4013      	ands	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60d3      	str	r3, [r2, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bc80      	pop	{r7}
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 0307 	and.w	r3, r3, #7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bc80      	pop	{r7}
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db0b      	blt.n	8002cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4906      	ldr	r1, [pc, #24]	; (8002cfc <__NVIC_EnableIRQ+0x34>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2001      	movs	r0, #1
 8002cea:	fa00 f202 	lsl.w	r2, r0, r2
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	e000e100 	.word	0xe000e100

08002d00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	6039      	str	r1, [r7, #0]
 8002d0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	db0a      	blt.n	8002d2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	490c      	ldr	r1, [pc, #48]	; (8002d4c <__NVIC_SetPriority+0x4c>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	0112      	lsls	r2, r2, #4
 8002d20:	b2d2      	uxtb	r2, r2
 8002d22:	440b      	add	r3, r1
 8002d24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d28:	e00a      	b.n	8002d40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4908      	ldr	r1, [pc, #32]	; (8002d50 <__NVIC_SetPriority+0x50>)
 8002d30:	79fb      	ldrb	r3, [r7, #7]
 8002d32:	f003 030f 	and.w	r3, r3, #15
 8002d36:	3b04      	subs	r3, #4
 8002d38:	0112      	lsls	r2, r2, #4
 8002d3a:	b2d2      	uxtb	r2, r2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	761a      	strb	r2, [r3, #24]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	e000e100 	.word	0xe000e100
 8002d50:	e000ed00 	.word	0xe000ed00

08002d54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b089      	sub	sp, #36	; 0x24
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f1c3 0307 	rsb	r3, r3, #7
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	bf28      	it	cs
 8002d72:	2304      	movcs	r3, #4
 8002d74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	2b06      	cmp	r3, #6
 8002d7c:	d902      	bls.n	8002d84 <NVIC_EncodePriority+0x30>
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	3b03      	subs	r3, #3
 8002d82:	e000      	b.n	8002d86 <NVIC_EncodePriority+0x32>
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	f04f 32ff 	mov.w	r2, #4294967295
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d92:	43da      	mvns	r2, r3
 8002d94:	68bb      	ldr	r3, [r7, #8]
 8002d96:	401a      	ands	r2, r3
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	fa01 f303 	lsl.w	r3, r1, r3
 8002da6:	43d9      	mvns	r1, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dac:	4313      	orrs	r3, r2
         );
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3724      	adds	r7, #36	; 0x24
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bc80      	pop	{r7}
 8002db6:	4770      	bx	lr

08002db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dc8:	d301      	bcc.n	8002dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e00f      	b.n	8002dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dce:	4a0a      	ldr	r2, [pc, #40]	; (8002df8 <SysTick_Config+0x40>)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	3b01      	subs	r3, #1
 8002dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dd6:	210f      	movs	r1, #15
 8002dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ddc:	f7ff ff90 	bl	8002d00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002de0:	4b05      	ldr	r3, [pc, #20]	; (8002df8 <SysTick_Config+0x40>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002de6:	4b04      	ldr	r3, [pc, #16]	; (8002df8 <SysTick_Config+0x40>)
 8002de8:	2207      	movs	r2, #7
 8002dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3708      	adds	r7, #8
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	e000e010 	.word	0xe000e010

08002dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e04:	6878      	ldr	r0, [r7, #4]
 8002e06:	f7ff ff2d 	bl	8002c64 <__NVIC_SetPriorityGrouping>
}
 8002e0a:	bf00      	nop
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b086      	sub	sp, #24
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	4603      	mov	r3, r0
 8002e1a:	60b9      	str	r1, [r7, #8]
 8002e1c:	607a      	str	r2, [r7, #4]
 8002e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e24:	f7ff ff42 	bl	8002cac <__NVIC_GetPriorityGrouping>
 8002e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	68b9      	ldr	r1, [r7, #8]
 8002e2e:	6978      	ldr	r0, [r7, #20]
 8002e30:	f7ff ff90 	bl	8002d54 <NVIC_EncodePriority>
 8002e34:	4602      	mov	r2, r0
 8002e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e3a:	4611      	mov	r1, r2
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff ff5f 	bl	8002d00 <__NVIC_SetPriority>
}
 8002e42:	bf00      	nop
 8002e44:	3718      	adds	r7, #24
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e4a:	b580      	push	{r7, lr}
 8002e4c:	b082      	sub	sp, #8
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	4603      	mov	r3, r0
 8002e52:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff35 	bl	8002cc8 <__NVIC_EnableIRQ>
}
 8002e5e:	bf00      	nop
 8002e60:	3708      	adds	r7, #8
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffa2 	bl	8002db8 <SysTick_Config>
 8002e74:	4603      	mov	r3, r0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b08b      	sub	sp, #44	; 0x2c
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e92:	e179      	b.n	8003188 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002e94:	2201      	movs	r2, #1
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	69fa      	ldr	r2, [r7, #28]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	f040 8168 	bne.w	8003182 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4a96      	ldr	r2, [pc, #600]	; (8003110 <HAL_GPIO_Init+0x290>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d05e      	beq.n	8002f7a <HAL_GPIO_Init+0xfa>
 8002ebc:	4a94      	ldr	r2, [pc, #592]	; (8003110 <HAL_GPIO_Init+0x290>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d875      	bhi.n	8002fae <HAL_GPIO_Init+0x12e>
 8002ec2:	4a94      	ldr	r2, [pc, #592]	; (8003114 <HAL_GPIO_Init+0x294>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d058      	beq.n	8002f7a <HAL_GPIO_Init+0xfa>
 8002ec8:	4a92      	ldr	r2, [pc, #584]	; (8003114 <HAL_GPIO_Init+0x294>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d86f      	bhi.n	8002fae <HAL_GPIO_Init+0x12e>
 8002ece:	4a92      	ldr	r2, [pc, #584]	; (8003118 <HAL_GPIO_Init+0x298>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d052      	beq.n	8002f7a <HAL_GPIO_Init+0xfa>
 8002ed4:	4a90      	ldr	r2, [pc, #576]	; (8003118 <HAL_GPIO_Init+0x298>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d869      	bhi.n	8002fae <HAL_GPIO_Init+0x12e>
 8002eda:	4a90      	ldr	r2, [pc, #576]	; (800311c <HAL_GPIO_Init+0x29c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d04c      	beq.n	8002f7a <HAL_GPIO_Init+0xfa>
 8002ee0:	4a8e      	ldr	r2, [pc, #568]	; (800311c <HAL_GPIO_Init+0x29c>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d863      	bhi.n	8002fae <HAL_GPIO_Init+0x12e>
 8002ee6:	4a8e      	ldr	r2, [pc, #568]	; (8003120 <HAL_GPIO_Init+0x2a0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d046      	beq.n	8002f7a <HAL_GPIO_Init+0xfa>
 8002eec:	4a8c      	ldr	r2, [pc, #560]	; (8003120 <HAL_GPIO_Init+0x2a0>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d85d      	bhi.n	8002fae <HAL_GPIO_Init+0x12e>
 8002ef2:	2b12      	cmp	r3, #18
 8002ef4:	d82a      	bhi.n	8002f4c <HAL_GPIO_Init+0xcc>
 8002ef6:	2b12      	cmp	r3, #18
 8002ef8:	d859      	bhi.n	8002fae <HAL_GPIO_Init+0x12e>
 8002efa:	a201      	add	r2, pc, #4	; (adr r2, 8002f00 <HAL_GPIO_Init+0x80>)
 8002efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f00:	08002f7b 	.word	0x08002f7b
 8002f04:	08002f55 	.word	0x08002f55
 8002f08:	08002f67 	.word	0x08002f67
 8002f0c:	08002fa9 	.word	0x08002fa9
 8002f10:	08002faf 	.word	0x08002faf
 8002f14:	08002faf 	.word	0x08002faf
 8002f18:	08002faf 	.word	0x08002faf
 8002f1c:	08002faf 	.word	0x08002faf
 8002f20:	08002faf 	.word	0x08002faf
 8002f24:	08002faf 	.word	0x08002faf
 8002f28:	08002faf 	.word	0x08002faf
 8002f2c:	08002faf 	.word	0x08002faf
 8002f30:	08002faf 	.word	0x08002faf
 8002f34:	08002faf 	.word	0x08002faf
 8002f38:	08002faf 	.word	0x08002faf
 8002f3c:	08002faf 	.word	0x08002faf
 8002f40:	08002faf 	.word	0x08002faf
 8002f44:	08002f5d 	.word	0x08002f5d
 8002f48:	08002f71 	.word	0x08002f71
 8002f4c:	4a75      	ldr	r2, [pc, #468]	; (8003124 <HAL_GPIO_Init+0x2a4>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d013      	beq.n	8002f7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002f52:	e02c      	b.n	8002fae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	623b      	str	r3, [r7, #32]
          break;
 8002f5a:	e029      	b.n	8002fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	3304      	adds	r3, #4
 8002f62:	623b      	str	r3, [r7, #32]
          break;
 8002f64:	e024      	b.n	8002fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	3308      	adds	r3, #8
 8002f6c:	623b      	str	r3, [r7, #32]
          break;
 8002f6e:	e01f      	b.n	8002fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	330c      	adds	r3, #12
 8002f76:	623b      	str	r3, [r7, #32]
          break;
 8002f78:	e01a      	b.n	8002fb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d102      	bne.n	8002f88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002f82:	2304      	movs	r3, #4
 8002f84:	623b      	str	r3, [r7, #32]
          break;
 8002f86:	e013      	b.n	8002fb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d105      	bne.n	8002f9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f90:	2308      	movs	r3, #8
 8002f92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	69fa      	ldr	r2, [r7, #28]
 8002f98:	611a      	str	r2, [r3, #16]
          break;
 8002f9a:	e009      	b.n	8002fb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002f9c:	2308      	movs	r3, #8
 8002f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	69fa      	ldr	r2, [r7, #28]
 8002fa4:	615a      	str	r2, [r3, #20]
          break;
 8002fa6:	e003      	b.n	8002fb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	623b      	str	r3, [r7, #32]
          break;
 8002fac:	e000      	b.n	8002fb0 <HAL_GPIO_Init+0x130>
          break;
 8002fae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002fb0:	69bb      	ldr	r3, [r7, #24]
 8002fb2:	2bff      	cmp	r3, #255	; 0xff
 8002fb4:	d801      	bhi.n	8002fba <HAL_GPIO_Init+0x13a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	e001      	b.n	8002fbe <HAL_GPIO_Init+0x13e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	3304      	adds	r3, #4
 8002fbe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	2bff      	cmp	r3, #255	; 0xff
 8002fc4:	d802      	bhi.n	8002fcc <HAL_GPIO_Init+0x14c>
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	e002      	b.n	8002fd2 <HAL_GPIO_Init+0x152>
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	3b08      	subs	r3, #8
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	210f      	movs	r1, #15
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8002fe0:	43db      	mvns	r3, r3
 8002fe2:	401a      	ands	r2, r3
 8002fe4:	6a39      	ldr	r1, [r7, #32]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fec:	431a      	orrs	r2, r3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	f000 80c1 	beq.w	8003182 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003000:	4b49      	ldr	r3, [pc, #292]	; (8003128 <HAL_GPIO_Init+0x2a8>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	4a48      	ldr	r2, [pc, #288]	; (8003128 <HAL_GPIO_Init+0x2a8>)
 8003006:	f043 0301 	orr.w	r3, r3, #1
 800300a:	6193      	str	r3, [r2, #24]
 800300c:	4b46      	ldr	r3, [pc, #280]	; (8003128 <HAL_GPIO_Init+0x2a8>)
 800300e:	699b      	ldr	r3, [r3, #24]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	60bb      	str	r3, [r7, #8]
 8003016:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003018:	4a44      	ldr	r2, [pc, #272]	; (800312c <HAL_GPIO_Init+0x2ac>)
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	089b      	lsrs	r3, r3, #2
 800301e:	3302      	adds	r3, #2
 8003020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003024:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003028:	f003 0303 	and.w	r3, r3, #3
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	68fa      	ldr	r2, [r7, #12]
 8003038:	4013      	ands	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	4a3c      	ldr	r2, [pc, #240]	; (8003130 <HAL_GPIO_Init+0x2b0>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d01f      	beq.n	8003084 <HAL_GPIO_Init+0x204>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	4a3b      	ldr	r2, [pc, #236]	; (8003134 <HAL_GPIO_Init+0x2b4>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d019      	beq.n	8003080 <HAL_GPIO_Init+0x200>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	4a3a      	ldr	r2, [pc, #232]	; (8003138 <HAL_GPIO_Init+0x2b8>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d013      	beq.n	800307c <HAL_GPIO_Init+0x1fc>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a39      	ldr	r2, [pc, #228]	; (800313c <HAL_GPIO_Init+0x2bc>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d00d      	beq.n	8003078 <HAL_GPIO_Init+0x1f8>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a38      	ldr	r2, [pc, #224]	; (8003140 <HAL_GPIO_Init+0x2c0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d007      	beq.n	8003074 <HAL_GPIO_Init+0x1f4>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a37      	ldr	r2, [pc, #220]	; (8003144 <HAL_GPIO_Init+0x2c4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d101      	bne.n	8003070 <HAL_GPIO_Init+0x1f0>
 800306c:	2305      	movs	r3, #5
 800306e:	e00a      	b.n	8003086 <HAL_GPIO_Init+0x206>
 8003070:	2306      	movs	r3, #6
 8003072:	e008      	b.n	8003086 <HAL_GPIO_Init+0x206>
 8003074:	2304      	movs	r3, #4
 8003076:	e006      	b.n	8003086 <HAL_GPIO_Init+0x206>
 8003078:	2303      	movs	r3, #3
 800307a:	e004      	b.n	8003086 <HAL_GPIO_Init+0x206>
 800307c:	2302      	movs	r3, #2
 800307e:	e002      	b.n	8003086 <HAL_GPIO_Init+0x206>
 8003080:	2301      	movs	r3, #1
 8003082:	e000      	b.n	8003086 <HAL_GPIO_Init+0x206>
 8003084:	2300      	movs	r3, #0
 8003086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003088:	f002 0203 	and.w	r2, r2, #3
 800308c:	0092      	lsls	r2, r2, #2
 800308e:	4093      	lsls	r3, r2
 8003090:	68fa      	ldr	r2, [r7, #12]
 8003092:	4313      	orrs	r3, r2
 8003094:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003096:	4925      	ldr	r1, [pc, #148]	; (800312c <HAL_GPIO_Init+0x2ac>)
 8003098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309a:	089b      	lsrs	r3, r3, #2
 800309c:	3302      	adds	r3, #2
 800309e:	68fa      	ldr	r2, [r7, #12]
 80030a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d006      	beq.n	80030be <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80030b0:	4b25      	ldr	r3, [pc, #148]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4924      	ldr	r1, [pc, #144]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
 80030bc:	e006      	b.n	80030cc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80030be:	4b22      	ldr	r3, [pc, #136]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	43db      	mvns	r3, r3
 80030c6:	4920      	ldr	r1, [pc, #128]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 80030c8:	4013      	ands	r3, r2
 80030ca:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d006      	beq.n	80030e6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	491a      	ldr	r1, [pc, #104]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	4313      	orrs	r3, r2
 80030e2:	604b      	str	r3, [r1, #4]
 80030e4:	e006      	b.n	80030f4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80030e6:	4b18      	ldr	r3, [pc, #96]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	4916      	ldr	r1, [pc, #88]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 80030f0:	4013      	ands	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d025      	beq.n	800314c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 8003102:	689a      	ldr	r2, [r3, #8]
 8003104:	4910      	ldr	r1, [pc, #64]	; (8003148 <HAL_GPIO_Init+0x2c8>)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	4313      	orrs	r3, r2
 800310a:	608b      	str	r3, [r1, #8]
 800310c:	e025      	b.n	800315a <HAL_GPIO_Init+0x2da>
 800310e:	bf00      	nop
 8003110:	10320000 	.word	0x10320000
 8003114:	10310000 	.word	0x10310000
 8003118:	10220000 	.word	0x10220000
 800311c:	10210000 	.word	0x10210000
 8003120:	10120000 	.word	0x10120000
 8003124:	10110000 	.word	0x10110000
 8003128:	40021000 	.word	0x40021000
 800312c:	40010000 	.word	0x40010000
 8003130:	40010800 	.word	0x40010800
 8003134:	40010c00 	.word	0x40010c00
 8003138:	40011000 	.word	0x40011000
 800313c:	40011400 	.word	0x40011400
 8003140:	40011800 	.word	0x40011800
 8003144:	40011c00 	.word	0x40011c00
 8003148:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800314c:	4b15      	ldr	r3, [pc, #84]	; (80031a4 <HAL_GPIO_Init+0x324>)
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	43db      	mvns	r3, r3
 8003154:	4913      	ldr	r1, [pc, #76]	; (80031a4 <HAL_GPIO_Init+0x324>)
 8003156:	4013      	ands	r3, r2
 8003158:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d006      	beq.n	8003174 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003166:	4b0f      	ldr	r3, [pc, #60]	; (80031a4 <HAL_GPIO_Init+0x324>)
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	490e      	ldr	r1, [pc, #56]	; (80031a4 <HAL_GPIO_Init+0x324>)
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	60cb      	str	r3, [r1, #12]
 8003172:	e006      	b.n	8003182 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003174:	4b0b      	ldr	r3, [pc, #44]	; (80031a4 <HAL_GPIO_Init+0x324>)
 8003176:	68da      	ldr	r2, [r3, #12]
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	43db      	mvns	r3, r3
 800317c:	4909      	ldr	r1, [pc, #36]	; (80031a4 <HAL_GPIO_Init+0x324>)
 800317e:	4013      	ands	r3, r2
 8003180:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003184:	3301      	adds	r3, #1
 8003186:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	fa22 f303 	lsr.w	r3, r2, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	f47f ae7e 	bne.w	8002e94 <HAL_GPIO_Init+0x14>
  }
}
 8003198:	bf00      	nop
 800319a:	bf00      	nop
 800319c:	372c      	adds	r7, #44	; 0x2c
 800319e:	46bd      	mov	sp, r7
 80031a0:	bc80      	pop	{r7}
 80031a2:	4770      	bx	lr
 80031a4:	40010400 	.word	0x40010400

080031a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	689a      	ldr	r2, [r3, #8]
 80031b8:	887b      	ldrh	r3, [r7, #2]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d002      	beq.n	80031c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
 80031c4:	e001      	b.n	80031ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031c6:	2300      	movs	r3, #0
 80031c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80031cc:	4618      	mov	r0, r3
 80031ce:	3714      	adds	r7, #20
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
 80031de:	460b      	mov	r3, r1
 80031e0:	807b      	strh	r3, [r7, #2]
 80031e2:	4613      	mov	r3, r2
 80031e4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031e6:	787b      	ldrb	r3, [r7, #1]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d003      	beq.n	80031f4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031ec:	887a      	ldrh	r2, [r7, #2]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80031f2:	e003      	b.n	80031fc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80031f4:	887b      	ldrh	r3, [r7, #2]
 80031f6:	041a      	lsls	r2, r3, #16
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	611a      	str	r2, [r3, #16]
}
 80031fc:	bf00      	nop
 80031fe:	370c      	adds	r7, #12
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr
	...

08003208 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	4603      	mov	r3, r0
 8003210:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003212:	4b08      	ldr	r3, [pc, #32]	; (8003234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003214:	695a      	ldr	r2, [r3, #20]
 8003216:	88fb      	ldrh	r3, [r7, #6]
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d006      	beq.n	800322c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800321e:	4a05      	ldr	r2, [pc, #20]	; (8003234 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003220:	88fb      	ldrh	r3, [r7, #6]
 8003222:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003224:	88fb      	ldrh	r3, [r7, #6]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f806 	bl	8003238 <HAL_GPIO_EXTI_Callback>
  }
}
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}
 8003234:	40010400 	.word	0x40010400

08003238 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	4603      	mov	r3, r0
 8003240:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003242:	bf00      	nop
 8003244:	370c      	adds	r7, #12
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr

0800324c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2b00      	cmp	r3, #0
 8003258:	d101      	bne.n	800325e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e12b      	b.n	80034b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d106      	bne.n	8003278 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f7fe ff94 	bl	80021a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2224      	movs	r2, #36	; 0x24
 800327c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800329e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032b0:	f001 fbd8 	bl	8004a64 <HAL_RCC_GetPCLK1Freq>
 80032b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	4a81      	ldr	r2, [pc, #516]	; (80034c0 <HAL_I2C_Init+0x274>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d807      	bhi.n	80032d0 <HAL_I2C_Init+0x84>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	4a80      	ldr	r2, [pc, #512]	; (80034c4 <HAL_I2C_Init+0x278>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	bf94      	ite	ls
 80032c8:	2301      	movls	r3, #1
 80032ca:	2300      	movhi	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e006      	b.n	80032de <HAL_I2C_Init+0x92>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4a7d      	ldr	r2, [pc, #500]	; (80034c8 <HAL_I2C_Init+0x27c>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	bf94      	ite	ls
 80032d8:	2301      	movls	r3, #1
 80032da:	2300      	movhi	r3, #0
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d001      	beq.n	80032e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e0e7      	b.n	80034b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	4a78      	ldr	r2, [pc, #480]	; (80034cc <HAL_I2C_Init+0x280>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	0c9b      	lsrs	r3, r3, #18
 80032f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	68ba      	ldr	r2, [r7, #8]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	4a6a      	ldr	r2, [pc, #424]	; (80034c0 <HAL_I2C_Init+0x274>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d802      	bhi.n	8003320 <HAL_I2C_Init+0xd4>
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	3301      	adds	r3, #1
 800331e:	e009      	b.n	8003334 <HAL_I2C_Init+0xe8>
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003326:	fb02 f303 	mul.w	r3, r2, r3
 800332a:	4a69      	ldr	r2, [pc, #420]	; (80034d0 <HAL_I2C_Init+0x284>)
 800332c:	fba2 2303 	umull	r2, r3, r2, r3
 8003330:	099b      	lsrs	r3, r3, #6
 8003332:	3301      	adds	r3, #1
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	6812      	ldr	r2, [r2, #0]
 8003338:	430b      	orrs	r3, r1
 800333a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	69db      	ldr	r3, [r3, #28]
 8003342:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003346:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	495c      	ldr	r1, [pc, #368]	; (80034c0 <HAL_I2C_Init+0x274>)
 8003350:	428b      	cmp	r3, r1
 8003352:	d819      	bhi.n	8003388 <HAL_I2C_Init+0x13c>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	1e59      	subs	r1, r3, #1
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	005b      	lsls	r3, r3, #1
 800335e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003362:	1c59      	adds	r1, r3, #1
 8003364:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003368:	400b      	ands	r3, r1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_I2C_Init+0x138>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	1e59      	subs	r1, r3, #1
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	005b      	lsls	r3, r3, #1
 8003378:	fbb1 f3f3 	udiv	r3, r1, r3
 800337c:	3301      	adds	r3, #1
 800337e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003382:	e051      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003384:	2304      	movs	r3, #4
 8003386:	e04f      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d111      	bne.n	80033b4 <HAL_I2C_Init+0x168>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e58      	subs	r0, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6859      	ldr	r1, [r3, #4]
 8003398:	460b      	mov	r3, r1
 800339a:	005b      	lsls	r3, r3, #1
 800339c:	440b      	add	r3, r1
 800339e:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a2:	3301      	adds	r3, #1
 80033a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	e012      	b.n	80033da <HAL_I2C_Init+0x18e>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e58      	subs	r0, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	0099      	lsls	r1, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Init+0x196>
 80033de:	2301      	movs	r3, #1
 80033e0:	e022      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	689b      	ldr	r3, [r3, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10e      	bne.n	8003408 <HAL_I2C_Init+0x1bc>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	1e58      	subs	r0, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	460b      	mov	r3, r1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	440b      	add	r3, r1
 80033f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fc:	3301      	adds	r3, #1
 80033fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003402:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003406:	e00f      	b.n	8003428 <HAL_I2C_Init+0x1dc>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1e58      	subs	r0, r3, #1
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	460b      	mov	r3, r1
 8003412:	009b      	lsls	r3, r3, #2
 8003414:	440b      	add	r3, r1
 8003416:	0099      	lsls	r1, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	fbb0 f3f3 	udiv	r3, r0, r3
 800341e:	3301      	adds	r3, #1
 8003420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003424:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	6809      	ldr	r1, [r1, #0]
 800342c:	4313      	orrs	r3, r2
 800342e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a1b      	ldr	r3, [r3, #32]
 8003442:	431a      	orrs	r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003456:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6911      	ldr	r1, [r2, #16]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	68d2      	ldr	r2, [r2, #12]
 8003462:	4311      	orrs	r1, r2
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6812      	ldr	r2, [r2, #0]
 8003468:	430b      	orrs	r3, r1
 800346a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695a      	ldr	r2, [r3, #20]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2220      	movs	r2, #32
 80034a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034b4:	2300      	movs	r3, #0
}
 80034b6:	4618      	mov	r0, r3
 80034b8:	3710      	adds	r7, #16
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
 80034be:	bf00      	nop
 80034c0:	000186a0 	.word	0x000186a0
 80034c4:	001e847f 	.word	0x001e847f
 80034c8:	003d08ff 	.word	0x003d08ff
 80034cc:	431bde83 	.word	0x431bde83
 80034d0:	10624dd3 	.word	0x10624dd3

080034d4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af02      	add	r7, sp, #8
 80034da:	60f8      	str	r0, [r7, #12]
 80034dc:	4608      	mov	r0, r1
 80034de:	4611      	mov	r1, r2
 80034e0:	461a      	mov	r2, r3
 80034e2:	4603      	mov	r3, r0
 80034e4:	817b      	strh	r3, [r7, #10]
 80034e6:	460b      	mov	r3, r1
 80034e8:	813b      	strh	r3, [r7, #8]
 80034ea:	4613      	mov	r3, r2
 80034ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034ee:	f7ff fb8b 	bl	8002c08 <HAL_GetTick>
 80034f2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	f040 80d9 	bne.w	80036b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	9300      	str	r3, [sp, #0]
 8003506:	2319      	movs	r3, #25
 8003508:	2201      	movs	r2, #1
 800350a:	496d      	ldr	r1, [pc, #436]	; (80036c0 <HAL_I2C_Mem_Write+0x1ec>)
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	f000 fcc1 	bl	8003e94 <I2C_WaitOnFlagUntilTimeout>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d001      	beq.n	800351c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003518:	2302      	movs	r3, #2
 800351a:	e0cc      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_I2C_Mem_Write+0x56>
 8003526:	2302      	movs	r3, #2
 8003528:	e0c5      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b01      	cmp	r3, #1
 800353e:	d007      	beq.n	8003550 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800355e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2221      	movs	r2, #33	; 0x21
 8003564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2240      	movs	r2, #64	; 0x40
 800356c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003580:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	4a4d      	ldr	r2, [pc, #308]	; (80036c4 <HAL_I2C_Mem_Write+0x1f0>)
 8003590:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003592:	88f8      	ldrh	r0, [r7, #6]
 8003594:	893a      	ldrh	r2, [r7, #8]
 8003596:	8979      	ldrh	r1, [r7, #10]
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	9301      	str	r3, [sp, #4]
 800359c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800359e:	9300      	str	r3, [sp, #0]
 80035a0:	4603      	mov	r3, r0
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 faf8 	bl	8003b98 <I2C_RequestMemoryWrite>
 80035a8:	4603      	mov	r3, r0
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d052      	beq.n	8003654 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e081      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b2:	697a      	ldr	r2, [r7, #20]
 80035b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f000 fd42 	bl	8004040 <I2C_WaitOnTXEFlagUntilTimeout>
 80035bc:	4603      	mov	r3, r0
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00d      	beq.n	80035de <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d107      	bne.n	80035da <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	681a      	ldr	r2, [r3, #0]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035d8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e06b      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e2:	781a      	ldrb	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ee:	1c5a      	adds	r2, r3, #1
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f8:	3b01      	subs	r3, #1
 80035fa:	b29a      	uxth	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003604:	b29b      	uxth	r3, r3
 8003606:	3b01      	subs	r3, #1
 8003608:	b29a      	uxth	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	695b      	ldr	r3, [r3, #20]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b04      	cmp	r3, #4
 800361a:	d11b      	bne.n	8003654 <HAL_I2C_Mem_Write+0x180>
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	2b00      	cmp	r3, #0
 8003622:	d017      	beq.n	8003654 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003628:	781a      	ldrb	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003634:	1c5a      	adds	r2, r3, #1
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800364a:	b29b      	uxth	r3, r3
 800364c:	3b01      	subs	r3, #1
 800364e:	b29a      	uxth	r2, r3
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1aa      	bne.n	80035b2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800365c:	697a      	ldr	r2, [r7, #20]
 800365e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003660:	68f8      	ldr	r0, [r7, #12]
 8003662:	f000 fd2e 	bl	80040c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003666:	4603      	mov	r3, r0
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00d      	beq.n	8003688 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003670:	2b04      	cmp	r3, #4
 8003672:	d107      	bne.n	8003684 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003682:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e016      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003696:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	2200      	movs	r2, #0
 80036ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036b0:	2300      	movs	r3, #0
 80036b2:	e000      	b.n	80036b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80036b4:	2302      	movs	r3, #2
  }
}
 80036b6:	4618      	mov	r0, r3
 80036b8:	3718      	adds	r7, #24
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	00100002 	.word	0x00100002
 80036c4:	ffff0000 	.word	0xffff0000

080036c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08c      	sub	sp, #48	; 0x30
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	4608      	mov	r0, r1
 80036d2:	4611      	mov	r1, r2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4603      	mov	r3, r0
 80036d8:	817b      	strh	r3, [r7, #10]
 80036da:	460b      	mov	r3, r1
 80036dc:	813b      	strh	r3, [r7, #8]
 80036de:	4613      	mov	r3, r2
 80036e0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 80036e2:	2300      	movs	r3, #0
 80036e4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80036e6:	f7ff fa8f 	bl	8002c08 <HAL_GetTick>
 80036ea:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	f040 8244 	bne.w	8003b82 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80036fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2319      	movs	r3, #25
 8003700:	2201      	movs	r2, #1
 8003702:	4982      	ldr	r1, [pc, #520]	; (800390c <HAL_I2C_Mem_Read+0x244>)
 8003704:	68f8      	ldr	r0, [r7, #12]
 8003706:	f000 fbc5 	bl	8003e94 <I2C_WaitOnFlagUntilTimeout>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d001      	beq.n	8003714 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8003710:	2302      	movs	r3, #2
 8003712:	e237      	b.n	8003b84 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_I2C_Mem_Read+0x5a>
 800371e:	2302      	movs	r3, #2
 8003720:	e230      	b.n	8003b84 <HAL_I2C_Mem_Read+0x4bc>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2201      	movs	r2, #1
 8003726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f003 0301 	and.w	r3, r3, #1
 8003734:	2b01      	cmp	r3, #1
 8003736:	d007      	beq.n	8003748 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003756:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	2222      	movs	r2, #34	; 0x22
 800375c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2240      	movs	r2, #64	; 0x40
 8003764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003772:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003778:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800377e:	b29a      	uxth	r2, r3
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	4a62      	ldr	r2, [pc, #392]	; (8003910 <HAL_I2C_Mem_Read+0x248>)
 8003788:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800378a:	88f8      	ldrh	r0, [r7, #6]
 800378c:	893a      	ldrh	r2, [r7, #8]
 800378e:	8979      	ldrh	r1, [r7, #10]
 8003790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003792:	9301      	str	r3, [sp, #4]
 8003794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	4603      	mov	r3, r0
 800379a:	68f8      	ldr	r0, [r7, #12]
 800379c:	f000 fa92 	bl	8003cc4 <I2C_RequestMemoryRead>
 80037a0:	4603      	mov	r3, r0
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e1ec      	b.n	8003b84 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d113      	bne.n	80037da <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037b2:	2300      	movs	r3, #0
 80037b4:	61fb      	str	r3, [r7, #28]
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	61fb      	str	r3, [r7, #28]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	61fb      	str	r3, [r7, #28]
 80037c6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	681a      	ldr	r2, [r3, #0]
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	e1c0      	b.n	8003b5c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037de:	2b01      	cmp	r3, #1
 80037e0:	d11e      	bne.n	8003820 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037f0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80037f2:	b672      	cpsid	i
}
 80037f4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037f6:	2300      	movs	r3, #0
 80037f8:	61bb      	str	r3, [r7, #24]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695b      	ldr	r3, [r3, #20]
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	61bb      	str	r3, [r7, #24]
 800380a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800381a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800381c:	b662      	cpsie	i
}
 800381e:	e035      	b.n	800388c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003824:	2b02      	cmp	r3, #2
 8003826:	d11e      	bne.n	8003866 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003836:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003838:	b672      	cpsid	i
}
 800383a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800383c:	2300      	movs	r3, #0
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	617b      	str	r3, [r7, #20]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	699b      	ldr	r3, [r3, #24]
 800384e:	617b      	str	r3, [r7, #20]
 8003850:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003860:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003862:	b662      	cpsie	i
}
 8003864:	e012      	b.n	800388c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003874:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	695b      	ldr	r3, [r3, #20]
 8003880:	613b      	str	r3, [r7, #16]
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	613b      	str	r3, [r7, #16]
 800388a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800388c:	e166      	b.n	8003b5c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003892:	2b03      	cmp	r3, #3
 8003894:	f200 811f 	bhi.w	8003ad6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800389c:	2b01      	cmp	r3, #1
 800389e:	d123      	bne.n	80038e8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fc4d 	bl	8004144 <I2C_WaitOnRXNEFlagUntilTimeout>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 80038b0:	2301      	movs	r3, #1
 80038b2:	e167      	b.n	8003b84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038be:	b2d2      	uxtb	r2, r2
 80038c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038d0:	3b01      	subs	r3, #1
 80038d2:	b29a      	uxth	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80038e6:	e139      	b.n	8003b5c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d152      	bne.n	8003996 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80038f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f2:	9300      	str	r3, [sp, #0]
 80038f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038f6:	2200      	movs	r2, #0
 80038f8:	4906      	ldr	r1, [pc, #24]	; (8003914 <HAL_I2C_Mem_Read+0x24c>)
 80038fa:	68f8      	ldr	r0, [r7, #12]
 80038fc:	f000 faca 	bl	8003e94 <I2C_WaitOnFlagUntilTimeout>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d008      	beq.n	8003918 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8003906:	2301      	movs	r3, #1
 8003908:	e13c      	b.n	8003b84 <HAL_I2C_Mem_Read+0x4bc>
 800390a:	bf00      	nop
 800390c:	00100002 	.word	0x00100002
 8003910:	ffff0000 	.word	0xffff0000
 8003914:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003918:	b672      	cpsid	i
}
 800391a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800392a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	691a      	ldr	r2, [r3, #16]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	b2d2      	uxtb	r2, r2
 8003938:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	1c5a      	adds	r2, r3, #1
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003948:	3b01      	subs	r3, #1
 800394a:	b29a      	uxth	r2, r3
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003954:	b29b      	uxth	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	b29a      	uxth	r2, r3
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800395e:	b662      	cpsie	i
}
 8003960:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	691a      	ldr	r2, [r3, #16]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800397e:	3b01      	subs	r3, #1
 8003980:	b29a      	uxth	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800398a:	b29b      	uxth	r3, r3
 800398c:	3b01      	subs	r3, #1
 800398e:	b29a      	uxth	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003994:	e0e2      	b.n	8003b5c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	9300      	str	r3, [sp, #0]
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	2200      	movs	r2, #0
 800399e:	497b      	ldr	r1, [pc, #492]	; (8003b8c <HAL_I2C_Mem_Read+0x4c4>)
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fa77 	bl	8003e94 <I2C_WaitOnFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e0e9      	b.n	8003b84 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681a      	ldr	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039be:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80039c0:	b672      	cpsid	i
}
 80039c2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	691a      	ldr	r2, [r3, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	b2d2      	uxtb	r2, r2
 80039d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	1c5a      	adds	r2, r3, #1
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039e0:	3b01      	subs	r3, #1
 80039e2:	b29a      	uxth	r2, r3
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80039f6:	4b66      	ldr	r3, [pc, #408]	; (8003b90 <HAL_I2C_Mem_Read+0x4c8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	08db      	lsrs	r3, r3, #3
 80039fc:	4a65      	ldr	r2, [pc, #404]	; (8003b94 <HAL_I2C_Mem_Read+0x4cc>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	0a1a      	lsrs	r2, r3, #8
 8003a04:	4613      	mov	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4413      	add	r3, r2
 8003a0a:	00da      	lsls	r2, r3, #3
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003a10:	6a3b      	ldr	r3, [r7, #32]
 8003a12:	3b01      	subs	r3, #1
 8003a14:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d118      	bne.n	8003a4e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	2220      	movs	r2, #32
 8003a26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f043 0220 	orr.w	r2, r3, #32
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003a3e:	b662      	cpsie	i
}
 8003a40:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e09a      	b.n	8003b84 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	695b      	ldr	r3, [r3, #20]
 8003a54:	f003 0304 	and.w	r3, r3, #4
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d1d9      	bne.n	8003a10 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691a      	ldr	r2, [r3, #16]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	3b01      	subs	r3, #1
 8003a98:	b29a      	uxth	r2, r3
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003a9e:	b662      	cpsie	i
}
 8003aa0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aac:	b2d2      	uxtb	r2, r2
 8003aae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab4:	1c5a      	adds	r2, r3, #1
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003abe:	3b01      	subs	r3, #1
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ad4:	e042      	b.n	8003b5c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ada:	68f8      	ldr	r0, [r7, #12]
 8003adc:	f000 fb32 	bl	8004144 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d001      	beq.n	8003aea <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e04c      	b.n	8003b84 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	b2d2      	uxtb	r2, r2
 8003af6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b06:	3b01      	subs	r3, #1
 8003b08:	b29a      	uxth	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	3b01      	subs	r3, #1
 8003b16:	b29a      	uxth	r2, r3
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d118      	bne.n	8003b5c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	691a      	ldr	r2, [r3, #16]
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	b2d2      	uxtb	r2, r2
 8003b36:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	1c5a      	adds	r2, r3, #1
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b46:	3b01      	subs	r3, #1
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b52:	b29b      	uxth	r3, r3
 8003b54:	3b01      	subs	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f47f ae94 	bne.w	800388e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2220      	movs	r2, #32
 8003b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	e000      	b.n	8003b84 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8003b82:	2302      	movs	r3, #2
  }
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3728      	adds	r7, #40	; 0x28
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	00010004 	.word	0x00010004
 8003b90:	20000000 	.word	0x20000000
 8003b94:	14f8b589 	.word	0x14f8b589

08003b98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4603      	mov	r3, r0
 8003ba8:	817b      	strh	r3, [r7, #10]
 8003baa:	460b      	mov	r3, r1
 8003bac:	813b      	strh	r3, [r7, #8]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	9300      	str	r3, [sp, #0]
 8003bc6:	6a3b      	ldr	r3, [r7, #32]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 f960 	bl	8003e94 <I2C_WaitOnFlagUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d00d      	beq.n	8003bf6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be8:	d103      	bne.n	8003bf2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bf0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e05f      	b.n	8003cb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bf6:	897b      	ldrh	r3, [r7, #10]
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c08:	6a3a      	ldr	r2, [r7, #32]
 8003c0a:	492d      	ldr	r1, [pc, #180]	; (8003cc0 <I2C_RequestMemoryWrite+0x128>)
 8003c0c:	68f8      	ldr	r0, [r7, #12]
 8003c0e:	f000 f998 	bl	8003f42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e04c      	b.n	8003cb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	695b      	ldr	r3, [r3, #20]
 8003c26:	617b      	str	r3, [r7, #20]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699b      	ldr	r3, [r3, #24]
 8003c2e:	617b      	str	r3, [r7, #20]
 8003c30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c34:	6a39      	ldr	r1, [r7, #32]
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fa02 	bl	8004040 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c46:	2b04      	cmp	r3, #4
 8003c48:	d107      	bne.n	8003c5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e02b      	b.n	8003cb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003c5e:	88fb      	ldrh	r3, [r7, #6]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003c64:	893b      	ldrh	r3, [r7, #8]
 8003c66:	b2da      	uxtb	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	611a      	str	r2, [r3, #16]
 8003c6e:	e021      	b.n	8003cb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003c70:	893b      	ldrh	r3, [r7, #8]
 8003c72:	0a1b      	lsrs	r3, r3, #8
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	b2da      	uxtb	r2, r3
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c80:	6a39      	ldr	r1, [r7, #32]
 8003c82:	68f8      	ldr	r0, [r7, #12]
 8003c84:	f000 f9dc 	bl	8004040 <I2C_WaitOnTXEFlagUntilTimeout>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d00d      	beq.n	8003caa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c92:	2b04      	cmp	r3, #4
 8003c94:	d107      	bne.n	8003ca6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ca4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e005      	b.n	8003cb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003caa:	893b      	ldrh	r3, [r7, #8]
 8003cac:	b2da      	uxtb	r2, r3
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	00010002 	.word	0x00010002

08003cc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b088      	sub	sp, #32
 8003cc8:	af02      	add	r7, sp, #8
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	4608      	mov	r0, r1
 8003cce:	4611      	mov	r1, r2
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	817b      	strh	r3, [r7, #10]
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	813b      	strh	r3, [r7, #8]
 8003cda:	4613      	mov	r3, r2
 8003cdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	9300      	str	r3, [sp, #0]
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f8c2 	bl	8003e94 <I2C_WaitOnFlagUntilTimeout>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00d      	beq.n	8003d32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d24:	d103      	bne.n	8003d2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e0aa      	b.n	8003e88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d32:	897b      	ldrh	r3, [r7, #10]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	461a      	mov	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003d40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	6a3a      	ldr	r2, [r7, #32]
 8003d46:	4952      	ldr	r1, [pc, #328]	; (8003e90 <I2C_RequestMemoryRead+0x1cc>)
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f8fa 	bl	8003f42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003d4e:	4603      	mov	r3, r0
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d001      	beq.n	8003d58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e097      	b.n	8003e88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	617b      	str	r3, [r7, #20]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	695b      	ldr	r3, [r3, #20]
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	617b      	str	r3, [r7, #20]
 8003d6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d70:	6a39      	ldr	r1, [r7, #32]
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f964 	bl	8004040 <I2C_WaitOnTXEFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00d      	beq.n	8003d9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	2b04      	cmp	r3, #4
 8003d84:	d107      	bne.n	8003d96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003d96:	2301      	movs	r3, #1
 8003d98:	e076      	b.n	8003e88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003d9a:	88fb      	ldrh	r3, [r7, #6]
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d105      	bne.n	8003dac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003da0:	893b      	ldrh	r3, [r7, #8]
 8003da2:	b2da      	uxtb	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	611a      	str	r2, [r3, #16]
 8003daa:	e021      	b.n	8003df0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003dac:	893b      	ldrh	r3, [r7, #8]
 8003dae:	0a1b      	lsrs	r3, r3, #8
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dbc:	6a39      	ldr	r1, [r7, #32]
 8003dbe:	68f8      	ldr	r0, [r7, #12]
 8003dc0:	f000 f93e 	bl	8004040 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d00d      	beq.n	8003de6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dce:	2b04      	cmp	r3, #4
 8003dd0:	d107      	bne.n	8003de2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e050      	b.n	8003e88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003de6:	893b      	ldrh	r3, [r7, #8]
 8003de8:	b2da      	uxtb	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003df0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003df2:	6a39      	ldr	r1, [r7, #32]
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f923 	bl	8004040 <I2C_WaitOnTXEFlagUntilTimeout>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d00d      	beq.n	8003e1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d107      	bne.n	8003e18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e035      	b.n	8003e88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2e:	9300      	str	r3, [sp, #0]
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e38:	68f8      	ldr	r0, [r7, #12]
 8003e3a:	f000 f82b 	bl	8003e94 <I2C_WaitOnFlagUntilTimeout>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e52:	d103      	bne.n	8003e5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e5a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e013      	b.n	8003e88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003e60:	897b      	ldrh	r3, [r7, #10]
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f043 0301 	orr.w	r3, r3, #1
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e72:	6a3a      	ldr	r2, [r7, #32]
 8003e74:	4906      	ldr	r1, [pc, #24]	; (8003e90 <I2C_RequestMemoryRead+0x1cc>)
 8003e76:	68f8      	ldr	r0, [r7, #12]
 8003e78:	f000 f863 	bl	8003f42 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d001      	beq.n	8003e86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e000      	b.n	8003e88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3718      	adds	r7, #24
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	00010002 	.word	0x00010002

08003e94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b084      	sub	sp, #16
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	603b      	str	r3, [r7, #0]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ea4:	e025      	b.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eac:	d021      	beq.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eae:	f7fe feab 	bl	8002c08 <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	429a      	cmp	r2, r3
 8003ebc:	d302      	bcc.n	8003ec4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d116      	bne.n	8003ef2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ede:	f043 0220 	orr.w	r2, r3, #32
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	e023      	b.n	8003f3a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ef2:	68bb      	ldr	r3, [r7, #8]
 8003ef4:	0c1b      	lsrs	r3, r3, #16
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d10d      	bne.n	8003f18 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	695b      	ldr	r3, [r3, #20]
 8003f02:	43da      	mvns	r2, r3
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4013      	ands	r3, r2
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	bf0c      	ite	eq
 8003f0e:	2301      	moveq	r3, #1
 8003f10:	2300      	movne	r3, #0
 8003f12:	b2db      	uxtb	r3, r3
 8003f14:	461a      	mov	r2, r3
 8003f16:	e00c      	b.n	8003f32 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	43da      	mvns	r2, r3
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	4013      	ands	r3, r2
 8003f24:	b29b      	uxth	r3, r3
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	bf0c      	ite	eq
 8003f2a:	2301      	moveq	r3, #1
 8003f2c:	2300      	movne	r3, #0
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	461a      	mov	r2, r3
 8003f32:	79fb      	ldrb	r3, [r7, #7]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	d0b6      	beq.n	8003ea6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}

08003f42 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003f42:	b580      	push	{r7, lr}
 8003f44:	b084      	sub	sp, #16
 8003f46:	af00      	add	r7, sp, #0
 8003f48:	60f8      	str	r0, [r7, #12]
 8003f4a:	60b9      	str	r1, [r7, #8]
 8003f4c:	607a      	str	r2, [r7, #4]
 8003f4e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f50:	e051      	b.n	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	695b      	ldr	r3, [r3, #20]
 8003f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f60:	d123      	bne.n	8003faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681a      	ldr	r2, [r3, #0]
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f70:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f7a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2220      	movs	r2, #32
 8003f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f043 0204 	orr.w	r2, r3, #4
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e046      	b.n	8004038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fb0:	d021      	beq.n	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fb2:	f7fe fe29 	bl	8002c08 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d302      	bcc.n	8003fc8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d116      	bne.n	8003ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2200      	movs	r2, #0
 8003fcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2220      	movs	r2, #32
 8003fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fe2:	f043 0220 	orr.w	r2, r3, #32
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2200      	movs	r2, #0
 8003fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	e020      	b.n	8004038 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ff6:	68bb      	ldr	r3, [r7, #8]
 8003ff8:	0c1b      	lsrs	r3, r3, #16
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d10c      	bne.n	800401a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	695b      	ldr	r3, [r3, #20]
 8004006:	43da      	mvns	r2, r3
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4013      	ands	r3, r2
 800400c:	b29b      	uxth	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	bf14      	ite	ne
 8004012:	2301      	movne	r3, #1
 8004014:	2300      	moveq	r3, #0
 8004016:	b2db      	uxtb	r3, r3
 8004018:	e00b      	b.n	8004032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	43da      	mvns	r2, r3
 8004022:	68bb      	ldr	r3, [r7, #8]
 8004024:	4013      	ands	r3, r2
 8004026:	b29b      	uxth	r3, r3
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf14      	ite	ne
 800402c:	2301      	movne	r3, #1
 800402e:	2300      	moveq	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	2b00      	cmp	r3, #0
 8004034:	d18d      	bne.n	8003f52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004036:	2300      	movs	r3, #0
}
 8004038:	4618      	mov	r0, r3
 800403a:	3710      	adds	r7, #16
 800403c:	46bd      	mov	sp, r7
 800403e:	bd80      	pop	{r7, pc}

08004040 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b084      	sub	sp, #16
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800404c:	e02d      	b.n	80040aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800404e:	68f8      	ldr	r0, [r7, #12]
 8004050:	f000 f8ce 	bl	80041f0 <I2C_IsAcknowledgeFailed>
 8004054:	4603      	mov	r3, r0
 8004056:	2b00      	cmp	r3, #0
 8004058:	d001      	beq.n	800405e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e02d      	b.n	80040ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	68bb      	ldr	r3, [r7, #8]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d021      	beq.n	80040aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7fe fdcf 	bl	8002c08 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	68ba      	ldr	r2, [r7, #8]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d116      	bne.n	80040aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	f043 0220 	orr.w	r2, r3, #32
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e007      	b.n	80040ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695b      	ldr	r3, [r3, #20]
 80040b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040b4:	2b80      	cmp	r3, #128	; 0x80
 80040b6:	d1ca      	bne.n	800404e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040b8:	2300      	movs	r3, #0
}
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}

080040c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80040c2:	b580      	push	{r7, lr}
 80040c4:	b084      	sub	sp, #16
 80040c6:	af00      	add	r7, sp, #0
 80040c8:	60f8      	str	r0, [r7, #12]
 80040ca:	60b9      	str	r1, [r7, #8]
 80040cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80040ce:	e02d      	b.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80040d0:	68f8      	ldr	r0, [r7, #12]
 80040d2:	f000 f88d 	bl	80041f0 <I2C_IsAcknowledgeFailed>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e02d      	b.n	800413c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e6:	d021      	beq.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e8:	f7fe fd8e 	bl	8002c08 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	68ba      	ldr	r2, [r7, #8]
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d302      	bcc.n	80040fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d116      	bne.n	800412c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2200      	movs	r2, #0
 8004102:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	f043 0220 	orr.w	r2, r3, #32
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	2200      	movs	r2, #0
 8004124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e007      	b.n	800413c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f003 0304 	and.w	r3, r3, #4
 8004136:	2b04      	cmp	r3, #4
 8004138:	d1ca      	bne.n	80040d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800413a:	2300      	movs	r3, #0
}
 800413c:	4618      	mov	r0, r3
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b084      	sub	sp, #16
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004150:	e042      	b.n	80041d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	695b      	ldr	r3, [r3, #20]
 8004158:	f003 0310 	and.w	r3, r3, #16
 800415c:	2b10      	cmp	r3, #16
 800415e:	d119      	bne.n	8004194 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f06f 0210 	mvn.w	r2, #16
 8004168:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	2220      	movs	r2, #32
 8004174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e029      	b.n	80041e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004194:	f7fe fd38 	bl	8002c08 <HAL_GetTick>
 8004198:	4602      	mov	r2, r0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	1ad3      	subs	r3, r2, r3
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d302      	bcc.n	80041aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d116      	bne.n	80041d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2220      	movs	r2, #32
 80041b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2200      	movs	r2, #0
 80041bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	f043 0220 	orr.w	r2, r3, #32
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041d4:	2301      	movs	r3, #1
 80041d6:	e007      	b.n	80041e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041e2:	2b40      	cmp	r3, #64	; 0x40
 80041e4:	d1b5      	bne.n	8004152 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3710      	adds	r7, #16
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}

080041f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b083      	sub	sp, #12
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004206:	d11b      	bne.n	8004240 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004210:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2220      	movs	r2, #32
 800421c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f043 0204 	orr.w	r2, r3, #4
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	bc80      	pop	{r7}
 800424a:	4770      	bx	lr

0800424c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d101      	bne.n	800425e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e272      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0301 	and.w	r3, r3, #1
 8004266:	2b00      	cmp	r3, #0
 8004268:	f000 8087 	beq.w	800437a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800426c:	4b92      	ldr	r3, [pc, #584]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	f003 030c 	and.w	r3, r3, #12
 8004274:	2b04      	cmp	r3, #4
 8004276:	d00c      	beq.n	8004292 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004278:	4b8f      	ldr	r3, [pc, #572]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f003 030c 	and.w	r3, r3, #12
 8004280:	2b08      	cmp	r3, #8
 8004282:	d112      	bne.n	80042aa <HAL_RCC_OscConfig+0x5e>
 8004284:	4b8c      	ldr	r3, [pc, #560]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800428c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004290:	d10b      	bne.n	80042aa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004292:	4b89      	ldr	r3, [pc, #548]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d06c      	beq.n	8004378 <HAL_RCC_OscConfig+0x12c>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d168      	bne.n	8004378 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e24c      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	685b      	ldr	r3, [r3, #4]
 80042ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042b2:	d106      	bne.n	80042c2 <HAL_RCC_OscConfig+0x76>
 80042b4:	4b80      	ldr	r3, [pc, #512]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7f      	ldr	r2, [pc, #508]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042be:	6013      	str	r3, [r2, #0]
 80042c0:	e02e      	b.n	8004320 <HAL_RCC_OscConfig+0xd4>
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d10c      	bne.n	80042e4 <HAL_RCC_OscConfig+0x98>
 80042ca:	4b7b      	ldr	r3, [pc, #492]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a7a      	ldr	r2, [pc, #488]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d4:	6013      	str	r3, [r2, #0]
 80042d6:	4b78      	ldr	r3, [pc, #480]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a77      	ldr	r2, [pc, #476]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042e0:	6013      	str	r3, [r2, #0]
 80042e2:	e01d      	b.n	8004320 <HAL_RCC_OscConfig+0xd4>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ec:	d10c      	bne.n	8004308 <HAL_RCC_OscConfig+0xbc>
 80042ee:	4b72      	ldr	r3, [pc, #456]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a71      	ldr	r2, [pc, #452]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	4b6f      	ldr	r3, [pc, #444]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a6e      	ldr	r2, [pc, #440]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004304:	6013      	str	r3, [r2, #0]
 8004306:	e00b      	b.n	8004320 <HAL_RCC_OscConfig+0xd4>
 8004308:	4b6b      	ldr	r3, [pc, #428]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a6a      	ldr	r2, [pc, #424]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800430e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	4b68      	ldr	r3, [pc, #416]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a67      	ldr	r2, [pc, #412]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800431a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800431e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d013      	beq.n	8004350 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004328:	f7fe fc6e 	bl	8002c08 <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800432e:	e008      	b.n	8004342 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004330:	f7fe fc6a 	bl	8002c08 <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	2b64      	cmp	r3, #100	; 0x64
 800433c:	d901      	bls.n	8004342 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800433e:	2303      	movs	r3, #3
 8004340:	e200      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004342:	4b5d      	ldr	r3, [pc, #372]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800434a:	2b00      	cmp	r3, #0
 800434c:	d0f0      	beq.n	8004330 <HAL_RCC_OscConfig+0xe4>
 800434e:	e014      	b.n	800437a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004350:	f7fe fc5a 	bl	8002c08 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fe fc56 	bl	8002c08 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e1ec      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436a:	4b53      	ldr	r3, [pc, #332]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d1f0      	bne.n	8004358 <HAL_RCC_OscConfig+0x10c>
 8004376:	e000      	b.n	800437a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004378:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0302 	and.w	r3, r3, #2
 8004382:	2b00      	cmp	r3, #0
 8004384:	d063      	beq.n	800444e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004386:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f003 030c 	and.w	r3, r3, #12
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00b      	beq.n	80043aa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004392:	4b49      	ldr	r3, [pc, #292]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	f003 030c 	and.w	r3, r3, #12
 800439a:	2b08      	cmp	r3, #8
 800439c:	d11c      	bne.n	80043d8 <HAL_RCC_OscConfig+0x18c>
 800439e:	4b46      	ldr	r3, [pc, #280]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d116      	bne.n	80043d8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043aa:	4b43      	ldr	r3, [pc, #268]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <HAL_RCC_OscConfig+0x176>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	691b      	ldr	r3, [r3, #16]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d001      	beq.n	80043c2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e1c0      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c2:	4b3d      	ldr	r3, [pc, #244]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	4939      	ldr	r1, [pc, #228]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043d6:	e03a      	b.n	800444e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	691b      	ldr	r3, [r3, #16]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d020      	beq.n	8004422 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e0:	4b36      	ldr	r3, [pc, #216]	; (80044bc <HAL_RCC_OscConfig+0x270>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043e6:	f7fe fc0f 	bl	8002c08 <HAL_GetTick>
 80043ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ec:	e008      	b.n	8004400 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043ee:	f7fe fc0b 	bl	8002c08 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d901      	bls.n	8004400 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80043fc:	2303      	movs	r3, #3
 80043fe:	e1a1      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004400:	4b2d      	ldr	r3, [pc, #180]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d0f0      	beq.n	80043ee <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800440c:	4b2a      	ldr	r3, [pc, #168]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	4927      	ldr	r1, [pc, #156]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 800441c:	4313      	orrs	r3, r2
 800441e:	600b      	str	r3, [r1, #0]
 8004420:	e015      	b.n	800444e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004422:	4b26      	ldr	r3, [pc, #152]	; (80044bc <HAL_RCC_OscConfig+0x270>)
 8004424:	2200      	movs	r2, #0
 8004426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004428:	f7fe fbee 	bl	8002c08 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004430:	f7fe fbea 	bl	8002c08 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e180      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004442:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d1f0      	bne.n	8004430 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	2b00      	cmp	r3, #0
 8004458:	d03a      	beq.n	80044d0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d019      	beq.n	8004496 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004462:	4b17      	ldr	r3, [pc, #92]	; (80044c0 <HAL_RCC_OscConfig+0x274>)
 8004464:	2201      	movs	r2, #1
 8004466:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004468:	f7fe fbce 	bl	8002c08 <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800446e:	e008      	b.n	8004482 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004470:	f7fe fbca 	bl	8002c08 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	2b02      	cmp	r3, #2
 800447c:	d901      	bls.n	8004482 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e160      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004482:	4b0d      	ldr	r3, [pc, #52]	; (80044b8 <HAL_RCC_OscConfig+0x26c>)
 8004484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d0f0      	beq.n	8004470 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800448e:	2001      	movs	r0, #1
 8004490:	f000 fafc 	bl	8004a8c <RCC_Delay>
 8004494:	e01c      	b.n	80044d0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004496:	4b0a      	ldr	r3, [pc, #40]	; (80044c0 <HAL_RCC_OscConfig+0x274>)
 8004498:	2200      	movs	r2, #0
 800449a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800449c:	f7fe fbb4 	bl	8002c08 <HAL_GetTick>
 80044a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044a2:	e00f      	b.n	80044c4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044a4:	f7fe fbb0 	bl	8002c08 <HAL_GetTick>
 80044a8:	4602      	mov	r2, r0
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d908      	bls.n	80044c4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80044b2:	2303      	movs	r3, #3
 80044b4:	e146      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
 80044b6:	bf00      	nop
 80044b8:	40021000 	.word	0x40021000
 80044bc:	42420000 	.word	0x42420000
 80044c0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044c4:	4b92      	ldr	r3, [pc, #584]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d1e9      	bne.n	80044a4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 80a6 	beq.w	800462a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044de:	2300      	movs	r3, #0
 80044e0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044e2:	4b8b      	ldr	r3, [pc, #556]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	69db      	ldr	r3, [r3, #28]
 80044e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d10d      	bne.n	800450a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044ee:	4b88      	ldr	r3, [pc, #544]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80044f0:	69db      	ldr	r3, [r3, #28]
 80044f2:	4a87      	ldr	r2, [pc, #540]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80044f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044f8:	61d3      	str	r3, [r2, #28]
 80044fa:	4b85      	ldr	r3, [pc, #532]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004502:	60bb      	str	r3, [r7, #8]
 8004504:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004506:	2301      	movs	r3, #1
 8004508:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800450a:	4b82      	ldr	r3, [pc, #520]	; (8004714 <HAL_RCC_OscConfig+0x4c8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004512:	2b00      	cmp	r3, #0
 8004514:	d118      	bne.n	8004548 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004516:	4b7f      	ldr	r3, [pc, #508]	; (8004714 <HAL_RCC_OscConfig+0x4c8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a7e      	ldr	r2, [pc, #504]	; (8004714 <HAL_RCC_OscConfig+0x4c8>)
 800451c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004520:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004522:	f7fe fb71 	bl	8002c08 <HAL_GetTick>
 8004526:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004528:	e008      	b.n	800453c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800452a:	f7fe fb6d 	bl	8002c08 <HAL_GetTick>
 800452e:	4602      	mov	r2, r0
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	1ad3      	subs	r3, r2, r3
 8004534:	2b64      	cmp	r3, #100	; 0x64
 8004536:	d901      	bls.n	800453c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004538:	2303      	movs	r3, #3
 800453a:	e103      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800453c:	4b75      	ldr	r3, [pc, #468]	; (8004714 <HAL_RCC_OscConfig+0x4c8>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004544:	2b00      	cmp	r3, #0
 8004546:	d0f0      	beq.n	800452a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d106      	bne.n	800455e <HAL_RCC_OscConfig+0x312>
 8004550:	4b6f      	ldr	r3, [pc, #444]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004552:	6a1b      	ldr	r3, [r3, #32]
 8004554:	4a6e      	ldr	r2, [pc, #440]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004556:	f043 0301 	orr.w	r3, r3, #1
 800455a:	6213      	str	r3, [r2, #32]
 800455c:	e02d      	b.n	80045ba <HAL_RCC_OscConfig+0x36e>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68db      	ldr	r3, [r3, #12]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10c      	bne.n	8004580 <HAL_RCC_OscConfig+0x334>
 8004566:	4b6a      	ldr	r3, [pc, #424]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	4a69      	ldr	r2, [pc, #420]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 800456c:	f023 0301 	bic.w	r3, r3, #1
 8004570:	6213      	str	r3, [r2, #32]
 8004572:	4b67      	ldr	r3, [pc, #412]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	6a1b      	ldr	r3, [r3, #32]
 8004576:	4a66      	ldr	r2, [pc, #408]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004578:	f023 0304 	bic.w	r3, r3, #4
 800457c:	6213      	str	r3, [r2, #32]
 800457e:	e01c      	b.n	80045ba <HAL_RCC_OscConfig+0x36e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b05      	cmp	r3, #5
 8004586:	d10c      	bne.n	80045a2 <HAL_RCC_OscConfig+0x356>
 8004588:	4b61      	ldr	r3, [pc, #388]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 800458a:	6a1b      	ldr	r3, [r3, #32]
 800458c:	4a60      	ldr	r2, [pc, #384]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 800458e:	f043 0304 	orr.w	r3, r3, #4
 8004592:	6213      	str	r3, [r2, #32]
 8004594:	4b5e      	ldr	r3, [pc, #376]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4a5d      	ldr	r2, [pc, #372]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 800459a:	f043 0301 	orr.w	r3, r3, #1
 800459e:	6213      	str	r3, [r2, #32]
 80045a0:	e00b      	b.n	80045ba <HAL_RCC_OscConfig+0x36e>
 80045a2:	4b5b      	ldr	r3, [pc, #364]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	4a5a      	ldr	r2, [pc, #360]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80045a8:	f023 0301 	bic.w	r3, r3, #1
 80045ac:	6213      	str	r3, [r2, #32]
 80045ae:	4b58      	ldr	r3, [pc, #352]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	4a57      	ldr	r2, [pc, #348]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80045b4:	f023 0304 	bic.w	r3, r3, #4
 80045b8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d015      	beq.n	80045ee <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045c2:	f7fe fb21 	bl	8002c08 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045c8:	e00a      	b.n	80045e0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ca:	f7fe fb1d 	bl	8002c08 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80045d8:	4293      	cmp	r3, r2
 80045da:	d901      	bls.n	80045e0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80045dc:	2303      	movs	r3, #3
 80045de:	e0b1      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e0:	4b4b      	ldr	r3, [pc, #300]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80045e2:	6a1b      	ldr	r3, [r3, #32]
 80045e4:	f003 0302 	and.w	r3, r3, #2
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d0ee      	beq.n	80045ca <HAL_RCC_OscConfig+0x37e>
 80045ec:	e014      	b.n	8004618 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80045ee:	f7fe fb0b 	bl	8002c08 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045f4:	e00a      	b.n	800460c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045f6:	f7fe fb07 	bl	8002c08 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	f241 3288 	movw	r2, #5000	; 0x1388
 8004604:	4293      	cmp	r3, r2
 8004606:	d901      	bls.n	800460c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e09b      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800460c:	4b40      	ldr	r3, [pc, #256]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	f003 0302 	and.w	r3, r3, #2
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ee      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004618:	7dfb      	ldrb	r3, [r7, #23]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d105      	bne.n	800462a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800461e:	4b3c      	ldr	r3, [pc, #240]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004620:	69db      	ldr	r3, [r3, #28]
 8004622:	4a3b      	ldr	r2, [pc, #236]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004624:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004628:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8087 	beq.w	8004742 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004634:	4b36      	ldr	r3, [pc, #216]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b08      	cmp	r3, #8
 800463e:	d061      	beq.n	8004704 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	2b02      	cmp	r3, #2
 8004646:	d146      	bne.n	80046d6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004648:	4b33      	ldr	r3, [pc, #204]	; (8004718 <HAL_RCC_OscConfig+0x4cc>)
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800464e:	f7fe fadb 	bl	8002c08 <HAL_GetTick>
 8004652:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004654:	e008      	b.n	8004668 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004656:	f7fe fad7 	bl	8002c08 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e06d      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004668:	4b29      	ldr	r3, [pc, #164]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800467c:	d108      	bne.n	8004690 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800467e:	4b24      	ldr	r3, [pc, #144]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	689b      	ldr	r3, [r3, #8]
 800468a:	4921      	ldr	r1, [pc, #132]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 800468c:	4313      	orrs	r3, r2
 800468e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004690:	4b1f      	ldr	r3, [pc, #124]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 8004692:	685b      	ldr	r3, [r3, #4]
 8004694:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	6a19      	ldr	r1, [r3, #32]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	430b      	orrs	r3, r1
 80046a2:	491b      	ldr	r1, [pc, #108]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046a8:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80046aa:	2201      	movs	r2, #1
 80046ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ae:	f7fe faab 	bl	8002c08 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b6:	f7fe faa7 	bl	8002c08 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e03d      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80046c8:	4b11      	ldr	r3, [pc, #68]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d0f0      	beq.n	80046b6 <HAL_RCC_OscConfig+0x46a>
 80046d4:	e035      	b.n	8004742 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d6:	4b10      	ldr	r3, [pc, #64]	; (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fe fa94 	bl	8002c08 <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fe fa90 	bl	8002c08 <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e026      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80046f6:	4b06      	ldr	r3, [pc, #24]	; (8004710 <HAL_RCC_OscConfig+0x4c4>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x498>
 8004702:	e01e      	b.n	8004742 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	2b01      	cmp	r3, #1
 800470a:	d107      	bne.n	800471c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800470c:	2301      	movs	r3, #1
 800470e:	e019      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
 8004710:	40021000 	.word	0x40021000
 8004714:	40007000 	.word	0x40007000
 8004718:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800471c:	4b0b      	ldr	r3, [pc, #44]	; (800474c <HAL_RCC_OscConfig+0x500>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a1b      	ldr	r3, [r3, #32]
 800472c:	429a      	cmp	r2, r3
 800472e:	d106      	bne.n	800473e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800473a:	429a      	cmp	r2, r3
 800473c:	d001      	beq.n	8004742 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e000      	b.n	8004744 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3718      	adds	r7, #24
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	40021000 	.word	0x40021000

08004750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e0d0      	b.n	8004906 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004764:	4b6a      	ldr	r3, [pc, #424]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d910      	bls.n	8004794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b67      	ldr	r3, [pc, #412]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 0207 	bic.w	r2, r3, #7
 800477a:	4965      	ldr	r1, [pc, #404]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b63      	ldr	r3, [pc, #396]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e0b8      	b.n	8004906 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0302 	and.w	r3, r3, #2
 800479c:	2b00      	cmp	r3, #0
 800479e:	d020      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 0304 	and.w	r3, r3, #4
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d005      	beq.n	80047b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047ac:	4b59      	ldr	r3, [pc, #356]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	4a58      	ldr	r2, [pc, #352]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80047b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80047b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 0308 	and.w	r3, r3, #8
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80047c4:	4b53      	ldr	r3, [pc, #332]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	4a52      	ldr	r2, [pc, #328]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80047ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80047ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80047d0:	4b50      	ldr	r3, [pc, #320]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	494d      	ldr	r1, [pc, #308]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0301 	and.w	r3, r3, #1
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d040      	beq.n	8004870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d107      	bne.n	8004806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047f6:	4b47      	ldr	r3, [pc, #284]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d115      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e07f      	b.n	8004906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b02      	cmp	r3, #2
 800480c:	d107      	bne.n	800481e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800480e:	4b41      	ldr	r3, [pc, #260]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e073      	b.n	8004906 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800481e:	4b3d      	ldr	r3, [pc, #244]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0302 	and.w	r3, r3, #2
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e06b      	b.n	8004906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800482e:	4b39      	ldr	r3, [pc, #228]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f023 0203 	bic.w	r2, r3, #3
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	4936      	ldr	r1, [pc, #216]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 800483c:	4313      	orrs	r3, r2
 800483e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004840:	f7fe f9e2 	bl	8002c08 <HAL_GetTick>
 8004844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004846:	e00a      	b.n	800485e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004848:	f7fe f9de 	bl	8002c08 <HAL_GetTick>
 800484c:	4602      	mov	r2, r0
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1ad3      	subs	r3, r2, r3
 8004852:	f241 3288 	movw	r2, #5000	; 0x1388
 8004856:	4293      	cmp	r3, r2
 8004858:	d901      	bls.n	800485e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e053      	b.n	8004906 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485e:	4b2d      	ldr	r3, [pc, #180]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	f003 020c 	and.w	r2, r3, #12
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	429a      	cmp	r2, r3
 800486e:	d1eb      	bne.n	8004848 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004870:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f003 0307 	and.w	r3, r3, #7
 8004878:	683a      	ldr	r2, [r7, #0]
 800487a:	429a      	cmp	r2, r3
 800487c:	d210      	bcs.n	80048a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800487e:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 0207 	bic.w	r2, r3, #7
 8004886:	4922      	ldr	r1, [pc, #136]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	4313      	orrs	r3, r2
 800488c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800488e:	4b20      	ldr	r3, [pc, #128]	; (8004910 <HAL_RCC_ClockConfig+0x1c0>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0307 	and.w	r3, r3, #7
 8004896:	683a      	ldr	r2, [r7, #0]
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e032      	b.n	8004906 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f003 0304 	and.w	r3, r3, #4
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d008      	beq.n	80048be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048ac:	4b19      	ldr	r3, [pc, #100]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	4916      	ldr	r1, [pc, #88]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	4313      	orrs	r3, r2
 80048bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0308 	and.w	r3, r3, #8
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80048ca:	4b12      	ldr	r3, [pc, #72]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	490e      	ldr	r1, [pc, #56]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80048de:	f000 f859 	bl	8004994 <HAL_RCC_GetSysClockFreq>
 80048e2:	4602      	mov	r2, r0
 80048e4:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <HAL_RCC_ClockConfig+0x1c4>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	091b      	lsrs	r3, r3, #4
 80048ea:	f003 030f 	and.w	r3, r3, #15
 80048ee:	490a      	ldr	r1, [pc, #40]	; (8004918 <HAL_RCC_ClockConfig+0x1c8>)
 80048f0:	5ccb      	ldrb	r3, [r1, r3]
 80048f2:	fa22 f303 	lsr.w	r3, r2, r3
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <HAL_RCC_ClockConfig+0x1cc>)
 80048f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80048fa:	4b09      	ldr	r3, [pc, #36]	; (8004920 <HAL_RCC_ClockConfig+0x1d0>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe f940 	bl	8002b84 <HAL_InitTick>

  return HAL_OK;
 8004904:	2300      	movs	r3, #0
}
 8004906:	4618      	mov	r0, r3
 8004908:	3710      	adds	r7, #16
 800490a:	46bd      	mov	sp, r7
 800490c:	bd80      	pop	{r7, pc}
 800490e:	bf00      	nop
 8004910:	40022000 	.word	0x40022000
 8004914:	40021000 	.word	0x40021000
 8004918:	0803dd40 	.word	0x0803dd40
 800491c:	20000000 	.word	0x20000000
 8004920:	20000060 	.word	0x20000060

08004924 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b08a      	sub	sp, #40	; 0x28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8004930:	f107 0318 	add.w	r3, r7, #24
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800493e:	2302      	movs	r3, #2
 8004940:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8004942:	2303      	movs	r3, #3
 8004944:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8004946:	2300      	movs	r3, #0
 8004948:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800494a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800494e:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8004950:	4b0e      	ldr	r3, [pc, #56]	; (800498c <HAL_RCC_MCOConfig+0x68>)
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	4a0d      	ldr	r2, [pc, #52]	; (800498c <HAL_RCC_MCOConfig+0x68>)
 8004956:	f043 0304 	orr.w	r3, r3, #4
 800495a:	6193      	str	r3, [r2, #24]
 800495c:	4b0b      	ldr	r3, [pc, #44]	; (800498c <HAL_RCC_MCOConfig+0x68>)
 800495e:	699b      	ldr	r3, [r3, #24]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8004968:	f107 0318 	add.w	r3, r7, #24
 800496c:	4619      	mov	r1, r3
 800496e:	4808      	ldr	r0, [pc, #32]	; (8004990 <HAL_RCC_MCOConfig+0x6c>)
 8004970:	f7fe fa86 	bl	8002e80 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8004974:	4b05      	ldr	r3, [pc, #20]	; (800498c <HAL_RCC_MCOConfig+0x68>)
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800497c:	4903      	ldr	r1, [pc, #12]	; (800498c <HAL_RCC_MCOConfig+0x68>)
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4313      	orrs	r3, r2
 8004982:	604b      	str	r3, [r1, #4]
}
 8004984:	bf00      	nop
 8004986:	3728      	adds	r7, #40	; 0x28
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}
 800498c:	40021000 	.word	0x40021000
 8004990:	40010800 	.word	0x40010800

08004994 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004994:	b490      	push	{r4, r7}
 8004996:	b08a      	sub	sp, #40	; 0x28
 8004998:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800499a:	4b29      	ldr	r3, [pc, #164]	; (8004a40 <HAL_RCC_GetSysClockFreq+0xac>)
 800499c:	1d3c      	adds	r4, r7, #4
 800499e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80049a0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80049a4:	f240 2301 	movw	r3, #513	; 0x201
 80049a8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80049aa:	2300      	movs	r3, #0
 80049ac:	61fb      	str	r3, [r7, #28]
 80049ae:	2300      	movs	r3, #0
 80049b0:	61bb      	str	r3, [r7, #24]
 80049b2:	2300      	movs	r3, #0
 80049b4:	627b      	str	r3, [r7, #36]	; 0x24
 80049b6:	2300      	movs	r3, #0
 80049b8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80049ba:	2300      	movs	r3, #0
 80049bc:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80049be:	4b21      	ldr	r3, [pc, #132]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xb0>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f003 030c 	and.w	r3, r3, #12
 80049ca:	2b04      	cmp	r3, #4
 80049cc:	d002      	beq.n	80049d4 <HAL_RCC_GetSysClockFreq+0x40>
 80049ce:	2b08      	cmp	r3, #8
 80049d0:	d003      	beq.n	80049da <HAL_RCC_GetSysClockFreq+0x46>
 80049d2:	e02b      	b.n	8004a2c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80049d4:	4b1c      	ldr	r3, [pc, #112]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 80049d6:	623b      	str	r3, [r7, #32]
      break;
 80049d8:	e02b      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	0c9b      	lsrs	r3, r3, #18
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	3328      	adds	r3, #40	; 0x28
 80049e4:	443b      	add	r3, r7
 80049e6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80049ea:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d012      	beq.n	8004a1c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80049f6:	4b13      	ldr	r3, [pc, #76]	; (8004a44 <HAL_RCC_GetSysClockFreq+0xb0>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	0c5b      	lsrs	r3, r3, #17
 80049fc:	f003 0301 	and.w	r3, r3, #1
 8004a00:	3328      	adds	r3, #40	; 0x28
 8004a02:	443b      	add	r3, r7
 8004a04:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004a08:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	4a0e      	ldr	r2, [pc, #56]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a0e:	fb03 f202 	mul.w	r2, r3, r2
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	627b      	str	r3, [r7, #36]	; 0x24
 8004a1a:	e004      	b.n	8004a26 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	4a0b      	ldr	r2, [pc, #44]	; (8004a4c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a20:	fb02 f303 	mul.w	r3, r2, r3
 8004a24:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	623b      	str	r3, [r7, #32]
      break;
 8004a2a:	e002      	b.n	8004a32 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004a2c:	4b06      	ldr	r3, [pc, #24]	; (8004a48 <HAL_RCC_GetSysClockFreq+0xb4>)
 8004a2e:	623b      	str	r3, [r7, #32]
      break;
 8004a30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a32:	6a3b      	ldr	r3, [r7, #32]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3728      	adds	r7, #40	; 0x28
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bc90      	pop	{r4, r7}
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	08006318 	.word	0x08006318
 8004a44:	40021000 	.word	0x40021000
 8004a48:	007a1200 	.word	0x007a1200
 8004a4c:	003d0900 	.word	0x003d0900

08004a50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a50:	b480      	push	{r7}
 8004a52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a54:	4b02      	ldr	r3, [pc, #8]	; (8004a60 <HAL_RCC_GetHCLKFreq+0x10>)
 8004a56:	681b      	ldr	r3, [r3, #0]
}
 8004a58:	4618      	mov	r0, r3
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bc80      	pop	{r7}
 8004a5e:	4770      	bx	lr
 8004a60:	20000000 	.word	0x20000000

08004a64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004a68:	f7ff fff2 	bl	8004a50 <HAL_RCC_GetHCLKFreq>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	0a1b      	lsrs	r3, r3, #8
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	4903      	ldr	r1, [pc, #12]	; (8004a88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004a7a:	5ccb      	ldrb	r3, [r1, r3]
 8004a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	40021000 	.word	0x40021000
 8004a88:	0803dd50 	.word	0x0803dd50

08004a8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004a94:	4b0a      	ldr	r3, [pc, #40]	; (8004ac0 <RCC_Delay+0x34>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a0a      	ldr	r2, [pc, #40]	; (8004ac4 <RCC_Delay+0x38>)
 8004a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a9e:	0a5b      	lsrs	r3, r3, #9
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	fb02 f303 	mul.w	r3, r2, r3
 8004aa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004aa8:	bf00      	nop
  }
  while (Delay --);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	1e5a      	subs	r2, r3, #1
 8004aae:	60fa      	str	r2, [r7, #12]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f9      	bne.n	8004aa8 <RCC_Delay+0x1c>
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	3714      	adds	r7, #20
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bc80      	pop	{r7}
 8004abe:	4770      	bx	lr
 8004ac0:	20000000 	.word	0x20000000
 8004ac4:	10624dd3 	.word	0x10624dd3

08004ac8 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	60f8      	str	r0, [r7, #12]
 8004ad0:	60b9      	str	r1, [r7, #8]
 8004ad2:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d004      	beq.n	8004ae4 <HAL_SRAM_Init+0x1c>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	699b      	ldr	r3, [r3, #24]
 8004ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ae2:	d101      	bne.n	8004ae8 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e038      	b.n	8004b5a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d106      	bne.n	8004b02 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004afc:	68f8      	ldr	r0, [r7, #12]
 8004afe:	f7fd fc23 	bl	8002348 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4610      	mov	r0, r2
 8004b0e:	f000 fe57 	bl	80057c0 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	6818      	ldr	r0, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68b9      	ldr	r1, [r7, #8]
 8004b1e:	f000 feb9 	bl	8005894 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	6858      	ldr	r0, [r3, #4]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	689a      	ldr	r2, [r3, #8]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2e:	6879      	ldr	r1, [r7, #4]
 8004b30:	f000 fee4 	bl	80058fc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68fa      	ldr	r2, [r7, #12]
 8004b3a:	6892      	ldr	r2, [r2, #8]
 8004b3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	6892      	ldr	r2, [r2, #8]
 8004b48:	f041 0101 	orr.w	r1, r1, #1
 8004b4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	e041      	b.n	8004bf8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d106      	bne.n	8004b8e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f7fd fb49 	bl	8002220 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2202      	movs	r2, #2
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	3304      	adds	r3, #4
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	4610      	mov	r0, r2
 8004ba2:	f000 fac1 	bl	8005128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2201      	movs	r2, #1
 8004baa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3708      	adds	r7, #8
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b082      	sub	sp, #8
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d101      	bne.n	8004c12 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e041      	b.n	8004c96 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f839 	bl	8004c9e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	3304      	adds	r3, #4
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f000 fa72 	bl	8005128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004c9e:	b480      	push	{r7}
 8004ca0:	b083      	sub	sp, #12
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004ca6:	bf00      	nop
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d109      	bne.n	8004cd4 <HAL_TIM_PWM_Start+0x24>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	bf14      	ite	ne
 8004ccc:	2301      	movne	r3, #1
 8004cce:	2300      	moveq	r3, #0
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	e022      	b.n	8004d1a <HAL_TIM_PWM_Start+0x6a>
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	2b04      	cmp	r3, #4
 8004cd8:	d109      	bne.n	8004cee <HAL_TIM_PWM_Start+0x3e>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	bf14      	ite	ne
 8004ce6:	2301      	movne	r3, #1
 8004ce8:	2300      	moveq	r3, #0
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	e015      	b.n	8004d1a <HAL_TIM_PWM_Start+0x6a>
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b08      	cmp	r3, #8
 8004cf2:	d109      	bne.n	8004d08 <HAL_TIM_PWM_Start+0x58>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	bf14      	ite	ne
 8004d00:	2301      	movne	r3, #1
 8004d02:	2300      	moveq	r3, #0
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	e008      	b.n	8004d1a <HAL_TIM_PWM_Start+0x6a>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d0e:	b2db      	uxtb	r3, r3
 8004d10:	2b01      	cmp	r3, #1
 8004d12:	bf14      	ite	ne
 8004d14:	2301      	movne	r3, #1
 8004d16:	2300      	moveq	r3, #0
 8004d18:	b2db      	uxtb	r3, r3
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d001      	beq.n	8004d22 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e072      	b.n	8004e08 <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d104      	bne.n	8004d32 <HAL_TIM_PWM_Start+0x82>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2202      	movs	r2, #2
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d30:	e013      	b.n	8004d5a <HAL_TIM_PWM_Start+0xaa>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	2b04      	cmp	r3, #4
 8004d36:	d104      	bne.n	8004d42 <HAL_TIM_PWM_Start+0x92>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d40:	e00b      	b.n	8004d5a <HAL_TIM_PWM_Start+0xaa>
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d104      	bne.n	8004d52 <HAL_TIM_PWM_Start+0xa2>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d50:	e003      	b.n	8004d5a <HAL_TIM_PWM_Start+0xaa>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2202      	movs	r2, #2
 8004d56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	6839      	ldr	r1, [r7, #0]
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 fc9c 	bl	80056a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a28      	ldr	r2, [pc, #160]	; (8004e10 <HAL_TIM_PWM_Start+0x160>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d004      	beq.n	8004d7c <HAL_TIM_PWM_Start+0xcc>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a27      	ldr	r2, [pc, #156]	; (8004e14 <HAL_TIM_PWM_Start+0x164>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d101      	bne.n	8004d80 <HAL_TIM_PWM_Start+0xd0>
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e000      	b.n	8004d82 <HAL_TIM_PWM_Start+0xd2>
 8004d80:	2300      	movs	r3, #0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a1d      	ldr	r2, [pc, #116]	; (8004e10 <HAL_TIM_PWM_Start+0x160>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d018      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x122>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a1b      	ldr	r2, [pc, #108]	; (8004e14 <HAL_TIM_PWM_Start+0x164>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d013      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x122>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004db2:	d00e      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x122>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <HAL_TIM_PWM_Start+0x168>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d009      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x122>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a16      	ldr	r2, [pc, #88]	; (8004e1c <HAL_TIM_PWM_Start+0x16c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d004      	beq.n	8004dd2 <HAL_TIM_PWM_Start+0x122>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a14      	ldr	r2, [pc, #80]	; (8004e20 <HAL_TIM_PWM_Start+0x170>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d111      	bne.n	8004df6 <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2b06      	cmp	r3, #6
 8004de2:	d010      	beq.n	8004e06 <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0201 	orr.w	r2, r2, #1
 8004df2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df4:	e007      	b.n	8004e06 <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f042 0201 	orr.w	r2, r2, #1
 8004e04:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3710      	adds	r7, #16
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	40013400 	.word	0x40013400
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40000c00 	.word	0x40000c00

08004e24 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	60f8      	str	r0, [r7, #12]
 8004e2c:	60b9      	str	r1, [r7, #8]
 8004e2e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d101      	bne.n	8004e3e <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004e3a:	2302      	movs	r3, #2
 8004e3c:	e0ac      	b.n	8004f98 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	2201      	movs	r2, #1
 8004e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b0c      	cmp	r3, #12
 8004e4a:	f200 809f 	bhi.w	8004f8c <HAL_TIM_PWM_ConfigChannel+0x168>
 8004e4e:	a201      	add	r2, pc, #4	; (adr r2, 8004e54 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004e50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e54:	08004e89 	.word	0x08004e89
 8004e58:	08004f8d 	.word	0x08004f8d
 8004e5c:	08004f8d 	.word	0x08004f8d
 8004e60:	08004f8d 	.word	0x08004f8d
 8004e64:	08004ec9 	.word	0x08004ec9
 8004e68:	08004f8d 	.word	0x08004f8d
 8004e6c:	08004f8d 	.word	0x08004f8d
 8004e70:	08004f8d 	.word	0x08004f8d
 8004e74:	08004f0b 	.word	0x08004f0b
 8004e78:	08004f8d 	.word	0x08004f8d
 8004e7c:	08004f8d 	.word	0x08004f8d
 8004e80:	08004f8d 	.word	0x08004f8d
 8004e84:	08004f4b 	.word	0x08004f4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68b9      	ldr	r1, [r7, #8]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f000 f9c4 	bl	800521c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	699a      	ldr	r2, [r3, #24]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f042 0208 	orr.w	r2, r2, #8
 8004ea2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	699a      	ldr	r2, [r3, #24]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f022 0204 	bic.w	r2, r2, #4
 8004eb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	6999      	ldr	r1, [r3, #24]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	691a      	ldr	r2, [r3, #16]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	619a      	str	r2, [r3, #24]
      break;
 8004ec6:	e062      	b.n	8004f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fa14 	bl	80052fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	699a      	ldr	r2, [r3, #24]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699a      	ldr	r2, [r3, #24]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6999      	ldr	r1, [r3, #24]
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	021a      	lsls	r2, r3, #8
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	430a      	orrs	r2, r1
 8004f06:	619a      	str	r2, [r3, #24]
      break;
 8004f08:	e041      	b.n	8004f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68b9      	ldr	r1, [r7, #8]
 8004f10:	4618      	mov	r0, r3
 8004f12:	f000 fa67 	bl	80053e4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	69da      	ldr	r2, [r3, #28]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f042 0208 	orr.w	r2, r2, #8
 8004f24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	69da      	ldr	r2, [r3, #28]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0204 	bic.w	r2, r2, #4
 8004f34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	69d9      	ldr	r1, [r3, #28]
 8004f3c:	68bb      	ldr	r3, [r7, #8]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	430a      	orrs	r2, r1
 8004f46:	61da      	str	r2, [r3, #28]
      break;
 8004f48:	e021      	b.n	8004f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	68b9      	ldr	r1, [r7, #8]
 8004f50:	4618      	mov	r0, r3
 8004f52:	f000 fabb 	bl	80054cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	69da      	ldr	r2, [r3, #28]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	69da      	ldr	r2, [r3, #28]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	69d9      	ldr	r1, [r3, #28]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	691b      	ldr	r3, [r3, #16]
 8004f80:	021a      	lsls	r2, r3, #8
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	430a      	orrs	r2, r1
 8004f88:	61da      	str	r2, [r3, #28]
      break;
 8004f8a:	e000      	b.n	8004f8e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004f8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}

08004fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004fa0:	b580      	push	{r7, lr}
 8004fa2:	b084      	sub	sp, #16
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIM_ConfigClockSource+0x18>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e0b3      	b.n	8005120 <HAL_TIM_ConfigClockSource+0x180>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fde:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff0:	d03e      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0xd0>
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff6:	f200 8087 	bhi.w	8005108 <HAL_TIM_ConfigClockSource+0x168>
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	f000 8085 	beq.w	800510c <HAL_TIM_ConfigClockSource+0x16c>
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d87f      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x168>
 8005008:	2b70      	cmp	r3, #112	; 0x70
 800500a:	d01a      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0xa2>
 800500c:	2b70      	cmp	r3, #112	; 0x70
 800500e:	d87b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x168>
 8005010:	2b60      	cmp	r3, #96	; 0x60
 8005012:	d050      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x116>
 8005014:	2b60      	cmp	r3, #96	; 0x60
 8005016:	d877      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x168>
 8005018:	2b50      	cmp	r3, #80	; 0x50
 800501a:	d03c      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xf6>
 800501c:	2b50      	cmp	r3, #80	; 0x50
 800501e:	d873      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x168>
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d058      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x136>
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d86f      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x168>
 8005028:	2b30      	cmp	r3, #48	; 0x30
 800502a:	d064      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x156>
 800502c:	2b30      	cmp	r3, #48	; 0x30
 800502e:	d86b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x168>
 8005030:	2b20      	cmp	r3, #32
 8005032:	d060      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x156>
 8005034:	2b20      	cmp	r3, #32
 8005036:	d867      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x168>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d05c      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x156>
 800503c:	2b10      	cmp	r3, #16
 800503e:	d05a      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005040:	e062      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6899      	ldr	r1, [r3, #8]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f000 fb06 	bl	8005662 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005064:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	609a      	str	r2, [r3, #8]
      break;
 800506e:	e04e      	b.n	800510e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6899      	ldr	r1, [r3, #8]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f000 faef 	bl	8005662 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005092:	609a      	str	r2, [r3, #8]
      break;
 8005094:	e03b      	b.n	800510e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f000 fa66 	bl	8005574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2150      	movs	r1, #80	; 0x50
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 fabd 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 80050b4:	e02b      	b.n	800510e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 fa84 	bl	80055d0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2160      	movs	r1, #96	; 0x60
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 faad 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 80050d4:	e01b      	b.n	800510e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 fa46 	bl	8005574 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2140      	movs	r1, #64	; 0x40
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fa9d 	bl	800562e <TIM_ITRx_SetConfig>
      break;
 80050f4:	e00b      	b.n	800510e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4619      	mov	r1, r3
 8005100:	4610      	mov	r0, r2
 8005102:	f000 fa94 	bl	800562e <TIM_ITRx_SetConfig>
        break;
 8005106:	e002      	b.n	800510e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005108:	bf00      	nop
 800510a:	e000      	b.n	800510e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800510c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2201      	movs	r2, #1
 8005112:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3710      	adds	r7, #16
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}

08005128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	4a33      	ldr	r2, [pc, #204]	; (8005208 <TIM_Base_SetConfig+0xe0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d013      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	4a32      	ldr	r2, [pc, #200]	; (800520c <TIM_Base_SetConfig+0xe4>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d00f      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514e:	d00b      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a2f      	ldr	r2, [pc, #188]	; (8005210 <TIM_Base_SetConfig+0xe8>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a2e      	ldr	r2, [pc, #184]	; (8005214 <TIM_Base_SetConfig+0xec>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0x40>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a2d      	ldr	r2, [pc, #180]	; (8005218 <TIM_Base_SetConfig+0xf0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d108      	bne.n	800517a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	4313      	orrs	r3, r2
 8005178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a22      	ldr	r2, [pc, #136]	; (8005208 <TIM_Base_SetConfig+0xe0>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <TIM_Base_SetConfig+0x82>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a21      	ldr	r2, [pc, #132]	; (800520c <TIM_Base_SetConfig+0xe4>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00f      	beq.n	80051aa <TIM_Base_SetConfig+0x82>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005190:	d00b      	beq.n	80051aa <TIM_Base_SetConfig+0x82>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a1e      	ldr	r2, [pc, #120]	; (8005210 <TIM_Base_SetConfig+0xe8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d007      	beq.n	80051aa <TIM_Base_SetConfig+0x82>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	4a1d      	ldr	r2, [pc, #116]	; (8005214 <TIM_Base_SetConfig+0xec>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d003      	beq.n	80051aa <TIM_Base_SetConfig+0x82>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	4a1c      	ldr	r2, [pc, #112]	; (8005218 <TIM_Base_SetConfig+0xf0>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d108      	bne.n	80051bc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	68db      	ldr	r3, [r3, #12]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	695b      	ldr	r3, [r3, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	68fa      	ldr	r2, [r7, #12]
 80051ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	689a      	ldr	r2, [r3, #8]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	4a09      	ldr	r2, [pc, #36]	; (8005208 <TIM_Base_SetConfig+0xe0>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d003      	beq.n	80051f0 <TIM_Base_SetConfig+0xc8>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a08      	ldr	r2, [pc, #32]	; (800520c <TIM_Base_SetConfig+0xe4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d103      	bne.n	80051f8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	691a      	ldr	r2, [r3, #16]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	615a      	str	r2, [r3, #20]
}
 80051fe:	bf00      	nop
 8005200:	3714      	adds	r7, #20
 8005202:	46bd      	mov	sp, r7
 8005204:	bc80      	pop	{r7}
 8005206:	4770      	bx	lr
 8005208:	40012c00 	.word	0x40012c00
 800520c:	40013400 	.word	0x40013400
 8005210:	40000400 	.word	0x40000400
 8005214:	40000800 	.word	0x40000800
 8005218:	40000c00 	.word	0x40000c00

0800521c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800521c:	b480      	push	{r7}
 800521e:	b087      	sub	sp, #28
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f023 0201 	bic.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800524a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f023 0303 	bic.w	r3, r3, #3
 8005252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	68fa      	ldr	r2, [r7, #12]
 800525a:	4313      	orrs	r3, r2
 800525c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	f023 0302 	bic.w	r3, r3, #2
 8005264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	697a      	ldr	r2, [r7, #20]
 800526c:	4313      	orrs	r3, r2
 800526e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a20      	ldr	r2, [pc, #128]	; (80052f4 <TIM_OC1_SetConfig+0xd8>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d003      	beq.n	8005280 <TIM_OC1_SetConfig+0x64>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <TIM_OC1_SetConfig+0xdc>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d10c      	bne.n	800529a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	f023 0308 	bic.w	r3, r3, #8
 8005286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	68db      	ldr	r3, [r3, #12]
 800528c:	697a      	ldr	r2, [r7, #20]
 800528e:	4313      	orrs	r3, r2
 8005290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	f023 0304 	bic.w	r3, r3, #4
 8005298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	4a15      	ldr	r2, [pc, #84]	; (80052f4 <TIM_OC1_SetConfig+0xd8>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d003      	beq.n	80052aa <TIM_OC1_SetConfig+0x8e>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <TIM_OC1_SetConfig+0xdc>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d111      	bne.n	80052ce <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	695b      	ldr	r3, [r3, #20]
 80052be:	693a      	ldr	r2, [r7, #16]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	699b      	ldr	r3, [r3, #24]
 80052c8:	693a      	ldr	r2, [r7, #16]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	693a      	ldr	r2, [r7, #16]
 80052d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	68fa      	ldr	r2, [r7, #12]
 80052d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	621a      	str	r2, [r3, #32]
}
 80052e8:	bf00      	nop
 80052ea:	371c      	adds	r7, #28
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr
 80052f2:	bf00      	nop
 80052f4:	40012c00 	.word	0x40012c00
 80052f8:	40013400 	.word	0x40013400

080052fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b087      	sub	sp, #28
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
 8005304:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a1b      	ldr	r3, [r3, #32]
 800530a:	f023 0210 	bic.w	r2, r3, #16
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a1b      	ldr	r3, [r3, #32]
 8005316:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	699b      	ldr	r3, [r3, #24]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800532a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005332:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	4313      	orrs	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f023 0320 	bic.w	r3, r3, #32
 8005346:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689b      	ldr	r3, [r3, #8]
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	697a      	ldr	r2, [r7, #20]
 8005350:	4313      	orrs	r3, r2
 8005352:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a21      	ldr	r2, [pc, #132]	; (80053dc <TIM_OC2_SetConfig+0xe0>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d003      	beq.n	8005364 <TIM_OC2_SetConfig+0x68>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a20      	ldr	r2, [pc, #128]	; (80053e0 <TIM_OC2_SetConfig+0xe4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d10d      	bne.n	8005380 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800536a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	011b      	lsls	r3, r3, #4
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	4313      	orrs	r3, r2
 8005376:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005378:	697b      	ldr	r3, [r7, #20]
 800537a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800537e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a16      	ldr	r2, [pc, #88]	; (80053dc <TIM_OC2_SetConfig+0xe0>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d003      	beq.n	8005390 <TIM_OC2_SetConfig+0x94>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <TIM_OC2_SetConfig+0xe4>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d113      	bne.n	80053b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005396:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005398:	693b      	ldr	r3, [r7, #16]
 800539a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800539e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	4313      	orrs	r3, r2
 80053aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	68fa      	ldr	r2, [r7, #12]
 80053c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	685a      	ldr	r2, [r3, #4]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	697a      	ldr	r2, [r7, #20]
 80053d0:	621a      	str	r2, [r3, #32]
}
 80053d2:	bf00      	nop
 80053d4:	371c      	adds	r7, #28
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bc80      	pop	{r7}
 80053da:	4770      	bx	lr
 80053dc:	40012c00 	.word	0x40012c00
 80053e0:	40013400 	.word	0x40013400

080053e4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a1b      	ldr	r3, [r3, #32]
 80053fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	69db      	ldr	r3, [r3, #28]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800542c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a21      	ldr	r2, [pc, #132]	; (80054c4 <TIM_OC3_SetConfig+0xe0>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_OC3_SetConfig+0x66>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a20      	ldr	r2, [pc, #128]	; (80054c8 <TIM_OC3_SetConfig+0xe4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d10d      	bne.n	8005466 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a16      	ldr	r2, [pc, #88]	; (80054c4 <TIM_OC3_SetConfig+0xe0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d003      	beq.n	8005476 <TIM_OC3_SetConfig+0x92>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a15      	ldr	r2, [pc, #84]	; (80054c8 <TIM_OC3_SetConfig+0xe4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d113      	bne.n	800549e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800547c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800547e:	693b      	ldr	r3, [r7, #16]
 8005480:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005484:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	695b      	ldr	r3, [r3, #20]
 800548a:	011b      	lsls	r3, r3, #4
 800548c:	693a      	ldr	r2, [r7, #16]
 800548e:	4313      	orrs	r3, r2
 8005490:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	699b      	ldr	r3, [r3, #24]
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	693a      	ldr	r2, [r7, #16]
 800549a:	4313      	orrs	r3, r2
 800549c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	68fa      	ldr	r2, [r7, #12]
 80054a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	685a      	ldr	r2, [r3, #4]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	697a      	ldr	r2, [r7, #20]
 80054b6:	621a      	str	r2, [r3, #32]
}
 80054b8:	bf00      	nop
 80054ba:	371c      	adds	r7, #28
 80054bc:	46bd      	mov	sp, r7
 80054be:	bc80      	pop	{r7}
 80054c0:	4770      	bx	lr
 80054c2:	bf00      	nop
 80054c4:	40012c00 	.word	0x40012c00
 80054c8:	40013400 	.word	0x40013400

080054cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69db      	ldr	r3, [r3, #28]
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	021b      	lsls	r3, r3, #8
 800550a:	68fa      	ldr	r2, [r7, #12]
 800550c:	4313      	orrs	r3, r2
 800550e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005510:	693b      	ldr	r3, [r7, #16]
 8005512:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	031b      	lsls	r3, r3, #12
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	4313      	orrs	r3, r2
 8005522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	4a11      	ldr	r2, [pc, #68]	; (800556c <TIM_OC4_SetConfig+0xa0>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d003      	beq.n	8005534 <TIM_OC4_SetConfig+0x68>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	4a10      	ldr	r2, [pc, #64]	; (8005570 <TIM_OC4_SetConfig+0xa4>)
 8005530:	4293      	cmp	r3, r2
 8005532:	d109      	bne.n	8005548 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800553a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	697a      	ldr	r2, [r7, #20]
 8005544:	4313      	orrs	r3, r2
 8005546:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	68fa      	ldr	r2, [r7, #12]
 8005552:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	693a      	ldr	r2, [r7, #16]
 8005560:	621a      	str	r2, [r3, #32]
}
 8005562:	bf00      	nop
 8005564:	371c      	adds	r7, #28
 8005566:	46bd      	mov	sp, r7
 8005568:	bc80      	pop	{r7}
 800556a:	4770      	bx	lr
 800556c:	40012c00 	.word	0x40012c00
 8005570:	40013400 	.word	0x40013400

08005574 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	f023 0201 	bic.w	r2, r3, #1
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800559e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	011b      	lsls	r3, r3, #4
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	f023 030a 	bic.w	r3, r3, #10
 80055b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055b2:	697a      	ldr	r2, [r7, #20]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	693a      	ldr	r2, [r7, #16]
 80055be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bc80      	pop	{r7}
 80055ce:	4770      	bx	lr

080055d0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b087      	sub	sp, #28
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6a1b      	ldr	r3, [r3, #32]
 80055e0:	f023 0210 	bic.w	r2, r3, #16
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	031b      	lsls	r3, r3, #12
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	4313      	orrs	r3, r2
 8005604:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800560c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	693a      	ldr	r2, [r7, #16]
 8005614:	4313      	orrs	r3, r2
 8005616:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	621a      	str	r2, [r3, #32]
}
 8005624:	bf00      	nop
 8005626:	371c      	adds	r7, #28
 8005628:	46bd      	mov	sp, r7
 800562a:	bc80      	pop	{r7}
 800562c:	4770      	bx	lr

0800562e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800562e:	b480      	push	{r7}
 8005630:	b085      	sub	sp, #20
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
 8005636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005646:	683a      	ldr	r2, [r7, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	4313      	orrs	r3, r2
 800564c:	f043 0307 	orr.w	r3, r3, #7
 8005650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	68fa      	ldr	r2, [r7, #12]
 8005656:	609a      	str	r2, [r3, #8]
}
 8005658:	bf00      	nop
 800565a:	3714      	adds	r7, #20
 800565c:	46bd      	mov	sp, r7
 800565e:	bc80      	pop	{r7}
 8005660:	4770      	bx	lr

08005662 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005662:	b480      	push	{r7}
 8005664:	b087      	sub	sp, #28
 8005666:	af00      	add	r7, sp, #0
 8005668:	60f8      	str	r0, [r7, #12]
 800566a:	60b9      	str	r1, [r7, #8]
 800566c:	607a      	str	r2, [r7, #4]
 800566e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800567c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	021a      	lsls	r2, r3, #8
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	431a      	orrs	r2, r3
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4313      	orrs	r3, r2
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	4313      	orrs	r3, r2
 800568e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	609a      	str	r2, [r3, #8]
}
 8005696:	bf00      	nop
 8005698:	371c      	adds	r7, #28
 800569a:	46bd      	mov	sp, r7
 800569c:	bc80      	pop	{r7}
 800569e:	4770      	bx	lr

080056a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80056ac:	68bb      	ldr	r3, [r7, #8]
 80056ae:	f003 031f 	and.w	r3, r3, #31
 80056b2:	2201      	movs	r2, #1
 80056b4:	fa02 f303 	lsl.w	r3, r2, r3
 80056b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6a1a      	ldr	r2, [r3, #32]
 80056be:	697b      	ldr	r3, [r7, #20]
 80056c0:	43db      	mvns	r3, r3
 80056c2:	401a      	ands	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6a1a      	ldr	r2, [r3, #32]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	f003 031f 	and.w	r3, r3, #31
 80056d2:	6879      	ldr	r1, [r7, #4]
 80056d4:	fa01 f303 	lsl.w	r3, r1, r3
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	621a      	str	r2, [r3, #32]
}
 80056de:	bf00      	nop
 80056e0:	371c      	adds	r7, #28
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bc80      	pop	{r7}
 80056e6:	4770      	bx	lr

080056e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
 80056f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	d101      	bne.n	8005700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056fc:	2302      	movs	r3, #2
 80056fe:	e050      	b.n	80057a2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2202      	movs	r2, #2
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005726:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	4313      	orrs	r3, r2
 8005730:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	68fa      	ldr	r2, [r7, #12]
 8005738:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a1b      	ldr	r2, [pc, #108]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d018      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a19      	ldr	r2, [pc, #100]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d013      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005756:	d00e      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a15      	ldr	r2, [pc, #84]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d009      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a14      	ldr	r2, [pc, #80]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d004      	beq.n	8005776 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	4a12      	ldr	r2, [pc, #72]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d10c      	bne.n	8005790 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800577c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	4313      	orrs	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68ba      	ldr	r2, [r7, #8]
 800578e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2200      	movs	r2, #0
 800579c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057a0:	2300      	movs	r3, #0
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bc80      	pop	{r7}
 80057aa:	4770      	bx	lr
 80057ac:	40012c00 	.word	0x40012c00
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40000400 	.word	0x40000400
 80057b8:	40000800 	.word	0x40000800
 80057bc:	40000c00 	.word	0x40000c00

080057c0 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
 80057c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d4:	683a      	ldr	r2, [r7, #0]
 80057d6:	6812      	ldr	r2, [r2, #0]
 80057d8:	f023 0101 	bic.w	r1, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	689b      	ldr	r3, [r3, #8]
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d102      	bne.n	80057f0 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80057ea:	2340      	movs	r3, #64	; 0x40
 80057ec:	617b      	str	r3, [r7, #20]
 80057ee:	e001      	b.n	80057f4 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80057f0:	2300      	movs	r3, #0
 80057f2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80057fc:	683b      	ldr	r3, [r7, #0]
 80057fe:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005800:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005806:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005808:	683b      	ldr	r3, [r7, #0]
 800580a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800580c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8005812:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005818:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800581e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8005824:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800582a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8005830:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 8005836:	4313      	orrs	r3, r2
 8005838:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	693a      	ldr	r2, [r7, #16]
 8005840:	4313      	orrs	r3, r2
 8005842:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005848:	693a      	ldr	r2, [r7, #16]
 800584a:	4313      	orrs	r3, r2
 800584c:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 800584e:	4b10      	ldr	r3, [pc, #64]	; (8005890 <FSMC_NORSRAM_Init+0xd0>)
 8005850:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005858:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8005860:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	43db      	mvns	r3, r3
 8005870:	ea02 0103 	and.w	r1, r2, r3
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	693b      	ldr	r3, [r7, #16]
 800587a:	4319      	orrs	r1, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 8005882:	2300      	movs	r3, #0
}
 8005884:	4618      	mov	r0, r3
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	bc80      	pop	{r7}
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	0008fb7f 	.word	0x0008fb7f

08005894 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058aa:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	011b      	lsls	r3, r3, #4
 80058b8:	431a      	orrs	r2, r3
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	021b      	lsls	r3, r3, #8
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	041b      	lsls	r3, r3, #16
 80058c8:	431a      	orrs	r2, r3
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	691b      	ldr	r3, [r3, #16]
 80058ce:	3b01      	subs	r3, #1
 80058d0:	051b      	lsls	r3, r3, #20
 80058d2:	431a      	orrs	r2, r3
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	695b      	ldr	r3, [r3, #20]
 80058d8:	3b02      	subs	r3, #2
 80058da:	061b      	lsls	r3, r3, #24
 80058dc:	431a      	orrs	r2, r3
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	699b      	ldr	r3, [r3, #24]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	3201      	adds	r2, #1
 80058e8:	4319      	orrs	r1, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 80058f0:	2300      	movs	r3, #0
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	3714      	adds	r7, #20
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005910:	d11d      	bne.n	800594e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	687a      	ldr	r2, [r7, #4]
 8005916:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800591a:	4b13      	ldr	r3, [pc, #76]	; (8005968 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800591c:	4013      	ands	r3, r2
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	6811      	ldr	r1, [r2, #0]
 8005922:	68ba      	ldr	r2, [r7, #8]
 8005924:	6852      	ldr	r2, [r2, #4]
 8005926:	0112      	lsls	r2, r2, #4
 8005928:	4311      	orrs	r1, r2
 800592a:	68ba      	ldr	r2, [r7, #8]
 800592c:	6892      	ldr	r2, [r2, #8]
 800592e:	0212      	lsls	r2, r2, #8
 8005930:	4311      	orrs	r1, r2
 8005932:	68ba      	ldr	r2, [r7, #8]
 8005934:	6992      	ldr	r2, [r2, #24]
 8005936:	4311      	orrs	r1, r2
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	68d2      	ldr	r2, [r2, #12]
 800593c:	0412      	lsls	r2, r2, #16
 800593e:	430a      	orrs	r2, r1
 8005940:	ea43 0102 	orr.w	r1, r3, r2
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800594c:	e005      	b.n	800595a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8005956:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800595a:	2300      	movs	r3, #0
}
 800595c:	4618      	mov	r0, r3
 800595e:	3714      	adds	r7, #20
 8005960:	46bd      	mov	sp, r7
 8005962:	bc80      	pop	{r7}
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop
 8005968:	cff00000 	.word	0xcff00000

0800596c <__errno>:
 800596c:	4b01      	ldr	r3, [pc, #4]	; (8005974 <__errno+0x8>)
 800596e:	6818      	ldr	r0, [r3, #0]
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	20000068 	.word	0x20000068

08005978 <__libc_init_array>:
 8005978:	b570      	push	{r4, r5, r6, lr}
 800597a:	2600      	movs	r6, #0
 800597c:	4d0c      	ldr	r5, [pc, #48]	; (80059b0 <__libc_init_array+0x38>)
 800597e:	4c0d      	ldr	r4, [pc, #52]	; (80059b4 <__libc_init_array+0x3c>)
 8005980:	1b64      	subs	r4, r4, r5
 8005982:	10a4      	asrs	r4, r4, #2
 8005984:	42a6      	cmp	r6, r4
 8005986:	d109      	bne.n	800599c <__libc_init_array+0x24>
 8005988:	f000 fcb0 	bl	80062ec <_init>
 800598c:	2600      	movs	r6, #0
 800598e:	4d0a      	ldr	r5, [pc, #40]	; (80059b8 <__libc_init_array+0x40>)
 8005990:	4c0a      	ldr	r4, [pc, #40]	; (80059bc <__libc_init_array+0x44>)
 8005992:	1b64      	subs	r4, r4, r5
 8005994:	10a4      	asrs	r4, r4, #2
 8005996:	42a6      	cmp	r6, r4
 8005998:	d105      	bne.n	80059a6 <__libc_init_array+0x2e>
 800599a:	bd70      	pop	{r4, r5, r6, pc}
 800599c:	f855 3b04 	ldr.w	r3, [r5], #4
 80059a0:	4798      	blx	r3
 80059a2:	3601      	adds	r6, #1
 80059a4:	e7ee      	b.n	8005984 <__libc_init_array+0xc>
 80059a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059aa:	4798      	blx	r3
 80059ac:	3601      	adds	r6, #1
 80059ae:	e7f2      	b.n	8005996 <__libc_init_array+0x1e>
 80059b0:	0803dd8c 	.word	0x0803dd8c
 80059b4:	0803dd8c 	.word	0x0803dd8c
 80059b8:	0803dd8c 	.word	0x0803dd8c
 80059bc:	0803dd90 	.word	0x0803dd90

080059c0 <memset>:
 80059c0:	4603      	mov	r3, r0
 80059c2:	4402      	add	r2, r0
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d100      	bne.n	80059ca <memset+0xa>
 80059c8:	4770      	bx	lr
 80059ca:	f803 1b01 	strb.w	r1, [r3], #1
 80059ce:	e7f9      	b.n	80059c4 <memset+0x4>

080059d0 <sniprintf>:
 80059d0:	b40c      	push	{r2, r3}
 80059d2:	b530      	push	{r4, r5, lr}
 80059d4:	4b17      	ldr	r3, [pc, #92]	; (8005a34 <sniprintf+0x64>)
 80059d6:	1e0c      	subs	r4, r1, #0
 80059d8:	681d      	ldr	r5, [r3, #0]
 80059da:	b09d      	sub	sp, #116	; 0x74
 80059dc:	da08      	bge.n	80059f0 <sniprintf+0x20>
 80059de:	238b      	movs	r3, #139	; 0x8b
 80059e0:	f04f 30ff 	mov.w	r0, #4294967295
 80059e4:	602b      	str	r3, [r5, #0]
 80059e6:	b01d      	add	sp, #116	; 0x74
 80059e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80059ec:	b002      	add	sp, #8
 80059ee:	4770      	bx	lr
 80059f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80059f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80059f8:	bf0c      	ite	eq
 80059fa:	4623      	moveq	r3, r4
 80059fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005a00:	9304      	str	r3, [sp, #16]
 8005a02:	9307      	str	r3, [sp, #28]
 8005a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a08:	9002      	str	r0, [sp, #8]
 8005a0a:	9006      	str	r0, [sp, #24]
 8005a0c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a10:	4628      	mov	r0, r5
 8005a12:	ab21      	add	r3, sp, #132	; 0x84
 8005a14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a16:	a902      	add	r1, sp, #8
 8005a18:	9301      	str	r3, [sp, #4]
 8005a1a:	f000 f869 	bl	8005af0 <_svfiprintf_r>
 8005a1e:	1c43      	adds	r3, r0, #1
 8005a20:	bfbc      	itt	lt
 8005a22:	238b      	movlt	r3, #139	; 0x8b
 8005a24:	602b      	strlt	r3, [r5, #0]
 8005a26:	2c00      	cmp	r4, #0
 8005a28:	d0dd      	beq.n	80059e6 <sniprintf+0x16>
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	9b02      	ldr	r3, [sp, #8]
 8005a2e:	701a      	strb	r2, [r3, #0]
 8005a30:	e7d9      	b.n	80059e6 <sniprintf+0x16>
 8005a32:	bf00      	nop
 8005a34:	20000068 	.word	0x20000068

08005a38 <__ssputs_r>:
 8005a38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a3c:	688e      	ldr	r6, [r1, #8]
 8005a3e:	4682      	mov	sl, r0
 8005a40:	429e      	cmp	r6, r3
 8005a42:	460c      	mov	r4, r1
 8005a44:	4690      	mov	r8, r2
 8005a46:	461f      	mov	r7, r3
 8005a48:	d838      	bhi.n	8005abc <__ssputs_r+0x84>
 8005a4a:	898a      	ldrh	r2, [r1, #12]
 8005a4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005a50:	d032      	beq.n	8005ab8 <__ssputs_r+0x80>
 8005a52:	6825      	ldr	r5, [r4, #0]
 8005a54:	6909      	ldr	r1, [r1, #16]
 8005a56:	3301      	adds	r3, #1
 8005a58:	eba5 0901 	sub.w	r9, r5, r1
 8005a5c:	6965      	ldr	r5, [r4, #20]
 8005a5e:	444b      	add	r3, r9
 8005a60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005a64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005a68:	106d      	asrs	r5, r5, #1
 8005a6a:	429d      	cmp	r5, r3
 8005a6c:	bf38      	it	cc
 8005a6e:	461d      	movcc	r5, r3
 8005a70:	0553      	lsls	r3, r2, #21
 8005a72:	d531      	bpl.n	8005ad8 <__ssputs_r+0xa0>
 8005a74:	4629      	mov	r1, r5
 8005a76:	f000 fb6f 	bl	8006158 <_malloc_r>
 8005a7a:	4606      	mov	r6, r0
 8005a7c:	b950      	cbnz	r0, 8005a94 <__ssputs_r+0x5c>
 8005a7e:	230c      	movs	r3, #12
 8005a80:	f04f 30ff 	mov.w	r0, #4294967295
 8005a84:	f8ca 3000 	str.w	r3, [sl]
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a8e:	81a3      	strh	r3, [r4, #12]
 8005a90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a94:	464a      	mov	r2, r9
 8005a96:	6921      	ldr	r1, [r4, #16]
 8005a98:	f000 face 	bl	8006038 <memcpy>
 8005a9c:	89a3      	ldrh	r3, [r4, #12]
 8005a9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005aa2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005aa6:	81a3      	strh	r3, [r4, #12]
 8005aa8:	6126      	str	r6, [r4, #16]
 8005aaa:	444e      	add	r6, r9
 8005aac:	6026      	str	r6, [r4, #0]
 8005aae:	463e      	mov	r6, r7
 8005ab0:	6165      	str	r5, [r4, #20]
 8005ab2:	eba5 0509 	sub.w	r5, r5, r9
 8005ab6:	60a5      	str	r5, [r4, #8]
 8005ab8:	42be      	cmp	r6, r7
 8005aba:	d900      	bls.n	8005abe <__ssputs_r+0x86>
 8005abc:	463e      	mov	r6, r7
 8005abe:	4632      	mov	r2, r6
 8005ac0:	4641      	mov	r1, r8
 8005ac2:	6820      	ldr	r0, [r4, #0]
 8005ac4:	f000 fac6 	bl	8006054 <memmove>
 8005ac8:	68a3      	ldr	r3, [r4, #8]
 8005aca:	2000      	movs	r0, #0
 8005acc:	1b9b      	subs	r3, r3, r6
 8005ace:	60a3      	str	r3, [r4, #8]
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	4433      	add	r3, r6
 8005ad4:	6023      	str	r3, [r4, #0]
 8005ad6:	e7db      	b.n	8005a90 <__ssputs_r+0x58>
 8005ad8:	462a      	mov	r2, r5
 8005ada:	f000 fbb1 	bl	8006240 <_realloc_r>
 8005ade:	4606      	mov	r6, r0
 8005ae0:	2800      	cmp	r0, #0
 8005ae2:	d1e1      	bne.n	8005aa8 <__ssputs_r+0x70>
 8005ae4:	4650      	mov	r0, sl
 8005ae6:	6921      	ldr	r1, [r4, #16]
 8005ae8:	f000 face 	bl	8006088 <_free_r>
 8005aec:	e7c7      	b.n	8005a7e <__ssputs_r+0x46>
	...

08005af0 <_svfiprintf_r>:
 8005af0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af4:	4698      	mov	r8, r3
 8005af6:	898b      	ldrh	r3, [r1, #12]
 8005af8:	4607      	mov	r7, r0
 8005afa:	061b      	lsls	r3, r3, #24
 8005afc:	460d      	mov	r5, r1
 8005afe:	4614      	mov	r4, r2
 8005b00:	b09d      	sub	sp, #116	; 0x74
 8005b02:	d50e      	bpl.n	8005b22 <_svfiprintf_r+0x32>
 8005b04:	690b      	ldr	r3, [r1, #16]
 8005b06:	b963      	cbnz	r3, 8005b22 <_svfiprintf_r+0x32>
 8005b08:	2140      	movs	r1, #64	; 0x40
 8005b0a:	f000 fb25 	bl	8006158 <_malloc_r>
 8005b0e:	6028      	str	r0, [r5, #0]
 8005b10:	6128      	str	r0, [r5, #16]
 8005b12:	b920      	cbnz	r0, 8005b1e <_svfiprintf_r+0x2e>
 8005b14:	230c      	movs	r3, #12
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	f04f 30ff 	mov.w	r0, #4294967295
 8005b1c:	e0d1      	b.n	8005cc2 <_svfiprintf_r+0x1d2>
 8005b1e:	2340      	movs	r3, #64	; 0x40
 8005b20:	616b      	str	r3, [r5, #20]
 8005b22:	2300      	movs	r3, #0
 8005b24:	9309      	str	r3, [sp, #36]	; 0x24
 8005b26:	2320      	movs	r3, #32
 8005b28:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005b2c:	2330      	movs	r3, #48	; 0x30
 8005b2e:	f04f 0901 	mov.w	r9, #1
 8005b32:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b36:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005cdc <_svfiprintf_r+0x1ec>
 8005b3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005b3e:	4623      	mov	r3, r4
 8005b40:	469a      	mov	sl, r3
 8005b42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005b46:	b10a      	cbz	r2, 8005b4c <_svfiprintf_r+0x5c>
 8005b48:	2a25      	cmp	r2, #37	; 0x25
 8005b4a:	d1f9      	bne.n	8005b40 <_svfiprintf_r+0x50>
 8005b4c:	ebba 0b04 	subs.w	fp, sl, r4
 8005b50:	d00b      	beq.n	8005b6a <_svfiprintf_r+0x7a>
 8005b52:	465b      	mov	r3, fp
 8005b54:	4622      	mov	r2, r4
 8005b56:	4629      	mov	r1, r5
 8005b58:	4638      	mov	r0, r7
 8005b5a:	f7ff ff6d 	bl	8005a38 <__ssputs_r>
 8005b5e:	3001      	adds	r0, #1
 8005b60:	f000 80aa 	beq.w	8005cb8 <_svfiprintf_r+0x1c8>
 8005b64:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b66:	445a      	add	r2, fp
 8005b68:	9209      	str	r2, [sp, #36]	; 0x24
 8005b6a:	f89a 3000 	ldrb.w	r3, [sl]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 80a2 	beq.w	8005cb8 <_svfiprintf_r+0x1c8>
 8005b74:	2300      	movs	r3, #0
 8005b76:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005b7e:	f10a 0a01 	add.w	sl, sl, #1
 8005b82:	9304      	str	r3, [sp, #16]
 8005b84:	9307      	str	r3, [sp, #28]
 8005b86:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005b8a:	931a      	str	r3, [sp, #104]	; 0x68
 8005b8c:	4654      	mov	r4, sl
 8005b8e:	2205      	movs	r2, #5
 8005b90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b94:	4851      	ldr	r0, [pc, #324]	; (8005cdc <_svfiprintf_r+0x1ec>)
 8005b96:	f000 fa41 	bl	800601c <memchr>
 8005b9a:	9a04      	ldr	r2, [sp, #16]
 8005b9c:	b9d8      	cbnz	r0, 8005bd6 <_svfiprintf_r+0xe6>
 8005b9e:	06d0      	lsls	r0, r2, #27
 8005ba0:	bf44      	itt	mi
 8005ba2:	2320      	movmi	r3, #32
 8005ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ba8:	0711      	lsls	r1, r2, #28
 8005baa:	bf44      	itt	mi
 8005bac:	232b      	movmi	r3, #43	; 0x2b
 8005bae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005bb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005bb6:	2b2a      	cmp	r3, #42	; 0x2a
 8005bb8:	d015      	beq.n	8005be6 <_svfiprintf_r+0xf6>
 8005bba:	4654      	mov	r4, sl
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f04f 0c0a 	mov.w	ip, #10
 8005bc2:	9a07      	ldr	r2, [sp, #28]
 8005bc4:	4621      	mov	r1, r4
 8005bc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005bca:	3b30      	subs	r3, #48	; 0x30
 8005bcc:	2b09      	cmp	r3, #9
 8005bce:	d94e      	bls.n	8005c6e <_svfiprintf_r+0x17e>
 8005bd0:	b1b0      	cbz	r0, 8005c00 <_svfiprintf_r+0x110>
 8005bd2:	9207      	str	r2, [sp, #28]
 8005bd4:	e014      	b.n	8005c00 <_svfiprintf_r+0x110>
 8005bd6:	eba0 0308 	sub.w	r3, r0, r8
 8005bda:	fa09 f303 	lsl.w	r3, r9, r3
 8005bde:	4313      	orrs	r3, r2
 8005be0:	46a2      	mov	sl, r4
 8005be2:	9304      	str	r3, [sp, #16]
 8005be4:	e7d2      	b.n	8005b8c <_svfiprintf_r+0x9c>
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	1d19      	adds	r1, r3, #4
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	9103      	str	r1, [sp, #12]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	bfbb      	ittet	lt
 8005bf2:	425b      	neglt	r3, r3
 8005bf4:	f042 0202 	orrlt.w	r2, r2, #2
 8005bf8:	9307      	strge	r3, [sp, #28]
 8005bfa:	9307      	strlt	r3, [sp, #28]
 8005bfc:	bfb8      	it	lt
 8005bfe:	9204      	strlt	r2, [sp, #16]
 8005c00:	7823      	ldrb	r3, [r4, #0]
 8005c02:	2b2e      	cmp	r3, #46	; 0x2e
 8005c04:	d10c      	bne.n	8005c20 <_svfiprintf_r+0x130>
 8005c06:	7863      	ldrb	r3, [r4, #1]
 8005c08:	2b2a      	cmp	r3, #42	; 0x2a
 8005c0a:	d135      	bne.n	8005c78 <_svfiprintf_r+0x188>
 8005c0c:	9b03      	ldr	r3, [sp, #12]
 8005c0e:	3402      	adds	r4, #2
 8005c10:	1d1a      	adds	r2, r3, #4
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	9203      	str	r2, [sp, #12]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	bfb8      	it	lt
 8005c1a:	f04f 33ff 	movlt.w	r3, #4294967295
 8005c1e:	9305      	str	r3, [sp, #20]
 8005c20:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005ce0 <_svfiprintf_r+0x1f0>
 8005c24:	2203      	movs	r2, #3
 8005c26:	4650      	mov	r0, sl
 8005c28:	7821      	ldrb	r1, [r4, #0]
 8005c2a:	f000 f9f7 	bl	800601c <memchr>
 8005c2e:	b140      	cbz	r0, 8005c42 <_svfiprintf_r+0x152>
 8005c30:	2340      	movs	r3, #64	; 0x40
 8005c32:	eba0 000a 	sub.w	r0, r0, sl
 8005c36:	fa03 f000 	lsl.w	r0, r3, r0
 8005c3a:	9b04      	ldr	r3, [sp, #16]
 8005c3c:	3401      	adds	r4, #1
 8005c3e:	4303      	orrs	r3, r0
 8005c40:	9304      	str	r3, [sp, #16]
 8005c42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c46:	2206      	movs	r2, #6
 8005c48:	4826      	ldr	r0, [pc, #152]	; (8005ce4 <_svfiprintf_r+0x1f4>)
 8005c4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005c4e:	f000 f9e5 	bl	800601c <memchr>
 8005c52:	2800      	cmp	r0, #0
 8005c54:	d038      	beq.n	8005cc8 <_svfiprintf_r+0x1d8>
 8005c56:	4b24      	ldr	r3, [pc, #144]	; (8005ce8 <_svfiprintf_r+0x1f8>)
 8005c58:	bb1b      	cbnz	r3, 8005ca2 <_svfiprintf_r+0x1b2>
 8005c5a:	9b03      	ldr	r3, [sp, #12]
 8005c5c:	3307      	adds	r3, #7
 8005c5e:	f023 0307 	bic.w	r3, r3, #7
 8005c62:	3308      	adds	r3, #8
 8005c64:	9303      	str	r3, [sp, #12]
 8005c66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c68:	4433      	add	r3, r6
 8005c6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005c6c:	e767      	b.n	8005b3e <_svfiprintf_r+0x4e>
 8005c6e:	460c      	mov	r4, r1
 8005c70:	2001      	movs	r0, #1
 8005c72:	fb0c 3202 	mla	r2, ip, r2, r3
 8005c76:	e7a5      	b.n	8005bc4 <_svfiprintf_r+0xd4>
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f04f 0c0a 	mov.w	ip, #10
 8005c7e:	4619      	mov	r1, r3
 8005c80:	3401      	adds	r4, #1
 8005c82:	9305      	str	r3, [sp, #20]
 8005c84:	4620      	mov	r0, r4
 8005c86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005c8a:	3a30      	subs	r2, #48	; 0x30
 8005c8c:	2a09      	cmp	r2, #9
 8005c8e:	d903      	bls.n	8005c98 <_svfiprintf_r+0x1a8>
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d0c5      	beq.n	8005c20 <_svfiprintf_r+0x130>
 8005c94:	9105      	str	r1, [sp, #20]
 8005c96:	e7c3      	b.n	8005c20 <_svfiprintf_r+0x130>
 8005c98:	4604      	mov	r4, r0
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ca0:	e7f0      	b.n	8005c84 <_svfiprintf_r+0x194>
 8005ca2:	ab03      	add	r3, sp, #12
 8005ca4:	9300      	str	r3, [sp, #0]
 8005ca6:	462a      	mov	r2, r5
 8005ca8:	4638      	mov	r0, r7
 8005caa:	4b10      	ldr	r3, [pc, #64]	; (8005cec <_svfiprintf_r+0x1fc>)
 8005cac:	a904      	add	r1, sp, #16
 8005cae:	f3af 8000 	nop.w
 8005cb2:	1c42      	adds	r2, r0, #1
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	d1d6      	bne.n	8005c66 <_svfiprintf_r+0x176>
 8005cb8:	89ab      	ldrh	r3, [r5, #12]
 8005cba:	065b      	lsls	r3, r3, #25
 8005cbc:	f53f af2c 	bmi.w	8005b18 <_svfiprintf_r+0x28>
 8005cc0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005cc2:	b01d      	add	sp, #116	; 0x74
 8005cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc8:	ab03      	add	r3, sp, #12
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	462a      	mov	r2, r5
 8005cce:	4638      	mov	r0, r7
 8005cd0:	4b06      	ldr	r3, [pc, #24]	; (8005cec <_svfiprintf_r+0x1fc>)
 8005cd2:	a904      	add	r1, sp, #16
 8005cd4:	f000 f87c 	bl	8005dd0 <_printf_i>
 8005cd8:	e7eb      	b.n	8005cb2 <_svfiprintf_r+0x1c2>
 8005cda:	bf00      	nop
 8005cdc:	0803dd58 	.word	0x0803dd58
 8005ce0:	0803dd5e 	.word	0x0803dd5e
 8005ce4:	0803dd62 	.word	0x0803dd62
 8005ce8:	00000000 	.word	0x00000000
 8005cec:	08005a39 	.word	0x08005a39

08005cf0 <_printf_common>:
 8005cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005cf4:	4616      	mov	r6, r2
 8005cf6:	4699      	mov	r9, r3
 8005cf8:	688a      	ldr	r2, [r1, #8]
 8005cfa:	690b      	ldr	r3, [r1, #16]
 8005cfc:	4607      	mov	r7, r0
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bfb8      	it	lt
 8005d02:	4613      	movlt	r3, r2
 8005d04:	6033      	str	r3, [r6, #0]
 8005d06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d0a:	460c      	mov	r4, r1
 8005d0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d10:	b10a      	cbz	r2, 8005d16 <_printf_common+0x26>
 8005d12:	3301      	adds	r3, #1
 8005d14:	6033      	str	r3, [r6, #0]
 8005d16:	6823      	ldr	r3, [r4, #0]
 8005d18:	0699      	lsls	r1, r3, #26
 8005d1a:	bf42      	ittt	mi
 8005d1c:	6833      	ldrmi	r3, [r6, #0]
 8005d1e:	3302      	addmi	r3, #2
 8005d20:	6033      	strmi	r3, [r6, #0]
 8005d22:	6825      	ldr	r5, [r4, #0]
 8005d24:	f015 0506 	ands.w	r5, r5, #6
 8005d28:	d106      	bne.n	8005d38 <_printf_common+0x48>
 8005d2a:	f104 0a19 	add.w	sl, r4, #25
 8005d2e:	68e3      	ldr	r3, [r4, #12]
 8005d30:	6832      	ldr	r2, [r6, #0]
 8005d32:	1a9b      	subs	r3, r3, r2
 8005d34:	42ab      	cmp	r3, r5
 8005d36:	dc28      	bgt.n	8005d8a <_printf_common+0x9a>
 8005d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d3c:	1e13      	subs	r3, r2, #0
 8005d3e:	6822      	ldr	r2, [r4, #0]
 8005d40:	bf18      	it	ne
 8005d42:	2301      	movne	r3, #1
 8005d44:	0692      	lsls	r2, r2, #26
 8005d46:	d42d      	bmi.n	8005da4 <_printf_common+0xb4>
 8005d48:	4649      	mov	r1, r9
 8005d4a:	4638      	mov	r0, r7
 8005d4c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005d50:	47c0      	blx	r8
 8005d52:	3001      	adds	r0, #1
 8005d54:	d020      	beq.n	8005d98 <_printf_common+0xa8>
 8005d56:	6823      	ldr	r3, [r4, #0]
 8005d58:	68e5      	ldr	r5, [r4, #12]
 8005d5a:	f003 0306 	and.w	r3, r3, #6
 8005d5e:	2b04      	cmp	r3, #4
 8005d60:	bf18      	it	ne
 8005d62:	2500      	movne	r5, #0
 8005d64:	6832      	ldr	r2, [r6, #0]
 8005d66:	f04f 0600 	mov.w	r6, #0
 8005d6a:	68a3      	ldr	r3, [r4, #8]
 8005d6c:	bf08      	it	eq
 8005d6e:	1aad      	subeq	r5, r5, r2
 8005d70:	6922      	ldr	r2, [r4, #16]
 8005d72:	bf08      	it	eq
 8005d74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005d78:	4293      	cmp	r3, r2
 8005d7a:	bfc4      	itt	gt
 8005d7c:	1a9b      	subgt	r3, r3, r2
 8005d7e:	18ed      	addgt	r5, r5, r3
 8005d80:	341a      	adds	r4, #26
 8005d82:	42b5      	cmp	r5, r6
 8005d84:	d11a      	bne.n	8005dbc <_printf_common+0xcc>
 8005d86:	2000      	movs	r0, #0
 8005d88:	e008      	b.n	8005d9c <_printf_common+0xac>
 8005d8a:	2301      	movs	r3, #1
 8005d8c:	4652      	mov	r2, sl
 8005d8e:	4649      	mov	r1, r9
 8005d90:	4638      	mov	r0, r7
 8005d92:	47c0      	blx	r8
 8005d94:	3001      	adds	r0, #1
 8005d96:	d103      	bne.n	8005da0 <_printf_common+0xb0>
 8005d98:	f04f 30ff 	mov.w	r0, #4294967295
 8005d9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005da0:	3501      	adds	r5, #1
 8005da2:	e7c4      	b.n	8005d2e <_printf_common+0x3e>
 8005da4:	2030      	movs	r0, #48	; 0x30
 8005da6:	18e1      	adds	r1, r4, r3
 8005da8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005db2:	4422      	add	r2, r4
 8005db4:	3302      	adds	r3, #2
 8005db6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005dba:	e7c5      	b.n	8005d48 <_printf_common+0x58>
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	4622      	mov	r2, r4
 8005dc0:	4649      	mov	r1, r9
 8005dc2:	4638      	mov	r0, r7
 8005dc4:	47c0      	blx	r8
 8005dc6:	3001      	adds	r0, #1
 8005dc8:	d0e6      	beq.n	8005d98 <_printf_common+0xa8>
 8005dca:	3601      	adds	r6, #1
 8005dcc:	e7d9      	b.n	8005d82 <_printf_common+0x92>
	...

08005dd0 <_printf_i>:
 8005dd0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005dd4:	7e0f      	ldrb	r7, [r1, #24]
 8005dd6:	4691      	mov	r9, r2
 8005dd8:	2f78      	cmp	r7, #120	; 0x78
 8005dda:	4680      	mov	r8, r0
 8005ddc:	460c      	mov	r4, r1
 8005dde:	469a      	mov	sl, r3
 8005de0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005de2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005de6:	d807      	bhi.n	8005df8 <_printf_i+0x28>
 8005de8:	2f62      	cmp	r7, #98	; 0x62
 8005dea:	d80a      	bhi.n	8005e02 <_printf_i+0x32>
 8005dec:	2f00      	cmp	r7, #0
 8005dee:	f000 80d9 	beq.w	8005fa4 <_printf_i+0x1d4>
 8005df2:	2f58      	cmp	r7, #88	; 0x58
 8005df4:	f000 80a4 	beq.w	8005f40 <_printf_i+0x170>
 8005df8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005dfc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e00:	e03a      	b.n	8005e78 <_printf_i+0xa8>
 8005e02:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e06:	2b15      	cmp	r3, #21
 8005e08:	d8f6      	bhi.n	8005df8 <_printf_i+0x28>
 8005e0a:	a101      	add	r1, pc, #4	; (adr r1, 8005e10 <_printf_i+0x40>)
 8005e0c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e10:	08005e69 	.word	0x08005e69
 8005e14:	08005e7d 	.word	0x08005e7d
 8005e18:	08005df9 	.word	0x08005df9
 8005e1c:	08005df9 	.word	0x08005df9
 8005e20:	08005df9 	.word	0x08005df9
 8005e24:	08005df9 	.word	0x08005df9
 8005e28:	08005e7d 	.word	0x08005e7d
 8005e2c:	08005df9 	.word	0x08005df9
 8005e30:	08005df9 	.word	0x08005df9
 8005e34:	08005df9 	.word	0x08005df9
 8005e38:	08005df9 	.word	0x08005df9
 8005e3c:	08005f8b 	.word	0x08005f8b
 8005e40:	08005ead 	.word	0x08005ead
 8005e44:	08005f6d 	.word	0x08005f6d
 8005e48:	08005df9 	.word	0x08005df9
 8005e4c:	08005df9 	.word	0x08005df9
 8005e50:	08005fad 	.word	0x08005fad
 8005e54:	08005df9 	.word	0x08005df9
 8005e58:	08005ead 	.word	0x08005ead
 8005e5c:	08005df9 	.word	0x08005df9
 8005e60:	08005df9 	.word	0x08005df9
 8005e64:	08005f75 	.word	0x08005f75
 8005e68:	682b      	ldr	r3, [r5, #0]
 8005e6a:	1d1a      	adds	r2, r3, #4
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	602a      	str	r2, [r5, #0]
 8005e70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e0a4      	b.n	8005fc6 <_printf_i+0x1f6>
 8005e7c:	6820      	ldr	r0, [r4, #0]
 8005e7e:	6829      	ldr	r1, [r5, #0]
 8005e80:	0606      	lsls	r6, r0, #24
 8005e82:	f101 0304 	add.w	r3, r1, #4
 8005e86:	d50a      	bpl.n	8005e9e <_printf_i+0xce>
 8005e88:	680e      	ldr	r6, [r1, #0]
 8005e8a:	602b      	str	r3, [r5, #0]
 8005e8c:	2e00      	cmp	r6, #0
 8005e8e:	da03      	bge.n	8005e98 <_printf_i+0xc8>
 8005e90:	232d      	movs	r3, #45	; 0x2d
 8005e92:	4276      	negs	r6, r6
 8005e94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005e98:	230a      	movs	r3, #10
 8005e9a:	485e      	ldr	r0, [pc, #376]	; (8006014 <_printf_i+0x244>)
 8005e9c:	e019      	b.n	8005ed2 <_printf_i+0x102>
 8005e9e:	680e      	ldr	r6, [r1, #0]
 8005ea0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005ea4:	602b      	str	r3, [r5, #0]
 8005ea6:	bf18      	it	ne
 8005ea8:	b236      	sxthne	r6, r6
 8005eaa:	e7ef      	b.n	8005e8c <_printf_i+0xbc>
 8005eac:	682b      	ldr	r3, [r5, #0]
 8005eae:	6820      	ldr	r0, [r4, #0]
 8005eb0:	1d19      	adds	r1, r3, #4
 8005eb2:	6029      	str	r1, [r5, #0]
 8005eb4:	0601      	lsls	r1, r0, #24
 8005eb6:	d501      	bpl.n	8005ebc <_printf_i+0xec>
 8005eb8:	681e      	ldr	r6, [r3, #0]
 8005eba:	e002      	b.n	8005ec2 <_printf_i+0xf2>
 8005ebc:	0646      	lsls	r6, r0, #25
 8005ebe:	d5fb      	bpl.n	8005eb8 <_printf_i+0xe8>
 8005ec0:	881e      	ldrh	r6, [r3, #0]
 8005ec2:	2f6f      	cmp	r7, #111	; 0x6f
 8005ec4:	bf0c      	ite	eq
 8005ec6:	2308      	moveq	r3, #8
 8005ec8:	230a      	movne	r3, #10
 8005eca:	4852      	ldr	r0, [pc, #328]	; (8006014 <_printf_i+0x244>)
 8005ecc:	2100      	movs	r1, #0
 8005ece:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005ed2:	6865      	ldr	r5, [r4, #4]
 8005ed4:	2d00      	cmp	r5, #0
 8005ed6:	bfa8      	it	ge
 8005ed8:	6821      	ldrge	r1, [r4, #0]
 8005eda:	60a5      	str	r5, [r4, #8]
 8005edc:	bfa4      	itt	ge
 8005ede:	f021 0104 	bicge.w	r1, r1, #4
 8005ee2:	6021      	strge	r1, [r4, #0]
 8005ee4:	b90e      	cbnz	r6, 8005eea <_printf_i+0x11a>
 8005ee6:	2d00      	cmp	r5, #0
 8005ee8:	d04d      	beq.n	8005f86 <_printf_i+0x1b6>
 8005eea:	4615      	mov	r5, r2
 8005eec:	fbb6 f1f3 	udiv	r1, r6, r3
 8005ef0:	fb03 6711 	mls	r7, r3, r1, r6
 8005ef4:	5dc7      	ldrb	r7, [r0, r7]
 8005ef6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005efa:	4637      	mov	r7, r6
 8005efc:	42bb      	cmp	r3, r7
 8005efe:	460e      	mov	r6, r1
 8005f00:	d9f4      	bls.n	8005eec <_printf_i+0x11c>
 8005f02:	2b08      	cmp	r3, #8
 8005f04:	d10b      	bne.n	8005f1e <_printf_i+0x14e>
 8005f06:	6823      	ldr	r3, [r4, #0]
 8005f08:	07de      	lsls	r6, r3, #31
 8005f0a:	d508      	bpl.n	8005f1e <_printf_i+0x14e>
 8005f0c:	6923      	ldr	r3, [r4, #16]
 8005f0e:	6861      	ldr	r1, [r4, #4]
 8005f10:	4299      	cmp	r1, r3
 8005f12:	bfde      	ittt	le
 8005f14:	2330      	movle	r3, #48	; 0x30
 8005f16:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f1a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005f1e:	1b52      	subs	r2, r2, r5
 8005f20:	6122      	str	r2, [r4, #16]
 8005f22:	464b      	mov	r3, r9
 8005f24:	4621      	mov	r1, r4
 8005f26:	4640      	mov	r0, r8
 8005f28:	f8cd a000 	str.w	sl, [sp]
 8005f2c:	aa03      	add	r2, sp, #12
 8005f2e:	f7ff fedf 	bl	8005cf0 <_printf_common>
 8005f32:	3001      	adds	r0, #1
 8005f34:	d14c      	bne.n	8005fd0 <_printf_i+0x200>
 8005f36:	f04f 30ff 	mov.w	r0, #4294967295
 8005f3a:	b004      	add	sp, #16
 8005f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f40:	4834      	ldr	r0, [pc, #208]	; (8006014 <_printf_i+0x244>)
 8005f42:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005f46:	6829      	ldr	r1, [r5, #0]
 8005f48:	6823      	ldr	r3, [r4, #0]
 8005f4a:	f851 6b04 	ldr.w	r6, [r1], #4
 8005f4e:	6029      	str	r1, [r5, #0]
 8005f50:	061d      	lsls	r5, r3, #24
 8005f52:	d514      	bpl.n	8005f7e <_printf_i+0x1ae>
 8005f54:	07df      	lsls	r7, r3, #31
 8005f56:	bf44      	itt	mi
 8005f58:	f043 0320 	orrmi.w	r3, r3, #32
 8005f5c:	6023      	strmi	r3, [r4, #0]
 8005f5e:	b91e      	cbnz	r6, 8005f68 <_printf_i+0x198>
 8005f60:	6823      	ldr	r3, [r4, #0]
 8005f62:	f023 0320 	bic.w	r3, r3, #32
 8005f66:	6023      	str	r3, [r4, #0]
 8005f68:	2310      	movs	r3, #16
 8005f6a:	e7af      	b.n	8005ecc <_printf_i+0xfc>
 8005f6c:	6823      	ldr	r3, [r4, #0]
 8005f6e:	f043 0320 	orr.w	r3, r3, #32
 8005f72:	6023      	str	r3, [r4, #0]
 8005f74:	2378      	movs	r3, #120	; 0x78
 8005f76:	4828      	ldr	r0, [pc, #160]	; (8006018 <_printf_i+0x248>)
 8005f78:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005f7c:	e7e3      	b.n	8005f46 <_printf_i+0x176>
 8005f7e:	0659      	lsls	r1, r3, #25
 8005f80:	bf48      	it	mi
 8005f82:	b2b6      	uxthmi	r6, r6
 8005f84:	e7e6      	b.n	8005f54 <_printf_i+0x184>
 8005f86:	4615      	mov	r5, r2
 8005f88:	e7bb      	b.n	8005f02 <_printf_i+0x132>
 8005f8a:	682b      	ldr	r3, [r5, #0]
 8005f8c:	6826      	ldr	r6, [r4, #0]
 8005f8e:	1d18      	adds	r0, r3, #4
 8005f90:	6961      	ldr	r1, [r4, #20]
 8005f92:	6028      	str	r0, [r5, #0]
 8005f94:	0635      	lsls	r5, r6, #24
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	d501      	bpl.n	8005f9e <_printf_i+0x1ce>
 8005f9a:	6019      	str	r1, [r3, #0]
 8005f9c:	e002      	b.n	8005fa4 <_printf_i+0x1d4>
 8005f9e:	0670      	lsls	r0, r6, #25
 8005fa0:	d5fb      	bpl.n	8005f9a <_printf_i+0x1ca>
 8005fa2:	8019      	strh	r1, [r3, #0]
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	4615      	mov	r5, r2
 8005fa8:	6123      	str	r3, [r4, #16]
 8005faa:	e7ba      	b.n	8005f22 <_printf_i+0x152>
 8005fac:	682b      	ldr	r3, [r5, #0]
 8005fae:	2100      	movs	r1, #0
 8005fb0:	1d1a      	adds	r2, r3, #4
 8005fb2:	602a      	str	r2, [r5, #0]
 8005fb4:	681d      	ldr	r5, [r3, #0]
 8005fb6:	6862      	ldr	r2, [r4, #4]
 8005fb8:	4628      	mov	r0, r5
 8005fba:	f000 f82f 	bl	800601c <memchr>
 8005fbe:	b108      	cbz	r0, 8005fc4 <_printf_i+0x1f4>
 8005fc0:	1b40      	subs	r0, r0, r5
 8005fc2:	6060      	str	r0, [r4, #4]
 8005fc4:	6863      	ldr	r3, [r4, #4]
 8005fc6:	6123      	str	r3, [r4, #16]
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005fce:	e7a8      	b.n	8005f22 <_printf_i+0x152>
 8005fd0:	462a      	mov	r2, r5
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	4640      	mov	r0, r8
 8005fd6:	6923      	ldr	r3, [r4, #16]
 8005fd8:	47d0      	blx	sl
 8005fda:	3001      	adds	r0, #1
 8005fdc:	d0ab      	beq.n	8005f36 <_printf_i+0x166>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	079b      	lsls	r3, r3, #30
 8005fe2:	d413      	bmi.n	800600c <_printf_i+0x23c>
 8005fe4:	68e0      	ldr	r0, [r4, #12]
 8005fe6:	9b03      	ldr	r3, [sp, #12]
 8005fe8:	4298      	cmp	r0, r3
 8005fea:	bfb8      	it	lt
 8005fec:	4618      	movlt	r0, r3
 8005fee:	e7a4      	b.n	8005f3a <_printf_i+0x16a>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	4632      	mov	r2, r6
 8005ff4:	4649      	mov	r1, r9
 8005ff6:	4640      	mov	r0, r8
 8005ff8:	47d0      	blx	sl
 8005ffa:	3001      	adds	r0, #1
 8005ffc:	d09b      	beq.n	8005f36 <_printf_i+0x166>
 8005ffe:	3501      	adds	r5, #1
 8006000:	68e3      	ldr	r3, [r4, #12]
 8006002:	9903      	ldr	r1, [sp, #12]
 8006004:	1a5b      	subs	r3, r3, r1
 8006006:	42ab      	cmp	r3, r5
 8006008:	dcf2      	bgt.n	8005ff0 <_printf_i+0x220>
 800600a:	e7eb      	b.n	8005fe4 <_printf_i+0x214>
 800600c:	2500      	movs	r5, #0
 800600e:	f104 0619 	add.w	r6, r4, #25
 8006012:	e7f5      	b.n	8006000 <_printf_i+0x230>
 8006014:	0803dd69 	.word	0x0803dd69
 8006018:	0803dd7a 	.word	0x0803dd7a

0800601c <memchr>:
 800601c:	4603      	mov	r3, r0
 800601e:	b510      	push	{r4, lr}
 8006020:	b2c9      	uxtb	r1, r1
 8006022:	4402      	add	r2, r0
 8006024:	4293      	cmp	r3, r2
 8006026:	4618      	mov	r0, r3
 8006028:	d101      	bne.n	800602e <memchr+0x12>
 800602a:	2000      	movs	r0, #0
 800602c:	e003      	b.n	8006036 <memchr+0x1a>
 800602e:	7804      	ldrb	r4, [r0, #0]
 8006030:	3301      	adds	r3, #1
 8006032:	428c      	cmp	r4, r1
 8006034:	d1f6      	bne.n	8006024 <memchr+0x8>
 8006036:	bd10      	pop	{r4, pc}

08006038 <memcpy>:
 8006038:	440a      	add	r2, r1
 800603a:	4291      	cmp	r1, r2
 800603c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006040:	d100      	bne.n	8006044 <memcpy+0xc>
 8006042:	4770      	bx	lr
 8006044:	b510      	push	{r4, lr}
 8006046:	f811 4b01 	ldrb.w	r4, [r1], #1
 800604a:	4291      	cmp	r1, r2
 800604c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006050:	d1f9      	bne.n	8006046 <memcpy+0xe>
 8006052:	bd10      	pop	{r4, pc}

08006054 <memmove>:
 8006054:	4288      	cmp	r0, r1
 8006056:	b510      	push	{r4, lr}
 8006058:	eb01 0402 	add.w	r4, r1, r2
 800605c:	d902      	bls.n	8006064 <memmove+0x10>
 800605e:	4284      	cmp	r4, r0
 8006060:	4623      	mov	r3, r4
 8006062:	d807      	bhi.n	8006074 <memmove+0x20>
 8006064:	1e43      	subs	r3, r0, #1
 8006066:	42a1      	cmp	r1, r4
 8006068:	d008      	beq.n	800607c <memmove+0x28>
 800606a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800606e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006072:	e7f8      	b.n	8006066 <memmove+0x12>
 8006074:	4601      	mov	r1, r0
 8006076:	4402      	add	r2, r0
 8006078:	428a      	cmp	r2, r1
 800607a:	d100      	bne.n	800607e <memmove+0x2a>
 800607c:	bd10      	pop	{r4, pc}
 800607e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006082:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006086:	e7f7      	b.n	8006078 <memmove+0x24>

08006088 <_free_r>:
 8006088:	b538      	push	{r3, r4, r5, lr}
 800608a:	4605      	mov	r5, r0
 800608c:	2900      	cmp	r1, #0
 800608e:	d040      	beq.n	8006112 <_free_r+0x8a>
 8006090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006094:	1f0c      	subs	r4, r1, #4
 8006096:	2b00      	cmp	r3, #0
 8006098:	bfb8      	it	lt
 800609a:	18e4      	addlt	r4, r4, r3
 800609c:	f000 f910 	bl	80062c0 <__malloc_lock>
 80060a0:	4a1c      	ldr	r2, [pc, #112]	; (8006114 <_free_r+0x8c>)
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	b933      	cbnz	r3, 80060b4 <_free_r+0x2c>
 80060a6:	6063      	str	r3, [r4, #4]
 80060a8:	6014      	str	r4, [r2, #0]
 80060aa:	4628      	mov	r0, r5
 80060ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060b0:	f000 b90c 	b.w	80062cc <__malloc_unlock>
 80060b4:	42a3      	cmp	r3, r4
 80060b6:	d908      	bls.n	80060ca <_free_r+0x42>
 80060b8:	6820      	ldr	r0, [r4, #0]
 80060ba:	1821      	adds	r1, r4, r0
 80060bc:	428b      	cmp	r3, r1
 80060be:	bf01      	itttt	eq
 80060c0:	6819      	ldreq	r1, [r3, #0]
 80060c2:	685b      	ldreq	r3, [r3, #4]
 80060c4:	1809      	addeq	r1, r1, r0
 80060c6:	6021      	streq	r1, [r4, #0]
 80060c8:	e7ed      	b.n	80060a6 <_free_r+0x1e>
 80060ca:	461a      	mov	r2, r3
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	b10b      	cbz	r3, 80060d4 <_free_r+0x4c>
 80060d0:	42a3      	cmp	r3, r4
 80060d2:	d9fa      	bls.n	80060ca <_free_r+0x42>
 80060d4:	6811      	ldr	r1, [r2, #0]
 80060d6:	1850      	adds	r0, r2, r1
 80060d8:	42a0      	cmp	r0, r4
 80060da:	d10b      	bne.n	80060f4 <_free_r+0x6c>
 80060dc:	6820      	ldr	r0, [r4, #0]
 80060de:	4401      	add	r1, r0
 80060e0:	1850      	adds	r0, r2, r1
 80060e2:	4283      	cmp	r3, r0
 80060e4:	6011      	str	r1, [r2, #0]
 80060e6:	d1e0      	bne.n	80060aa <_free_r+0x22>
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	4401      	add	r1, r0
 80060ee:	6011      	str	r1, [r2, #0]
 80060f0:	6053      	str	r3, [r2, #4]
 80060f2:	e7da      	b.n	80060aa <_free_r+0x22>
 80060f4:	d902      	bls.n	80060fc <_free_r+0x74>
 80060f6:	230c      	movs	r3, #12
 80060f8:	602b      	str	r3, [r5, #0]
 80060fa:	e7d6      	b.n	80060aa <_free_r+0x22>
 80060fc:	6820      	ldr	r0, [r4, #0]
 80060fe:	1821      	adds	r1, r4, r0
 8006100:	428b      	cmp	r3, r1
 8006102:	bf01      	itttt	eq
 8006104:	6819      	ldreq	r1, [r3, #0]
 8006106:	685b      	ldreq	r3, [r3, #4]
 8006108:	1809      	addeq	r1, r1, r0
 800610a:	6021      	streq	r1, [r4, #0]
 800610c:	6063      	str	r3, [r4, #4]
 800610e:	6054      	str	r4, [r2, #4]
 8006110:	e7cb      	b.n	80060aa <_free_r+0x22>
 8006112:	bd38      	pop	{r3, r4, r5, pc}
 8006114:	200001dc 	.word	0x200001dc

08006118 <sbrk_aligned>:
 8006118:	b570      	push	{r4, r5, r6, lr}
 800611a:	4e0e      	ldr	r6, [pc, #56]	; (8006154 <sbrk_aligned+0x3c>)
 800611c:	460c      	mov	r4, r1
 800611e:	6831      	ldr	r1, [r6, #0]
 8006120:	4605      	mov	r5, r0
 8006122:	b911      	cbnz	r1, 800612a <sbrk_aligned+0x12>
 8006124:	f000 f8bc 	bl	80062a0 <_sbrk_r>
 8006128:	6030      	str	r0, [r6, #0]
 800612a:	4621      	mov	r1, r4
 800612c:	4628      	mov	r0, r5
 800612e:	f000 f8b7 	bl	80062a0 <_sbrk_r>
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	d00a      	beq.n	800614c <sbrk_aligned+0x34>
 8006136:	1cc4      	adds	r4, r0, #3
 8006138:	f024 0403 	bic.w	r4, r4, #3
 800613c:	42a0      	cmp	r0, r4
 800613e:	d007      	beq.n	8006150 <sbrk_aligned+0x38>
 8006140:	1a21      	subs	r1, r4, r0
 8006142:	4628      	mov	r0, r5
 8006144:	f000 f8ac 	bl	80062a0 <_sbrk_r>
 8006148:	3001      	adds	r0, #1
 800614a:	d101      	bne.n	8006150 <sbrk_aligned+0x38>
 800614c:	f04f 34ff 	mov.w	r4, #4294967295
 8006150:	4620      	mov	r0, r4
 8006152:	bd70      	pop	{r4, r5, r6, pc}
 8006154:	200001e0 	.word	0x200001e0

08006158 <_malloc_r>:
 8006158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800615c:	1ccd      	adds	r5, r1, #3
 800615e:	f025 0503 	bic.w	r5, r5, #3
 8006162:	3508      	adds	r5, #8
 8006164:	2d0c      	cmp	r5, #12
 8006166:	bf38      	it	cc
 8006168:	250c      	movcc	r5, #12
 800616a:	2d00      	cmp	r5, #0
 800616c:	4607      	mov	r7, r0
 800616e:	db01      	blt.n	8006174 <_malloc_r+0x1c>
 8006170:	42a9      	cmp	r1, r5
 8006172:	d905      	bls.n	8006180 <_malloc_r+0x28>
 8006174:	230c      	movs	r3, #12
 8006176:	2600      	movs	r6, #0
 8006178:	603b      	str	r3, [r7, #0]
 800617a:	4630      	mov	r0, r6
 800617c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006180:	4e2e      	ldr	r6, [pc, #184]	; (800623c <_malloc_r+0xe4>)
 8006182:	f000 f89d 	bl	80062c0 <__malloc_lock>
 8006186:	6833      	ldr	r3, [r6, #0]
 8006188:	461c      	mov	r4, r3
 800618a:	bb34      	cbnz	r4, 80061da <_malloc_r+0x82>
 800618c:	4629      	mov	r1, r5
 800618e:	4638      	mov	r0, r7
 8006190:	f7ff ffc2 	bl	8006118 <sbrk_aligned>
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	4604      	mov	r4, r0
 8006198:	d14d      	bne.n	8006236 <_malloc_r+0xde>
 800619a:	6834      	ldr	r4, [r6, #0]
 800619c:	4626      	mov	r6, r4
 800619e:	2e00      	cmp	r6, #0
 80061a0:	d140      	bne.n	8006224 <_malloc_r+0xcc>
 80061a2:	6823      	ldr	r3, [r4, #0]
 80061a4:	4631      	mov	r1, r6
 80061a6:	4638      	mov	r0, r7
 80061a8:	eb04 0803 	add.w	r8, r4, r3
 80061ac:	f000 f878 	bl	80062a0 <_sbrk_r>
 80061b0:	4580      	cmp	r8, r0
 80061b2:	d13a      	bne.n	800622a <_malloc_r+0xd2>
 80061b4:	6821      	ldr	r1, [r4, #0]
 80061b6:	3503      	adds	r5, #3
 80061b8:	1a6d      	subs	r5, r5, r1
 80061ba:	f025 0503 	bic.w	r5, r5, #3
 80061be:	3508      	adds	r5, #8
 80061c0:	2d0c      	cmp	r5, #12
 80061c2:	bf38      	it	cc
 80061c4:	250c      	movcc	r5, #12
 80061c6:	4638      	mov	r0, r7
 80061c8:	4629      	mov	r1, r5
 80061ca:	f7ff ffa5 	bl	8006118 <sbrk_aligned>
 80061ce:	3001      	adds	r0, #1
 80061d0:	d02b      	beq.n	800622a <_malloc_r+0xd2>
 80061d2:	6823      	ldr	r3, [r4, #0]
 80061d4:	442b      	add	r3, r5
 80061d6:	6023      	str	r3, [r4, #0]
 80061d8:	e00e      	b.n	80061f8 <_malloc_r+0xa0>
 80061da:	6822      	ldr	r2, [r4, #0]
 80061dc:	1b52      	subs	r2, r2, r5
 80061de:	d41e      	bmi.n	800621e <_malloc_r+0xc6>
 80061e0:	2a0b      	cmp	r2, #11
 80061e2:	d916      	bls.n	8006212 <_malloc_r+0xba>
 80061e4:	1961      	adds	r1, r4, r5
 80061e6:	42a3      	cmp	r3, r4
 80061e8:	6025      	str	r5, [r4, #0]
 80061ea:	bf18      	it	ne
 80061ec:	6059      	strne	r1, [r3, #4]
 80061ee:	6863      	ldr	r3, [r4, #4]
 80061f0:	bf08      	it	eq
 80061f2:	6031      	streq	r1, [r6, #0]
 80061f4:	5162      	str	r2, [r4, r5]
 80061f6:	604b      	str	r3, [r1, #4]
 80061f8:	4638      	mov	r0, r7
 80061fa:	f104 060b 	add.w	r6, r4, #11
 80061fe:	f000 f865 	bl	80062cc <__malloc_unlock>
 8006202:	f026 0607 	bic.w	r6, r6, #7
 8006206:	1d23      	adds	r3, r4, #4
 8006208:	1af2      	subs	r2, r6, r3
 800620a:	d0b6      	beq.n	800617a <_malloc_r+0x22>
 800620c:	1b9b      	subs	r3, r3, r6
 800620e:	50a3      	str	r3, [r4, r2]
 8006210:	e7b3      	b.n	800617a <_malloc_r+0x22>
 8006212:	6862      	ldr	r2, [r4, #4]
 8006214:	42a3      	cmp	r3, r4
 8006216:	bf0c      	ite	eq
 8006218:	6032      	streq	r2, [r6, #0]
 800621a:	605a      	strne	r2, [r3, #4]
 800621c:	e7ec      	b.n	80061f8 <_malloc_r+0xa0>
 800621e:	4623      	mov	r3, r4
 8006220:	6864      	ldr	r4, [r4, #4]
 8006222:	e7b2      	b.n	800618a <_malloc_r+0x32>
 8006224:	4634      	mov	r4, r6
 8006226:	6876      	ldr	r6, [r6, #4]
 8006228:	e7b9      	b.n	800619e <_malloc_r+0x46>
 800622a:	230c      	movs	r3, #12
 800622c:	4638      	mov	r0, r7
 800622e:	603b      	str	r3, [r7, #0]
 8006230:	f000 f84c 	bl	80062cc <__malloc_unlock>
 8006234:	e7a1      	b.n	800617a <_malloc_r+0x22>
 8006236:	6025      	str	r5, [r4, #0]
 8006238:	e7de      	b.n	80061f8 <_malloc_r+0xa0>
 800623a:	bf00      	nop
 800623c:	200001dc 	.word	0x200001dc

08006240 <_realloc_r>:
 8006240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006244:	4680      	mov	r8, r0
 8006246:	4614      	mov	r4, r2
 8006248:	460e      	mov	r6, r1
 800624a:	b921      	cbnz	r1, 8006256 <_realloc_r+0x16>
 800624c:	4611      	mov	r1, r2
 800624e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006252:	f7ff bf81 	b.w	8006158 <_malloc_r>
 8006256:	b92a      	cbnz	r2, 8006264 <_realloc_r+0x24>
 8006258:	f7ff ff16 	bl	8006088 <_free_r>
 800625c:	4625      	mov	r5, r4
 800625e:	4628      	mov	r0, r5
 8006260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006264:	f000 f838 	bl	80062d8 <_malloc_usable_size_r>
 8006268:	4284      	cmp	r4, r0
 800626a:	4607      	mov	r7, r0
 800626c:	d802      	bhi.n	8006274 <_realloc_r+0x34>
 800626e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006272:	d812      	bhi.n	800629a <_realloc_r+0x5a>
 8006274:	4621      	mov	r1, r4
 8006276:	4640      	mov	r0, r8
 8006278:	f7ff ff6e 	bl	8006158 <_malloc_r>
 800627c:	4605      	mov	r5, r0
 800627e:	2800      	cmp	r0, #0
 8006280:	d0ed      	beq.n	800625e <_realloc_r+0x1e>
 8006282:	42bc      	cmp	r4, r7
 8006284:	4622      	mov	r2, r4
 8006286:	4631      	mov	r1, r6
 8006288:	bf28      	it	cs
 800628a:	463a      	movcs	r2, r7
 800628c:	f7ff fed4 	bl	8006038 <memcpy>
 8006290:	4631      	mov	r1, r6
 8006292:	4640      	mov	r0, r8
 8006294:	f7ff fef8 	bl	8006088 <_free_r>
 8006298:	e7e1      	b.n	800625e <_realloc_r+0x1e>
 800629a:	4635      	mov	r5, r6
 800629c:	e7df      	b.n	800625e <_realloc_r+0x1e>
	...

080062a0 <_sbrk_r>:
 80062a0:	b538      	push	{r3, r4, r5, lr}
 80062a2:	2300      	movs	r3, #0
 80062a4:	4d05      	ldr	r5, [pc, #20]	; (80062bc <_sbrk_r+0x1c>)
 80062a6:	4604      	mov	r4, r0
 80062a8:	4608      	mov	r0, r1
 80062aa:	602b      	str	r3, [r5, #0]
 80062ac:	f7fc f8c4 	bl	8002438 <_sbrk>
 80062b0:	1c43      	adds	r3, r0, #1
 80062b2:	d102      	bne.n	80062ba <_sbrk_r+0x1a>
 80062b4:	682b      	ldr	r3, [r5, #0]
 80062b6:	b103      	cbz	r3, 80062ba <_sbrk_r+0x1a>
 80062b8:	6023      	str	r3, [r4, #0]
 80062ba:	bd38      	pop	{r3, r4, r5, pc}
 80062bc:	200001e4 	.word	0x200001e4

080062c0 <__malloc_lock>:
 80062c0:	4801      	ldr	r0, [pc, #4]	; (80062c8 <__malloc_lock+0x8>)
 80062c2:	f000 b811 	b.w	80062e8 <__retarget_lock_acquire_recursive>
 80062c6:	bf00      	nop
 80062c8:	200001e8 	.word	0x200001e8

080062cc <__malloc_unlock>:
 80062cc:	4801      	ldr	r0, [pc, #4]	; (80062d4 <__malloc_unlock+0x8>)
 80062ce:	f000 b80c 	b.w	80062ea <__retarget_lock_release_recursive>
 80062d2:	bf00      	nop
 80062d4:	200001e8 	.word	0x200001e8

080062d8 <_malloc_usable_size_r>:
 80062d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80062dc:	1f18      	subs	r0, r3, #4
 80062de:	2b00      	cmp	r3, #0
 80062e0:	bfbc      	itt	lt
 80062e2:	580b      	ldrlt	r3, [r1, r0]
 80062e4:	18c0      	addlt	r0, r0, r3
 80062e6:	4770      	bx	lr

080062e8 <__retarget_lock_acquire_recursive>:
 80062e8:	4770      	bx	lr

080062ea <__retarget_lock_release_recursive>:
 80062ea:	4770      	bx	lr

080062ec <_init>:
 80062ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062ee:	bf00      	nop
 80062f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062f2:	bc08      	pop	{r3}
 80062f4:	469e      	mov	lr, r3
 80062f6:	4770      	bx	lr

080062f8 <_fini>:
 80062f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062fa:	bf00      	nop
 80062fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062fe:	bc08      	pop	{r3}
 8006300:	469e      	mov	lr, r3
 8006302:	4770      	bx	lr
