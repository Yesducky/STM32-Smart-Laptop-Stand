
STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003274  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00025e48  08003458  08003458  00013458  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080292a0  080292a0  000400cc  2**0
                  CONTENTS
  4 .ARM          00000000  080292a0  080292a0  000400cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080292a0  080292a0  000400cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080292a0  080292a0  000392a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080292a4  080292a4  000392a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080292a8  00040000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  200000cc  08029374  000400cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000150  08029374  00040150  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000400cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068d8  00000000  00000000  000400f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018ea  00000000  00000000  000469cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006f8  00000000  00000000  000482b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000620  00000000  00000000  000489b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cc1  00000000  00000000  00048fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007e29  00000000  00000000  00061c91  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091edb  00000000  00000000  00069aba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb995  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f70  00000000  00000000  000fb9e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200000cc 	.word	0x200000cc
 8000200:	00000000 	.word	0x00000000
 8000204:	08003440 	.word	0x08003440

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200000d0 	.word	0x200000d0
 8000220:	08003440 	.word	0x08003440

08000224 <__aeabi_dmul>:
 8000224:	b570      	push	{r4, r5, r6, lr}
 8000226:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800022a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800022e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000232:	bf1d      	ittte	ne
 8000234:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000238:	ea94 0f0c 	teqne	r4, ip
 800023c:	ea95 0f0c 	teqne	r5, ip
 8000240:	f000 f8de 	bleq	8000400 <__aeabi_dmul+0x1dc>
 8000244:	442c      	add	r4, r5
 8000246:	ea81 0603 	eor.w	r6, r1, r3
 800024a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800024e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000252:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000256:	bf18      	it	ne
 8000258:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800025c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000260:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000264:	d038      	beq.n	80002d8 <__aeabi_dmul+0xb4>
 8000266:	fba0 ce02 	umull	ip, lr, r0, r2
 800026a:	f04f 0500 	mov.w	r5, #0
 800026e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000272:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000276:	fbe0 e503 	umlal	lr, r5, r0, r3
 800027a:	f04f 0600 	mov.w	r6, #0
 800027e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000282:	f09c 0f00 	teq	ip, #0
 8000286:	bf18      	it	ne
 8000288:	f04e 0e01 	orrne.w	lr, lr, #1
 800028c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000290:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000294:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000298:	d204      	bcs.n	80002a4 <__aeabi_dmul+0x80>
 800029a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800029e:	416d      	adcs	r5, r5
 80002a0:	eb46 0606 	adc.w	r6, r6, r6
 80002a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80002b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80002b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80002bc:	bf88      	it	hi
 80002be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80002c2:	d81e      	bhi.n	8000302 <__aeabi_dmul+0xde>
 80002c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80002c8:	bf08      	it	eq
 80002ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80002ce:	f150 0000 	adcs.w	r0, r0, #0
 80002d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80002dc:	ea46 0101 	orr.w	r1, r6, r1
 80002e0:	ea40 0002 	orr.w	r0, r0, r2
 80002e4:	ea81 0103 	eor.w	r1, r1, r3
 80002e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002ec:	bfc2      	ittt	gt
 80002ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002f6:	bd70      	popgt	{r4, r5, r6, pc}
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f04f 0e00 	mov.w	lr, #0
 8000300:	3c01      	subs	r4, #1
 8000302:	f300 80ab 	bgt.w	800045c <__aeabi_dmul+0x238>
 8000306:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800030a:	bfde      	ittt	le
 800030c:	2000      	movle	r0, #0
 800030e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000312:	bd70      	pople	{r4, r5, r6, pc}
 8000314:	f1c4 0400 	rsb	r4, r4, #0
 8000318:	3c20      	subs	r4, #32
 800031a:	da35      	bge.n	8000388 <__aeabi_dmul+0x164>
 800031c:	340c      	adds	r4, #12
 800031e:	dc1b      	bgt.n	8000358 <__aeabi_dmul+0x134>
 8000320:	f104 0414 	add.w	r4, r4, #20
 8000324:	f1c4 0520 	rsb	r5, r4, #32
 8000328:	fa00 f305 	lsl.w	r3, r0, r5
 800032c:	fa20 f004 	lsr.w	r0, r0, r4
 8000330:	fa01 f205 	lsl.w	r2, r1, r5
 8000334:	ea40 0002 	orr.w	r0, r0, r2
 8000338:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800033c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000340:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000344:	fa21 f604 	lsr.w	r6, r1, r4
 8000348:	eb42 0106 	adc.w	r1, r2, r6
 800034c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000350:	bf08      	it	eq
 8000352:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000356:	bd70      	pop	{r4, r5, r6, pc}
 8000358:	f1c4 040c 	rsb	r4, r4, #12
 800035c:	f1c4 0520 	rsb	r5, r4, #32
 8000360:	fa00 f304 	lsl.w	r3, r0, r4
 8000364:	fa20 f005 	lsr.w	r0, r0, r5
 8000368:	fa01 f204 	lsl.w	r2, r1, r4
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000374:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000378:	f141 0100 	adc.w	r1, r1, #0
 800037c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000380:	bf08      	it	eq
 8000382:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000386:	bd70      	pop	{r4, r5, r6, pc}
 8000388:	f1c4 0520 	rsb	r5, r4, #32
 800038c:	fa00 f205 	lsl.w	r2, r0, r5
 8000390:	ea4e 0e02 	orr.w	lr, lr, r2
 8000394:	fa20 f304 	lsr.w	r3, r0, r4
 8000398:	fa01 f205 	lsl.w	r2, r1, r5
 800039c:	ea43 0302 	orr.w	r3, r3, r2
 80003a0:	fa21 f004 	lsr.w	r0, r1, r4
 80003a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a8:	fa21 f204 	lsr.w	r2, r1, r4
 80003ac:	ea20 0002 	bic.w	r0, r0, r2
 80003b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80003b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003b8:	bf08      	it	eq
 80003ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003be:	bd70      	pop	{r4, r5, r6, pc}
 80003c0:	f094 0f00 	teq	r4, #0
 80003c4:	d10f      	bne.n	80003e6 <__aeabi_dmul+0x1c2>
 80003c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80003ca:	0040      	lsls	r0, r0, #1
 80003cc:	eb41 0101 	adc.w	r1, r1, r1
 80003d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003d4:	bf08      	it	eq
 80003d6:	3c01      	subeq	r4, #1
 80003d8:	d0f7      	beq.n	80003ca <__aeabi_dmul+0x1a6>
 80003da:	ea41 0106 	orr.w	r1, r1, r6
 80003de:	f095 0f00 	teq	r5, #0
 80003e2:	bf18      	it	ne
 80003e4:	4770      	bxne	lr
 80003e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80003ea:	0052      	lsls	r2, r2, #1
 80003ec:	eb43 0303 	adc.w	r3, r3, r3
 80003f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003f4:	bf08      	it	eq
 80003f6:	3d01      	subeq	r5, #1
 80003f8:	d0f7      	beq.n	80003ea <__aeabi_dmul+0x1c6>
 80003fa:	ea43 0306 	orr.w	r3, r3, r6
 80003fe:	4770      	bx	lr
 8000400:	ea94 0f0c 	teq	r4, ip
 8000404:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000408:	bf18      	it	ne
 800040a:	ea95 0f0c 	teqne	r5, ip
 800040e:	d00c      	beq.n	800042a <__aeabi_dmul+0x206>
 8000410:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000414:	bf18      	it	ne
 8000416:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800041a:	d1d1      	bne.n	80003c0 <__aeabi_dmul+0x19c>
 800041c:	ea81 0103 	eor.w	r1, r1, r3
 8000420:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd70      	pop	{r4, r5, r6, pc}
 800042a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800042e:	bf06      	itte	eq
 8000430:	4610      	moveq	r0, r2
 8000432:	4619      	moveq	r1, r3
 8000434:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000438:	d019      	beq.n	800046e <__aeabi_dmul+0x24a>
 800043a:	ea94 0f0c 	teq	r4, ip
 800043e:	d102      	bne.n	8000446 <__aeabi_dmul+0x222>
 8000440:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000444:	d113      	bne.n	800046e <__aeabi_dmul+0x24a>
 8000446:	ea95 0f0c 	teq	r5, ip
 800044a:	d105      	bne.n	8000458 <__aeabi_dmul+0x234>
 800044c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000450:	bf1c      	itt	ne
 8000452:	4610      	movne	r0, r2
 8000454:	4619      	movne	r1, r3
 8000456:	d10a      	bne.n	800046e <__aeabi_dmul+0x24a>
 8000458:	ea81 0103 	eor.w	r1, r1, r3
 800045c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000460:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000464:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000468:	f04f 0000 	mov.w	r0, #0
 800046c:	bd70      	pop	{r4, r5, r6, pc}
 800046e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000472:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000476:	bd70      	pop	{r4, r5, r6, pc}

08000478 <__aeabi_drsub>:
 8000478:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800047c:	e002      	b.n	8000484 <__adddf3>
 800047e:	bf00      	nop

08000480 <__aeabi_dsub>:
 8000480:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000484 <__adddf3>:
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800048a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800048e:	ea94 0f05 	teq	r4, r5
 8000492:	bf08      	it	eq
 8000494:	ea90 0f02 	teqeq	r0, r2
 8000498:	bf1f      	itttt	ne
 800049a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800049e:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004a2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004a6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004aa:	f000 80e2 	beq.w	8000672 <__adddf3+0x1ee>
 80004ae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004b2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80004b6:	bfb8      	it	lt
 80004b8:	426d      	neglt	r5, r5
 80004ba:	dd0c      	ble.n	80004d6 <__adddf3+0x52>
 80004bc:	442c      	add	r4, r5
 80004be:	ea80 0202 	eor.w	r2, r0, r2
 80004c2:	ea81 0303 	eor.w	r3, r1, r3
 80004c6:	ea82 0000 	eor.w	r0, r2, r0
 80004ca:	ea83 0101 	eor.w	r1, r3, r1
 80004ce:	ea80 0202 	eor.w	r2, r0, r2
 80004d2:	ea81 0303 	eor.w	r3, r1, r3
 80004d6:	2d36      	cmp	r5, #54	; 0x36
 80004d8:	bf88      	it	hi
 80004da:	bd30      	pophi	{r4, r5, pc}
 80004dc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80004e0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80004e4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80004e8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004ec:	d002      	beq.n	80004f4 <__adddf3+0x70>
 80004ee:	4240      	negs	r0, r0
 80004f0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004f8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004fc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000500:	d002      	beq.n	8000508 <__adddf3+0x84>
 8000502:	4252      	negs	r2, r2
 8000504:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000508:	ea94 0f05 	teq	r4, r5
 800050c:	f000 80a7 	beq.w	800065e <__adddf3+0x1da>
 8000510:	f1a4 0401 	sub.w	r4, r4, #1
 8000514:	f1d5 0e20 	rsbs	lr, r5, #32
 8000518:	db0d      	blt.n	8000536 <__adddf3+0xb2>
 800051a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800051e:	fa22 f205 	lsr.w	r2, r2, r5
 8000522:	1880      	adds	r0, r0, r2
 8000524:	f141 0100 	adc.w	r1, r1, #0
 8000528:	fa03 f20e 	lsl.w	r2, r3, lr
 800052c:	1880      	adds	r0, r0, r2
 800052e:	fa43 f305 	asr.w	r3, r3, r5
 8000532:	4159      	adcs	r1, r3
 8000534:	e00e      	b.n	8000554 <__adddf3+0xd0>
 8000536:	f1a5 0520 	sub.w	r5, r5, #32
 800053a:	f10e 0e20 	add.w	lr, lr, #32
 800053e:	2a01      	cmp	r2, #1
 8000540:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000544:	bf28      	it	cs
 8000546:	f04c 0c02 	orrcs.w	ip, ip, #2
 800054a:	fa43 f305 	asr.w	r3, r3, r5
 800054e:	18c0      	adds	r0, r0, r3
 8000550:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000554:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000558:	d507      	bpl.n	800056a <__adddf3+0xe6>
 800055a:	f04f 0e00 	mov.w	lr, #0
 800055e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000562:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000566:	eb6e 0101 	sbc.w	r1, lr, r1
 800056a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800056e:	d31b      	bcc.n	80005a8 <__adddf3+0x124>
 8000570:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000574:	d30c      	bcc.n	8000590 <__adddf3+0x10c>
 8000576:	0849      	lsrs	r1, r1, #1
 8000578:	ea5f 0030 	movs.w	r0, r0, rrx
 800057c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000580:	f104 0401 	add.w	r4, r4, #1
 8000584:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000588:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800058c:	f080 809a 	bcs.w	80006c4 <__adddf3+0x240>
 8000590:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000594:	bf08      	it	eq
 8000596:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800059a:	f150 0000 	adcs.w	r0, r0, #0
 800059e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005a2:	ea41 0105 	orr.w	r1, r1, r5
 80005a6:	bd30      	pop	{r4, r5, pc}
 80005a8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005ac:	4140      	adcs	r0, r0
 80005ae:	eb41 0101 	adc.w	r1, r1, r1
 80005b2:	3c01      	subs	r4, #1
 80005b4:	bf28      	it	cs
 80005b6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80005ba:	d2e9      	bcs.n	8000590 <__adddf3+0x10c>
 80005bc:	f091 0f00 	teq	r1, #0
 80005c0:	bf04      	itt	eq
 80005c2:	4601      	moveq	r1, r0
 80005c4:	2000      	moveq	r0, #0
 80005c6:	fab1 f381 	clz	r3, r1
 80005ca:	bf08      	it	eq
 80005cc:	3320      	addeq	r3, #32
 80005ce:	f1a3 030b 	sub.w	r3, r3, #11
 80005d2:	f1b3 0220 	subs.w	r2, r3, #32
 80005d6:	da0c      	bge.n	80005f2 <__adddf3+0x16e>
 80005d8:	320c      	adds	r2, #12
 80005da:	dd08      	ble.n	80005ee <__adddf3+0x16a>
 80005dc:	f102 0c14 	add.w	ip, r2, #20
 80005e0:	f1c2 020c 	rsb	r2, r2, #12
 80005e4:	fa01 f00c 	lsl.w	r0, r1, ip
 80005e8:	fa21 f102 	lsr.w	r1, r1, r2
 80005ec:	e00c      	b.n	8000608 <__adddf3+0x184>
 80005ee:	f102 0214 	add.w	r2, r2, #20
 80005f2:	bfd8      	it	le
 80005f4:	f1c2 0c20 	rsble	ip, r2, #32
 80005f8:	fa01 f102 	lsl.w	r1, r1, r2
 80005fc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000600:	bfdc      	itt	le
 8000602:	ea41 010c 	orrle.w	r1, r1, ip
 8000606:	4090      	lslle	r0, r2
 8000608:	1ae4      	subs	r4, r4, r3
 800060a:	bfa2      	ittt	ge
 800060c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000610:	4329      	orrge	r1, r5
 8000612:	bd30      	popge	{r4, r5, pc}
 8000614:	ea6f 0404 	mvn.w	r4, r4
 8000618:	3c1f      	subs	r4, #31
 800061a:	da1c      	bge.n	8000656 <__adddf3+0x1d2>
 800061c:	340c      	adds	r4, #12
 800061e:	dc0e      	bgt.n	800063e <__adddf3+0x1ba>
 8000620:	f104 0414 	add.w	r4, r4, #20
 8000624:	f1c4 0220 	rsb	r2, r4, #32
 8000628:	fa20 f004 	lsr.w	r0, r0, r4
 800062c:	fa01 f302 	lsl.w	r3, r1, r2
 8000630:	ea40 0003 	orr.w	r0, r0, r3
 8000634:	fa21 f304 	lsr.w	r3, r1, r4
 8000638:	ea45 0103 	orr.w	r1, r5, r3
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	f1c4 040c 	rsb	r4, r4, #12
 8000642:	f1c4 0220 	rsb	r2, r4, #32
 8000646:	fa20 f002 	lsr.w	r0, r0, r2
 800064a:	fa01 f304 	lsl.w	r3, r1, r4
 800064e:	ea40 0003 	orr.w	r0, r0, r3
 8000652:	4629      	mov	r1, r5
 8000654:	bd30      	pop	{r4, r5, pc}
 8000656:	fa21 f004 	lsr.w	r0, r1, r4
 800065a:	4629      	mov	r1, r5
 800065c:	bd30      	pop	{r4, r5, pc}
 800065e:	f094 0f00 	teq	r4, #0
 8000662:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000666:	bf06      	itte	eq
 8000668:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800066c:	3401      	addeq	r4, #1
 800066e:	3d01      	subne	r5, #1
 8000670:	e74e      	b.n	8000510 <__adddf3+0x8c>
 8000672:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000676:	bf18      	it	ne
 8000678:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800067c:	d029      	beq.n	80006d2 <__adddf3+0x24e>
 800067e:	ea94 0f05 	teq	r4, r5
 8000682:	bf08      	it	eq
 8000684:	ea90 0f02 	teqeq	r0, r2
 8000688:	d005      	beq.n	8000696 <__adddf3+0x212>
 800068a:	ea54 0c00 	orrs.w	ip, r4, r0
 800068e:	bf04      	itt	eq
 8000690:	4619      	moveq	r1, r3
 8000692:	4610      	moveq	r0, r2
 8000694:	bd30      	pop	{r4, r5, pc}
 8000696:	ea91 0f03 	teq	r1, r3
 800069a:	bf1e      	ittt	ne
 800069c:	2100      	movne	r1, #0
 800069e:	2000      	movne	r0, #0
 80006a0:	bd30      	popne	{r4, r5, pc}
 80006a2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006a6:	d105      	bne.n	80006b4 <__adddf3+0x230>
 80006a8:	0040      	lsls	r0, r0, #1
 80006aa:	4149      	adcs	r1, r1
 80006ac:	bf28      	it	cs
 80006ae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006b2:	bd30      	pop	{r4, r5, pc}
 80006b4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80006b8:	bf3c      	itt	cc
 80006ba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80006be:	bd30      	popcc	{r4, r5, pc}
 80006c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006c4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80006c8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80006cc:	f04f 0000 	mov.w	r0, #0
 80006d0:	bd30      	pop	{r4, r5, pc}
 80006d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d6:	bf1a      	itte	ne
 80006d8:	4619      	movne	r1, r3
 80006da:	4610      	movne	r0, r2
 80006dc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80006e0:	bf1c      	itt	ne
 80006e2:	460b      	movne	r3, r1
 80006e4:	4602      	movne	r2, r0
 80006e6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80006ea:	bf06      	itte	eq
 80006ec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006f0:	ea91 0f03 	teqeq	r1, r3
 80006f4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	bf00      	nop

080006fc <__aeabi_ui2d>:
 80006fc:	f090 0f00 	teq	r0, #0
 8000700:	bf04      	itt	eq
 8000702:	2100      	moveq	r1, #0
 8000704:	4770      	bxeq	lr
 8000706:	b530      	push	{r4, r5, lr}
 8000708:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800070c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000710:	f04f 0500 	mov.w	r5, #0
 8000714:	f04f 0100 	mov.w	r1, #0
 8000718:	e750      	b.n	80005bc <__adddf3+0x138>
 800071a:	bf00      	nop

0800071c <__aeabi_i2d>:
 800071c:	f090 0f00 	teq	r0, #0
 8000720:	bf04      	itt	eq
 8000722:	2100      	moveq	r1, #0
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800072c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000730:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000734:	bf48      	it	mi
 8000736:	4240      	negmi	r0, r0
 8000738:	f04f 0100 	mov.w	r1, #0
 800073c:	e73e      	b.n	80005bc <__adddf3+0x138>
 800073e:	bf00      	nop

08000740 <__aeabi_f2d>:
 8000740:	0042      	lsls	r2, r0, #1
 8000742:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000746:	ea4f 0131 	mov.w	r1, r1, rrx
 800074a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800074e:	bf1f      	itttt	ne
 8000750:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000754:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000758:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800075c:	4770      	bxne	lr
 800075e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000762:	bf08      	it	eq
 8000764:	4770      	bxeq	lr
 8000766:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800076a:	bf04      	itt	eq
 800076c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000778:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800077c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000780:	e71c      	b.n	80005bc <__adddf3+0x138>
 8000782:	bf00      	nop

08000784 <__aeabi_ul2d>:
 8000784:	ea50 0201 	orrs.w	r2, r0, r1
 8000788:	bf08      	it	eq
 800078a:	4770      	bxeq	lr
 800078c:	b530      	push	{r4, r5, lr}
 800078e:	f04f 0500 	mov.w	r5, #0
 8000792:	e00a      	b.n	80007aa <__aeabi_l2d+0x16>

08000794 <__aeabi_l2d>:
 8000794:	ea50 0201 	orrs.w	r2, r0, r1
 8000798:	bf08      	it	eq
 800079a:	4770      	bxeq	lr
 800079c:	b530      	push	{r4, r5, lr}
 800079e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007a2:	d502      	bpl.n	80007aa <__aeabi_l2d+0x16>
 80007a4:	4240      	negs	r0, r0
 80007a6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007aa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007ae:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007b2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80007b6:	f43f aed8 	beq.w	800056a <__adddf3+0xe6>
 80007ba:	f04f 0203 	mov.w	r2, #3
 80007be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007c2:	bf18      	it	ne
 80007c4:	3203      	addne	r2, #3
 80007c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80007ca:	bf18      	it	ne
 80007cc:	3203      	addne	r2, #3
 80007ce:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80007d2:	f1c2 0320 	rsb	r3, r2, #32
 80007d6:	fa00 fc03 	lsl.w	ip, r0, r3
 80007da:	fa20 f002 	lsr.w	r0, r0, r2
 80007de:	fa01 fe03 	lsl.w	lr, r1, r3
 80007e2:	ea40 000e 	orr.w	r0, r0, lr
 80007e6:	fa21 f102 	lsr.w	r1, r1, r2
 80007ea:	4414      	add	r4, r2
 80007ec:	e6bd      	b.n	800056a <__adddf3+0xe6>
 80007ee:	bf00      	nop

080007f0 <__aeabi_d2uiz>:
 80007f0:	004a      	lsls	r2, r1, #1
 80007f2:	d211      	bcs.n	8000818 <__aeabi_d2uiz+0x28>
 80007f4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007f8:	d211      	bcs.n	800081e <__aeabi_d2uiz+0x2e>
 80007fa:	d50d      	bpl.n	8000818 <__aeabi_d2uiz+0x28>
 80007fc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000800:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000804:	d40e      	bmi.n	8000824 <__aeabi_d2uiz+0x34>
 8000806:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800080a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800080e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000812:	fa23 f002 	lsr.w	r0, r3, r2
 8000816:	4770      	bx	lr
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	4770      	bx	lr
 800081e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000822:	d102      	bne.n	800082a <__aeabi_d2uiz+0x3a>
 8000824:	f04f 30ff 	mov.w	r0, #4294967295
 8000828:	4770      	bx	lr
 800082a:	f04f 0000 	mov.w	r0, #0
 800082e:	4770      	bx	lr

08000830 <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	e002      	b.n	8000840 <Delay+0x10>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	3b01      	subs	r3, #1
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d1f9      	bne.n	800083a <Delay+0xa>
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <LCD_INIT>:

void LCD_INIT ( void )
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);
 8000858:	2001      	movs	r0, #1
 800085a:	f000 f829 	bl	80008b0 <LCD_BackLed_Control>
	LCD_Rst();
 800085e:	f000 f80f 	bl	8000880 <LCD_Rst>
	LCD_REG_Config();
 8000862:	f000 f85f 	bl	8000924 <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000866:	2300      	movs	r3, #0
 8000868:	9300      	str	r3, [sp, #0]
 800086a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800086e:	22f0      	movs	r2, #240	; 0xf0
 8000870:	2100      	movs	r1, #0
 8000872:	2000      	movs	r0, #0
 8000874:	f000 f9e7 	bl	8000c46 <LCD_Clear>
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
	...

08000880 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000880:	b580      	push	{r7, lr}
 8000882:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000884:	2200      	movs	r2, #0
 8000886:	2102      	movs	r1, #2
 8000888:	4807      	ldr	r0, [pc, #28]	; (80008a8 <LCD_Rst+0x28>)
 800088a:	f001 fbd2 	bl	8002032 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 800088e:	4807      	ldr	r0, [pc, #28]	; (80008ac <LCD_Rst+0x2c>)
 8000890:	f7ff ffce 	bl	8000830 <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2102      	movs	r1, #2
 8000898:	4803      	ldr	r0, [pc, #12]	; (80008a8 <LCD_Rst+0x28>)
 800089a:	f001 fbca 	bl	8002032 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 800089e:	4803      	ldr	r0, [pc, #12]	; (80008ac <LCD_Rst+0x2c>)
 80008a0:	f7ff ffc6 	bl	8000830 <Delay>
}
 80008a4:	bf00      	nop
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	40011800 	.word	0x40011800
 80008ac:	0002bffc 	.word	0x0002bffc

080008b0 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d006      	beq.n	80008ce <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 80008c0:	2200      	movs	r2, #0
 80008c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008c6:	4807      	ldr	r0, [pc, #28]	; (80008e4 <LCD_BackLed_Control+0x34>)
 80008c8:	f001 fbb3 	bl	8002032 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 80008cc:	e005      	b.n	80008da <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 80008ce:	2201      	movs	r2, #1
 80008d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008d4:	4803      	ldr	r0, [pc, #12]	; (80008e4 <LCD_BackLed_Control+0x34>)
 80008d6:	f001 fbac 	bl	8002032 <HAL_GPIO_WritePin>
}
 80008da:	bf00      	nop
 80008dc:	3708      	adds	r7, #8
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	40011400 	.word	0x40011400

080008e8 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 80008e8:	b480      	push	{r7}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 80008f2:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 80008f6:	88fb      	ldrh	r3, [r7, #6]
 80008f8:	8013      	strh	r3, [r2, #0]
}
 80008fa:	bf00      	nop
 80008fc:	370c      	adds	r7, #12
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 8000904:	b480      	push	{r7}
 8000906:	b083      	sub	sp, #12
 8000908:	af00      	add	r7, sp, #0
 800090a:	4603      	mov	r3, r0
 800090c:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 800090e:	4a04      	ldr	r2, [pc, #16]	; (8000920 <LCD_Write_Data+0x1c>)
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	8013      	strh	r3, [r2, #0]
}
 8000914:	bf00      	nop
 8000916:	370c      	adds	r7, #12
 8000918:	46bd      	mov	sp, r7
 800091a:	bc80      	pop	{r7}
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop
 8000920:	60020000 	.word	0x60020000

08000924 <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8000928:	20cf      	movs	r0, #207	; 0xcf
 800092a:	f7ff ffdd 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 800092e:	2000      	movs	r0, #0
 8000930:	f7ff ffe8 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 8000934:	2081      	movs	r0, #129	; 0x81
 8000936:	f7ff ffe5 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 800093a:	2030      	movs	r0, #48	; 0x30
 800093c:	f7ff ffe2 	bl	8000904 <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8000940:	20ed      	movs	r0, #237	; 0xed
 8000942:	f7ff ffd1 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 8000946:	2064      	movs	r0, #100	; 0x64
 8000948:	f7ff ffdc 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 800094c:	2003      	movs	r0, #3
 800094e:	f7ff ffd9 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 8000952:	2012      	movs	r0, #18
 8000954:	f7ff ffd6 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8000958:	2081      	movs	r0, #129	; 0x81
 800095a:	f7ff ffd3 	bl	8000904 <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 800095e:	20e8      	movs	r0, #232	; 0xe8
 8000960:	f7ff ffc2 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 8000964:	2085      	movs	r0, #133	; 0x85
 8000966:	f7ff ffcd 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 800096a:	2010      	movs	r0, #16
 800096c:	f7ff ffca 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8000970:	2078      	movs	r0, #120	; 0x78
 8000972:	f7ff ffc7 	bl	8000904 <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 8000976:	20cb      	movs	r0, #203	; 0xcb
 8000978:	f7ff ffb6 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 800097c:	2039      	movs	r0, #57	; 0x39
 800097e:	f7ff ffc1 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 8000982:	202c      	movs	r0, #44	; 0x2c
 8000984:	f7ff ffbe 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000988:	2000      	movs	r0, #0
 800098a:	f7ff ffbb 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 800098e:	2034      	movs	r0, #52	; 0x34
 8000990:	f7ff ffb8 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 8000994:	2002      	movs	r0, #2
 8000996:	f7ff ffb5 	bl	8000904 <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 800099a:	20f7      	movs	r0, #247	; 0xf7
 800099c:	f7ff ffa4 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80009a0:	2020      	movs	r0, #32
 80009a2:	f7ff ffaf 	bl	8000904 <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80009a6:	20ea      	movs	r0, #234	; 0xea
 80009a8:	f7ff ff9e 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80009ac:	2000      	movs	r0, #0
 80009ae:	f7ff ffa9 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80009b2:	2000      	movs	r0, #0
 80009b4:	f7ff ffa6 	bl	8000904 <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80009b8:	20b1      	movs	r0, #177	; 0xb1
 80009ba:	f7ff ff95 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff ffa0 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80009c4:	201b      	movs	r0, #27
 80009c6:	f7ff ff9d 	bl	8000904 <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80009ca:	20b6      	movs	r0, #182	; 0xb6
 80009cc:	f7ff ff8c 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80009d0:	200a      	movs	r0, #10
 80009d2:	f7ff ff97 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80009d6:	20a2      	movs	r0, #162	; 0xa2
 80009d8:	f7ff ff94 	bl	8000904 <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80009dc:	20c0      	movs	r0, #192	; 0xc0
 80009de:	f7ff ff83 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80009e2:	2035      	movs	r0, #53	; 0x35
 80009e4:	f7ff ff8e 	bl	8000904 <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80009e8:	20c1      	movs	r0, #193	; 0xc1
 80009ea:	f7ff ff7d 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80009ee:	2011      	movs	r0, #17
 80009f0:	f7ff ff88 	bl	8000904 <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80009f4:	20c5      	movs	r0, #197	; 0xc5
 80009f6:	f7ff ff77 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 80009fa:	2045      	movs	r0, #69	; 0x45
 80009fc:	f7ff ff82 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8000a00:	2045      	movs	r0, #69	; 0x45
 8000a02:	f7ff ff7f 	bl	8000904 <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 8000a06:	20c7      	movs	r0, #199	; 0xc7
 8000a08:	f7ff ff6e 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8000a0c:	20a2      	movs	r0, #162	; 0xa2
 8000a0e:	f7ff ff79 	bl	8000904 <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 8000a12:	20f2      	movs	r0, #242	; 0xf2
 8000a14:	f7ff ff68 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f7ff ff73 	bl	8000904 <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8000a1e:	2026      	movs	r0, #38	; 0x26
 8000a20:	f7ff ff62 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff ff6d 	bl	8000904 <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8000a2a:	20e0      	movs	r0, #224	; 0xe0
 8000a2c:	f7ff ff5c 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8000a30:	200f      	movs	r0, #15
 8000a32:	f7ff ff67 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 8000a36:	2026      	movs	r0, #38	; 0x26
 8000a38:	f7ff ff64 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8000a3c:	2024      	movs	r0, #36	; 0x24
 8000a3e:	f7ff ff61 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 8000a42:	200b      	movs	r0, #11
 8000a44:	f7ff ff5e 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8000a48:	200e      	movs	r0, #14
 8000a4a:	f7ff ff5b 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000a4e:	2009      	movs	r0, #9
 8000a50:	f7ff ff58 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 8000a54:	2054      	movs	r0, #84	; 0x54
 8000a56:	f7ff ff55 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8000a5a:	20a8      	movs	r0, #168	; 0xa8
 8000a5c:	f7ff ff52 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8000a60:	2046      	movs	r0, #70	; 0x46
 8000a62:	f7ff ff4f 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 8000a66:	200c      	movs	r0, #12
 8000a68:	f7ff ff4c 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8000a6c:	2017      	movs	r0, #23
 8000a6e:	f7ff ff49 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8000a72:	2009      	movs	r0, #9
 8000a74:	f7ff ff46 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000a78:	200f      	movs	r0, #15
 8000a7a:	f7ff ff43 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000a7e:	2007      	movs	r0, #7
 8000a80:	f7ff ff40 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000a84:	2000      	movs	r0, #0
 8000a86:	f7ff ff3d 	bl	8000904 <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8000a8a:	20e1      	movs	r0, #225	; 0xe1
 8000a8c:	f7ff ff2c 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff ff37 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 8000a96:	2019      	movs	r0, #25
 8000a98:	f7ff ff34 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 8000a9c:	201b      	movs	r0, #27
 8000a9e:	f7ff ff31 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 8000aa2:	2004      	movs	r0, #4
 8000aa4:	f7ff ff2e 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8000aa8:	2010      	movs	r0, #16
 8000aaa:	f7ff ff2b 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8000aae:	2007      	movs	r0, #7
 8000ab0:	f7ff ff28 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 8000ab4:	202a      	movs	r0, #42	; 0x2a
 8000ab6:	f7ff ff25 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 8000aba:	2047      	movs	r0, #71	; 0x47
 8000abc:	f7ff ff22 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 8000ac0:	2039      	movs	r0, #57	; 0x39
 8000ac2:	f7ff ff1f 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8000ac6:	2003      	movs	r0, #3
 8000ac8:	f7ff ff1c 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000acc:	2006      	movs	r0, #6
 8000ace:	f7ff ff19 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 8000ad2:	2006      	movs	r0, #6
 8000ad4:	f7ff ff16 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 8000ad8:	2030      	movs	r0, #48	; 0x30
 8000ada:	f7ff ff13 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 8000ade:	2038      	movs	r0, #56	; 0x38
 8000ae0:	f7ff ff10 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8000ae4:	200f      	movs	r0, #15
 8000ae6:	f7ff ff0d 	bl	8000904 <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 8000aea:	2036      	movs	r0, #54	; 0x36
 8000aec:	f7ff fefc 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 8000af0:	20c8      	movs	r0, #200	; 0xc8
 8000af2:	f7ff ff07 	bl	8000904 <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 8000af6:	202a      	movs	r0, #42	; 0x2a
 8000af8:	f7ff fef6 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000afc:	2000      	movs	r0, #0
 8000afe:	f7ff ff01 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000b02:	2000      	movs	r0, #0
 8000b04:	f7ff fefe 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000b08:	2000      	movs	r0, #0
 8000b0a:	f7ff fefb 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8000b0e:	20ef      	movs	r0, #239	; 0xef
 8000b10:	f7ff fef8 	bl	8000904 <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 8000b14:	202b      	movs	r0, #43	; 0x2b
 8000b16:	f7ff fee7 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f7ff fef2 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff feef 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 8000b26:	2001      	movs	r0, #1
 8000b28:	f7ff feec 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8000b2c:	203f      	movs	r0, #63	; 0x3f
 8000b2e:	f7ff fee9 	bl	8000904 <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 8000b32:	203a      	movs	r0, #58	; 0x3a
 8000b34:	f7ff fed8 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8000b38:	2055      	movs	r0, #85	; 0x55
 8000b3a:	f7ff fee3 	bl	8000904 <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8000b3e:	2011      	movs	r0, #17
 8000b40:	f7ff fed2 	bl	80008e8 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 8000b44:	4803      	ldr	r0, [pc, #12]	; (8000b54 <LCD_REG_Config+0x230>)
 8000b46:	f7ff fe73 	bl	8000830 <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8000b4a:	2029      	movs	r0, #41	; 0x29
 8000b4c:	f7ff fecc 	bl	80008e8 <LCD_Write_Cmd>
	
	
}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	0002bffc 	.word	0x0002bffc

08000b58 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8000b58:	b590      	push	{r4, r7, lr}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4604      	mov	r4, r0
 8000b60:	4608      	mov	r0, r1
 8000b62:	4611      	mov	r1, r2
 8000b64:	461a      	mov	r2, r3
 8000b66:	4623      	mov	r3, r4
 8000b68:	80fb      	strh	r3, [r7, #6]
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	80bb      	strh	r3, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
 8000b72:	4613      	mov	r3, r2
 8000b74:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 8000b76:	202a      	movs	r0, #42	; 0x2a
 8000b78:	f7ff feb6 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8000b7c:	88fb      	ldrh	r3, [r7, #6]
 8000b7e:	0a1b      	lsrs	r3, r3, #8
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f7ff febe 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8000b88:	88fb      	ldrh	r3, [r7, #6]
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	b29b      	uxth	r3, r3
 8000b8e:	4618      	mov	r0, r3
 8000b90:	f7ff feb8 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 8000b94:	88fa      	ldrh	r2, [r7, #6]
 8000b96:	887b      	ldrh	r3, [r7, #2]
 8000b98:	4413      	add	r3, r2
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	121b      	asrs	r3, r3, #8
 8000b9e:	b29b      	uxth	r3, r3
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f7ff feaf 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 8000ba6:	88fa      	ldrh	r2, [r7, #6]
 8000ba8:	887b      	ldrh	r3, [r7, #2]
 8000baa:	4413      	add	r3, r2
 8000bac:	b29b      	uxth	r3, r3
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	b29b      	uxth	r3, r3
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	b29b      	uxth	r3, r3
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	f7ff fea4 	bl	8000904 <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 8000bbc:	202b      	movs	r0, #43	; 0x2b
 8000bbe:	f7ff fe93 	bl	80008e8 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 8000bc2:	88bb      	ldrh	r3, [r7, #4]
 8000bc4:	0a1b      	lsrs	r3, r3, #8
 8000bc6:	b29b      	uxth	r3, r3
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fe9b 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 8000bce:	88bb      	ldrh	r3, [r7, #4]
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	b29b      	uxth	r3, r3
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff fe95 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 8000bda:	88ba      	ldrh	r2, [r7, #4]
 8000bdc:	883b      	ldrh	r3, [r7, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	3b01      	subs	r3, #1
 8000be2:	121b      	asrs	r3, r3, #8
 8000be4:	b29b      	uxth	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff fe8c 	bl	8000904 <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 8000bec:	88ba      	ldrh	r2, [r7, #4]
 8000bee:	883b      	ldrh	r3, [r7, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	b29b      	uxth	r3, r3
 8000bf4:	3b01      	subs	r3, #1
 8000bf6:	b29b      	uxth	r3, r3
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	b29b      	uxth	r3, r3
 8000bfc:	4618      	mov	r0, r3
 8000bfe:	f7ff fe81 	bl	8000904 <LCD_Write_Data>
	
}
 8000c02:	bf00      	nop
 8000c04:	370c      	adds	r7, #12
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd90      	pop	{r4, r7, pc}

08000c0a <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	b084      	sub	sp, #16
 8000c0e:	af00      	add	r7, sp, #0
 8000c10:	6078      	str	r0, [r7, #4]
 8000c12:	460b      	mov	r3, r1
 8000c14:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000c1a:	202c      	movs	r0, #44	; 0x2c
 8000c1c:	f7ff fe64 	bl	80008e8 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8000c20:	2300      	movs	r3, #0
 8000c22:	60fb      	str	r3, [r7, #12]
 8000c24:	e006      	b.n	8000c34 <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 8000c26:	887b      	ldrh	r3, [r7, #2]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fe6b 	bl	8000904 <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	3301      	adds	r3, #1
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d3f4      	bcc.n	8000c26 <LCD_FillColor+0x1c>
		
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3710      	adds	r7, #16
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 8000c46:	b590      	push	{r4, r7, lr}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	4604      	mov	r4, r0
 8000c4e:	4608      	mov	r0, r1
 8000c50:	4611      	mov	r1, r2
 8000c52:	461a      	mov	r2, r3
 8000c54:	4623      	mov	r3, r4
 8000c56:	80fb      	strh	r3, [r7, #6]
 8000c58:	4603      	mov	r3, r0
 8000c5a:	80bb      	strh	r3, [r7, #4]
 8000c5c:	460b      	mov	r3, r1
 8000c5e:	807b      	strh	r3, [r7, #2]
 8000c60:	4613      	mov	r3, r2
 8000c62:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 8000c64:	883b      	ldrh	r3, [r7, #0]
 8000c66:	887a      	ldrh	r2, [r7, #2]
 8000c68:	88b9      	ldrh	r1, [r7, #4]
 8000c6a:	88f8      	ldrh	r0, [r7, #6]
 8000c6c:	f7ff ff74 	bl	8000b58 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8000c70:	887b      	ldrh	r3, [r7, #2]
 8000c72:	883a      	ldrh	r2, [r7, #0]
 8000c74:	fb02 f303 	mul.w	r3, r2, r3
 8000c78:	461a      	mov	r2, r3
 8000c7a:	8b3b      	ldrh	r3, [r7, #24]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4610      	mov	r0, r2
 8000c80:	f7ff ffc3 	bl	8000c0a <LCD_FillColor>
	
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}

08000c8c <LCD_DrawChar>:
	
}   


void LCD_DrawChar ( uint16_t usC, uint16_t usP, const char cChar )
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	80fb      	strh	r3, [r7, #6]
 8000c96:	460b      	mov	r3, r1
 8000c98:	80bb      	strh	r3, [r7, #4]
 8000c9a:	4613      	mov	r3, r2
 8000c9c:	70fb      	strb	r3, [r7, #3]
	uint8_t ucTemp, ucRelativePositon, ucPage, ucColumn;

	
	ucRelativePositon = cChar - ' ';
 8000c9e:	78fb      	ldrb	r3, [r7, #3]
 8000ca0:	3b20      	subs	r3, #32
 8000ca2:	733b      	strb	r3, [r7, #12]
	
	LCD_OpenWindow ( usC, usP, WIDTH_EN_CHAR, HEIGHT_EN_CHAR );
 8000ca4:	88b9      	ldrh	r1, [r7, #4]
 8000ca6:	88f8      	ldrh	r0, [r7, #6]
 8000ca8:	2310      	movs	r3, #16
 8000caa:	2208      	movs	r2, #8
 8000cac:	f7ff ff54 	bl	8000b58 <LCD_OpenWindow>
	
	LCD_Write_Cmd ( CMD_SetPixel );	
 8000cb0:	202c      	movs	r0, #44	; 0x2c
 8000cb2:	f7ff fe19 	bl	80008e8 <LCD_Write_Cmd>
	
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	73bb      	strb	r3, [r7, #14]
 8000cba:	e023      	b.n	8000d04 <LCD_DrawChar+0x78>
	{
		ucTemp = ucAscii_1608 [ ucRelativePositon ] [ ucPage ];
 8000cbc:	7b3a      	ldrb	r2, [r7, #12]
 8000cbe:	7bbb      	ldrb	r3, [r7, #14]
 8000cc0:	4914      	ldr	r1, [pc, #80]	; (8000d14 <LCD_DrawChar+0x88>)
 8000cc2:	0112      	lsls	r2, r2, #4
 8000cc4:	440a      	add	r2, r1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	73fb      	strb	r3, [r7, #15]
		
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000ccc:	2300      	movs	r3, #0
 8000cce:	737b      	strb	r3, [r7, #13]
 8000cd0:	e012      	b.n	8000cf8 <LCD_DrawChar+0x6c>
		{
			if ( ucTemp & 0x01 )
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
 8000cd4:	f003 0301 	and.w	r3, r3, #1
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d003      	beq.n	8000ce4 <LCD_DrawChar+0x58>
				LCD_Write_Data ( BLACK );
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff fe11 	bl	8000904 <LCD_Write_Data>
 8000ce2:	e003      	b.n	8000cec <LCD_DrawChar+0x60>
			
			else
				LCD_Write_Data (  WHITE );
 8000ce4:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ce8:	f7ff fe0c 	bl	8000904 <LCD_Write_Data>
			
			ucTemp >>= 1;		
 8000cec:	7bfb      	ldrb	r3, [r7, #15]
 8000cee:	085b      	lsrs	r3, r3, #1
 8000cf0:	73fb      	strb	r3, [r7, #15]
		for ( ucColumn = 0; ucColumn < WIDTH_EN_CHAR; ucColumn ++ )
 8000cf2:	7b7b      	ldrb	r3, [r7, #13]
 8000cf4:	3301      	adds	r3, #1
 8000cf6:	737b      	strb	r3, [r7, #13]
 8000cf8:	7b7b      	ldrb	r3, [r7, #13]
 8000cfa:	2b07      	cmp	r3, #7
 8000cfc:	d9e9      	bls.n	8000cd2 <LCD_DrawChar+0x46>
	for ( ucPage = 0; ucPage < HEIGHT_EN_CHAR; ucPage ++ )
 8000cfe:	7bbb      	ldrb	r3, [r7, #14]
 8000d00:	3301      	adds	r3, #1
 8000d02:	73bb      	strb	r3, [r7, #14]
 8000d04:	7bbb      	ldrb	r3, [r7, #14]
 8000d06:	2b0f      	cmp	r3, #15
 8000d08:	d9d8      	bls.n	8000cbc <LCD_DrawChar+0x30>
			
		}
		
	}
	
}
 8000d0a:	bf00      	nop
 8000d0c:	bf00      	nop
 8000d0e:	3710      	adds	r7, #16
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0800346c 	.word	0x0800346c

08000d18 <LCD_DrawString>:




void LCD_DrawString ( uint16_t usC, uint16_t usP, const char * pStr )
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	603a      	str	r2, [r7, #0]
 8000d22:	80fb      	strh	r3, [r7, #6]
 8000d24:	460b      	mov	r3, r1
 8000d26:	80bb      	strh	r3, [r7, #4]
	while ( * pStr != '\0' )
 8000d28:	e01c      	b.n	8000d64 <LCD_DrawString+0x4c>
	{
		if ( ( usC - LCD_DispWindow_Start_COLUMN + WIDTH_EN_CHAR ) > LCD_DispWindow_COLUMN )
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	2be8      	cmp	r3, #232	; 0xe8
 8000d2e:	d904      	bls.n	8000d3a <LCD_DrawString+0x22>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000d30:	2300      	movs	r3, #0
 8000d32:	80fb      	strh	r3, [r7, #6]
			usP += HEIGHT_EN_CHAR;
 8000d34:	88bb      	ldrh	r3, [r7, #4]
 8000d36:	3310      	adds	r3, #16
 8000d38:	80bb      	strh	r3, [r7, #4]
		}
		
		if ( ( usP - LCD_DispWindow_Start_PAGE + HEIGHT_EN_CHAR ) > LCD_DispWindow_PAGE )
 8000d3a:	88bb      	ldrh	r3, [r7, #4]
 8000d3c:	f5b3 7f98 	cmp.w	r3, #304	; 0x130
 8000d40:	d903      	bls.n	8000d4a <LCD_DrawString+0x32>
		{
			usC = LCD_DispWindow_Start_COLUMN;
 8000d42:	2300      	movs	r3, #0
 8000d44:	80fb      	strh	r3, [r7, #6]
			usP = LCD_DispWindow_Start_PAGE;
 8000d46:	2300      	movs	r3, #0
 8000d48:	80bb      	strh	r3, [r7, #4]
		}
		
		LCD_DrawChar ( usC, usP, * pStr );
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	781a      	ldrb	r2, [r3, #0]
 8000d4e:	88b9      	ldrh	r1, [r7, #4]
 8000d50:	88fb      	ldrh	r3, [r7, #6]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff ff9a 	bl	8000c8c <LCD_DrawChar>
		
		pStr ++;
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	603b      	str	r3, [r7, #0]
		
		usC += WIDTH_EN_CHAR;
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	3308      	adds	r3, #8
 8000d62:	80fb      	strh	r3, [r7, #6]
	while ( * pStr != '\0' )
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	781b      	ldrb	r3, [r3, #0]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d1de      	bne.n	8000d2a <LCD_DrawString+0x12>
		
	}
	
}
 8000d6c:	bf00      	nop
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <LCD_DisplayInterface>:
    }
	
}


void LCD_DisplayInterface(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
	LCD_OpenWindow(0, 0, 240, 320);
 8000d7e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d82:	22f0      	movs	r2, #240	; 0xf0
 8000d84:	2100      	movs	r1, #0
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fee6 	bl	8000b58 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 8000d8c:	202c      	movs	r0, #44	; 0x2c
 8000d8e:	f7ff fdab 	bl	80008e8 <LCD_Write_Cmd>
	for(int i = 0; i < 320; i++){
 8000d92:	2300      	movs	r3, #0
 8000d94:	607b      	str	r3, [r7, #4]
 8000d96:	e018      	b.n	8000dca <LCD_DisplayInterface+0x52>
		for(int j = 0; j < 240; j++){
 8000d98:	2300      	movs	r3, #0
 8000d9a:	603b      	str	r3, [r7, #0]
 8000d9c:	e00f      	b.n	8000dbe <LCD_DisplayInterface+0x46>
			LCD_Write_Data (interface[i][j]);
 8000d9e:	490f      	ldr	r1, [pc, #60]	; (8000ddc <LCD_DisplayInterface+0x64>)
 8000da0:	687a      	ldr	r2, [r7, #4]
 8000da2:	4613      	mov	r3, r2
 8000da4:	011b      	lsls	r3, r3, #4
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	011b      	lsls	r3, r3, #4
 8000daa:	683a      	ldr	r2, [r7, #0]
 8000dac:	4413      	add	r3, r2
 8000dae:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000db2:	4618      	mov	r0, r3
 8000db4:	f7ff fda6 	bl	8000904 <LCD_Write_Data>
		for(int j = 0; j < 240; j++){
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	603b      	str	r3, [r7, #0]
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	2bef      	cmp	r3, #239	; 0xef
 8000dc2:	ddec      	ble.n	8000d9e <LCD_DisplayInterface+0x26>
	for(int i = 0; i < 320; i++){
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	3301      	adds	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8000dd0:	dbe2      	blt.n	8000d98 <LCD_DisplayInterface+0x20>
		}
	}

}
 8000dd2:	bf00      	nop
 8000dd4:	bf00      	nop
 8000dd6:	3708      	adds	r7, #8
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	08003a5c 	.word	0x08003a5c

08000de0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000de4:	f000 fe0a 	bl	80019fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000de8:	f000 f816 	bl	8000e18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dec:	f000 f85a 	bl	8000ea4 <MX_GPIO_Init>
  MX_FSMC_Init();
 8000df0:	f000 f92a 	bl	8001048 <MX_FSMC_Init>
  /* USER CODE BEGIN 2 */
  //LCD
  LCD_INIT();
 8000df4:	f7ff fd2d 	bl	8000852 <LCD_INIT>
  LCD_DisplayInterface();
 8000df8:	f7ff ffbe 	bl	8000d78 <LCD_DisplayInterface>
//	  for(int i= 0; i < 30; i++){
//		  LCD_DisplayNum(i);
//		  HAL_Delay(500);
//	  }

	    if ( ucXPT2046_TouchFlag == 1 )
 8000dfc:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <main+0x34>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	d1fa      	bne.n	8000dfc <main+0x1c>
	    {
	    	Check_touchkey();
 8000e06:	f000 fced 	bl	80017e4 <Check_touchkey>
	    	ucXPT2046_TouchFlag = 0;
 8000e0a:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <main+0x34>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
	    if ( ucXPT2046_TouchFlag == 1 )
 8000e10:	e7f4      	b.n	8000dfc <main+0x1c>
 8000e12:	bf00      	nop
 8000e14:	20000138 	.word	0x20000138

08000e18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b090      	sub	sp, #64	; 0x40
 8000e1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e1e:	f107 0318 	add.w	r3, r7, #24
 8000e22:	2228      	movs	r2, #40	; 0x28
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fe74 	bl	8002b14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e42:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e44:	2300      	movs	r3, #0
 8000e46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e48:	2301      	movs	r3, #1
 8000e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e50:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e54:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e56:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	4618      	mov	r0, r3
 8000e62:	f001 f921 	bl	80020a8 <HAL_RCC_OscConfig>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e6c:	f000 f950 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e70:	230f      	movs	r3, #15
 8000e72:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e74:	2302      	movs	r3, #2
 8000e76:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e86:	1d3b      	adds	r3, r7, #4
 8000e88:	2102      	movs	r1, #2
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fb8e 	bl	80025ac <HAL_RCC_ClockConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e96:	f000 f93b 	bl	8001110 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3740      	adds	r7, #64	; 0x40
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
	...

08000ea4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0318 	add.w	r3, r7, #24
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eb8:	4b5d      	ldr	r3, [pc, #372]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	4a5c      	ldr	r2, [pc, #368]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000ebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ec2:	6193      	str	r3, [r2, #24]
 8000ec4:	4b5a      	ldr	r3, [pc, #360]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000ec6:	699b      	ldr	r3, [r3, #24]
 8000ec8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ecc:	617b      	str	r3, [r7, #20]
 8000ece:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed0:	4b57      	ldr	r3, [pc, #348]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000ed2:	699b      	ldr	r3, [r3, #24]
 8000ed4:	4a56      	ldr	r2, [pc, #344]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000ed6:	f043 0310 	orr.w	r3, r3, #16
 8000eda:	6193      	str	r3, [r2, #24]
 8000edc:	4b54      	ldr	r3, [pc, #336]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ee8:	4b51      	ldr	r3, [pc, #324]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	4a50      	ldr	r2, [pc, #320]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000eee:	f043 0308 	orr.w	r3, r3, #8
 8000ef2:	6193      	str	r3, [r2, #24]
 8000ef4:	4b4e      	ldr	r3, [pc, #312]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	f003 0308 	and.w	r3, r3, #8
 8000efc:	60fb      	str	r3, [r7, #12]
 8000efe:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f00:	4b4b      	ldr	r3, [pc, #300]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	4a4a      	ldr	r2, [pc, #296]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000f06:	f043 0320 	orr.w	r3, r3, #32
 8000f0a:	6193      	str	r3, [r2, #24]
 8000f0c:	4b48      	ldr	r3, [pc, #288]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	f003 0320 	and.w	r3, r3, #32
 8000f14:	60bb      	str	r3, [r7, #8]
 8000f16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f18:	4b45      	ldr	r3, [pc, #276]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	4a44      	ldr	r2, [pc, #272]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000f1e:	f043 0304 	orr.w	r3, r3, #4
 8000f22:	6193      	str	r3, [r2, #24]
 8000f24:	4b42      	ldr	r3, [pc, #264]	; (8001030 <MX_GPIO_Init+0x18c>)
 8000f26:	699b      	ldr	r3, [r3, #24]
 8000f28:	f003 0304 	and.w	r3, r3, #4
 8000f2c:	607b      	str	r3, [r7, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_TP_Pin|dir1_Pin|LCD_TPE0_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000f30:	2200      	movs	r2, #0
 8000f32:	2147      	movs	r1, #71	; 0x47
 8000f34:	483f      	ldr	r0, [pc, #252]	; (8001034 <MX_GPIO_Init+0x190>)
 8000f36:	f001 f87c 	bl	8002032 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(step1_GPIO_Port, step1_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2110      	movs	r1, #16
 8000f3e:	483e      	ldr	r0, [pc, #248]	; (8001038 <MX_GPIO_Init+0x194>)
 8000f40:	f001 f877 	bl	8002032 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, onboard_led_Pin|onboard_ledB1_Pin|onboard_ledB5_Pin, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2123      	movs	r1, #35	; 0x23
 8000f48:	483c      	ldr	r0, [pc, #240]	; (800103c <MX_GPIO_Init+0x198>)
 8000f4a:	f001 f872 	bl	8002032 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|LCD_TPD13_Pin, GPIO_PIN_RESET);
 8000f4e:	2200      	movs	r2, #0
 8000f50:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8000f54:	483a      	ldr	r0, [pc, #232]	; (8001040 <MX_GPIO_Init+0x19c>)
 8000f56:	f001 f86c 	bl	8002032 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_TP_Pin dir1_Pin LCD_TPE0_Pin LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_TP_Pin|dir1_Pin|LCD_TPE0_Pin|LCD_RST_Pin;
 8000f5a:	2347      	movs	r3, #71	; 0x47
 8000f5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f62:	2300      	movs	r3, #0
 8000f64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f66:	2303      	movs	r3, #3
 8000f68:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f6a:	f107 0318 	add.w	r3, r7, #24
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4830      	ldr	r0, [pc, #192]	; (8001034 <MX_GPIO_Init+0x190>)
 8000f72:	f000 feb3 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TPE3_Pin */
  GPIO_InitStruct.Pin = LCD_TPE3_Pin;
 8000f76:	2308      	movs	r3, #8
 8000f78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_TPE3_GPIO_Port, &GPIO_InitStruct);
 8000f82:	f107 0318 	add.w	r3, r7, #24
 8000f86:	4619      	mov	r1, r3
 8000f88:	482a      	ldr	r0, [pc, #168]	; (8001034 <MX_GPIO_Init+0x190>)
 8000f8a:	f000 fea7 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TP_EXT14_Pin */
  GPIO_InitStruct.Pin = LCD_TP_EXT14_Pin;
 8000f8e:	2310      	movs	r3, #16
 8000f90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <MX_GPIO_Init+0x1a0>)
 8000f94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f96:	2301      	movs	r3, #1
 8000f98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_TP_EXT14_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	f107 0318 	add.w	r3, r7, #24
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4824      	ldr	r0, [pc, #144]	; (8001034 <MX_GPIO_Init+0x190>)
 8000fa2:	f000 fe9b 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : key2_Pin */
  GPIO_InitStruct.Pin = key2_Pin;
 8000fa6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000faa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key2_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 0318 	add.w	r3, r7, #24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	481f      	ldr	r0, [pc, #124]	; (8001038 <MX_GPIO_Init+0x194>)
 8000fbc:	f000 fe8e 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pin : step1_Pin */
  GPIO_InitStruct.Pin = step1_Pin;
 8000fc0:	2310      	movs	r3, #16
 8000fc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fcc:	2303      	movs	r3, #3
 8000fce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(step1_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 0318 	add.w	r3, r7, #24
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	4818      	ldr	r0, [pc, #96]	; (8001038 <MX_GPIO_Init+0x194>)
 8000fd8:	f000 fe80 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : onboard_led_Pin onboard_ledB1_Pin onboard_ledB5_Pin */
  GPIO_InitStruct.Pin = onboard_led_Pin|onboard_ledB1_Pin|onboard_ledB5_Pin;
 8000fdc:	2323      	movs	r3, #35	; 0x23
 8000fde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fe8:	2303      	movs	r3, #3
 8000fea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fec:	f107 0318 	add.w	r3, r7, #24
 8000ff0:	4619      	mov	r1, r3
 8000ff2:	4812      	ldr	r0, [pc, #72]	; (800103c <MX_GPIO_Init+0x198>)
 8000ff4:	f000 fe72 	bl	8001cdc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_TPD13_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_TPD13_Pin;
 8000ff8:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8000ffc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001006:	2303      	movs	r3, #3
 8001008:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800100a:	f107 0318 	add.w	r3, r7, #24
 800100e:	4619      	mov	r1, r3
 8001010:	480b      	ldr	r0, [pc, #44]	; (8001040 <MX_GPIO_Init+0x19c>)
 8001012:	f000 fe63 	bl	8001cdc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001016:	2200      	movs	r2, #0
 8001018:	2100      	movs	r1, #0
 800101a:	200a      	movs	r0, #10
 800101c:	f000 fe27 	bl	8001c6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001020:	200a      	movs	r0, #10
 8001022:	f000 fe40 	bl	8001ca6 <HAL_NVIC_EnableIRQ>

}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	40021000 	.word	0x40021000
 8001034:	40011800 	.word	0x40011800
 8001038:	40011000 	.word	0x40011000
 800103c:	40010c00 	.word	0x40010c00
 8001040:	40011400 	.word	0x40011400
 8001044:	10210000 	.word	0x10210000

08001048 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001060:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_FSMC_Init+0xbc>)
 8001062:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001066:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_FSMC_Init+0xbc>)
 800106a:	4a27      	ldr	r2, [pc, #156]	; (8001108 <MX_FSMC_Init+0xc0>)
 800106c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800106e:	4b25      	ldr	r3, [pc, #148]	; (8001104 <MX_FSMC_Init+0xbc>)
 8001070:	2200      	movs	r2, #0
 8001072:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001074:	4b23      	ldr	r3, [pc, #140]	; (8001104 <MX_FSMC_Init+0xbc>)
 8001076:	2200      	movs	r2, #0
 8001078:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800107a:	4b22      	ldr	r3, [pc, #136]	; (8001104 <MX_FSMC_Init+0xbc>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001080:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_FSMC_Init+0xbc>)
 8001082:	2210      	movs	r2, #16
 8001084:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001086:	4b1f      	ldr	r3, [pc, #124]	; (8001104 <MX_FSMC_Init+0xbc>)
 8001088:	2200      	movs	r2, #0
 800108a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800108c:	4b1d      	ldr	r3, [pc, #116]	; (8001104 <MX_FSMC_Init+0xbc>)
 800108e:	2200      	movs	r2, #0
 8001090:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_FSMC_Init+0xbc>)
 8001094:	2200      	movs	r2, #0
 8001096:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001098:	4b1a      	ldr	r3, [pc, #104]	; (8001104 <MX_FSMC_Init+0xbc>)
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800109e:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_FSMC_Init+0xbc>)
 80010a0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010a4:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80010a6:	4b17      	ldr	r3, [pc, #92]	; (8001104 <MX_FSMC_Init+0xbc>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80010ac:	4b15      	ldr	r3, [pc, #84]	; (8001104 <MX_FSMC_Init+0xbc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80010b2:	4b14      	ldr	r3, [pc, #80]	; (8001104 <MX_FSMC_Init+0xbc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80010b8:	4b12      	ldr	r3, [pc, #72]	; (8001104 <MX_FSMC_Init+0xbc>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 80010be:	230f      	movs	r3, #15
 80010c0:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80010c2:	230f      	movs	r3, #15
 80010c4:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80010c6:	23ff      	movs	r3, #255	; 0xff
 80010c8:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80010ca:	230f      	movs	r3, #15
 80010cc:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80010ce:	2310      	movs	r3, #16
 80010d0:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80010d2:	2311      	movs	r3, #17
 80010d4:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80010da:	1d3b      	adds	r3, r7, #4
 80010dc:	2200      	movs	r2, #0
 80010de:	4619      	mov	r1, r3
 80010e0:	4808      	ldr	r0, [pc, #32]	; (8001104 <MX_FSMC_Init+0xbc>)
 80010e2:	f001 fbc9 	bl	8002878 <HAL_SRAM_Init>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 80010ec:	f000 f810 	bl	8001110 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_FSMC_Init+0xc4>)
 80010f2:	69db      	ldr	r3, [r3, #28]
 80010f4:	4a05      	ldr	r2, [pc, #20]	; (800110c <MX_FSMC_Init+0xc4>)
 80010f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fa:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80010fc:	bf00      	nop
 80010fe:	3720      	adds	r7, #32
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	200000e8 	.word	0x200000e8
 8001108:	a0000104 	.word	0xa0000104
 800110c:	40010000 	.word	0x40010000

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	e7fe      	b.n	8001118 <Error_Handler+0x8>
	...

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001122:	4b15      	ldr	r3, [pc, #84]	; (8001178 <HAL_MspInit+0x5c>)
 8001124:	699b      	ldr	r3, [r3, #24]
 8001126:	4a14      	ldr	r2, [pc, #80]	; (8001178 <HAL_MspInit+0x5c>)
 8001128:	f043 0301 	orr.w	r3, r3, #1
 800112c:	6193      	str	r3, [r2, #24]
 800112e:	4b12      	ldr	r3, [pc, #72]	; (8001178 <HAL_MspInit+0x5c>)
 8001130:	699b      	ldr	r3, [r3, #24]
 8001132:	f003 0301 	and.w	r3, r3, #1
 8001136:	60bb      	str	r3, [r7, #8]
 8001138:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b0f      	ldr	r3, [pc, #60]	; (8001178 <HAL_MspInit+0x5c>)
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_MspInit+0x5c>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	61d3      	str	r3, [r2, #28]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <HAL_MspInit+0x5c>)
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001152:	4b0a      	ldr	r3, [pc, #40]	; (800117c <HAL_MspInit+0x60>)
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001166:	60fb      	str	r3, [r7, #12]
 8001168:	4a04      	ldr	r2, [pc, #16]	; (800117c <HAL_MspInit+0x60>)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116e:	bf00      	nop
 8001170:	3714      	adds	r7, #20
 8001172:	46bd      	mov	sp, r7
 8001174:	bc80      	pop	{r7}
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000

08001180 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001186:	f107 0308 	add.w	r3, r7, #8
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]
 800118e:	605a      	str	r2, [r3, #4]
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8001194:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_FSMC_MspInit+0x78>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d129      	bne.n	80011f0 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 800119c:	4b16      	ldr	r3, [pc, #88]	; (80011f8 <HAL_FSMC_MspInit+0x78>)
 800119e:	2201      	movs	r2, #1
 80011a0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80011a2:	4b16      	ldr	r3, [pc, #88]	; (80011fc <HAL_FSMC_MspInit+0x7c>)
 80011a4:	695b      	ldr	r3, [r3, #20]
 80011a6:	4a15      	ldr	r2, [pc, #84]	; (80011fc <HAL_FSMC_MspInit+0x7c>)
 80011a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ac:	6153      	str	r3, [r2, #20]
 80011ae:	4b13      	ldr	r3, [pc, #76]	; (80011fc <HAL_FSMC_MspInit+0x7c>)
 80011b0:	695b      	ldr	r3, [r3, #20]
 80011b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80011ba:	f64f 7380 	movw	r3, #65408	; 0xff80
 80011be:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011c4:	2303      	movs	r3, #3
 80011c6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011c8:	f107 0308 	add.w	r3, r7, #8
 80011cc:	4619      	mov	r1, r3
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <HAL_FSMC_MspInit+0x80>)
 80011d0:	f000 fd84 	bl	8001cdc <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80011d4:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 80011d8:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011de:	2303      	movs	r3, #3
 80011e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f107 0308 	add.w	r3, r7, #8
 80011e6:	4619      	mov	r1, r3
 80011e8:	4806      	ldr	r0, [pc, #24]	; (8001204 <HAL_FSMC_MspInit+0x84>)
 80011ea:	f000 fd77 	bl	8001cdc <HAL_GPIO_Init>
 80011ee:	e000      	b.n	80011f2 <HAL_FSMC_MspInit+0x72>
    return;
 80011f0:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000130 	.word	0x20000130
 80011fc:	40021000 	.word	0x40021000
 8001200:	40011800 	.word	0x40011800
 8001204:	40011400 	.word	0x40011400

08001208 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8001210:	f7ff ffb6 	bl	8001180 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler+0x4>

08001222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <HardFault_Handler+0x4>

08001228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <MemManage_Handler+0x4>

0800122e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001232:	e7fe      	b.n	8001232 <BusFault_Handler+0x4>

08001234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <UsageFault_Handler+0x4>

0800123a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	bc80      	pop	{r7}
 8001244:	4770      	bx	lr

08001246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	bc80      	pop	{r7}
 8001250:	4770      	bx	lr

08001252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	bc80      	pop	{r7}
 800125c:	4770      	bx	lr

0800125e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001262:	f000 fc11 	bl	8001a88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001266:	bf00      	nop
 8001268:	bd80      	pop	{r7, pc}
	...

0800126c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <EXTI4_IRQHandler+0x2c>)
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	f003 0310 	and.w	r3, r3, #16
 8001278:	2b00      	cmp	r3, #0
 800127a:	d008      	beq.n	800128e <EXTI4_IRQHandler+0x22>
	  {
			  ucXPT2046_TouchFlag = 1;
 800127c:	4b07      	ldr	r3, [pc, #28]	; (800129c <EXTI4_IRQHandler+0x30>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8001282:	4b05      	ldr	r3, [pc, #20]	; (8001298 <EXTI4_IRQHandler+0x2c>)
 8001284:	2210      	movs	r2, #16
 8001286:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8001288:	2010      	movs	r0, #16
 800128a:	f000 ff03 	bl	8002094 <HAL_GPIO_EXTI_Callback>
	  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_TP_EXT14_Pin);
 800128e:	2010      	movs	r0, #16
 8001290:	f000 fee8 	bl	8002064 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	40010400 	.word	0x40010400
 800129c:	20000138 	.word	0x20000138

080012a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012a8:	4a14      	ldr	r2, [pc, #80]	; (80012fc <_sbrk+0x5c>)
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <_sbrk+0x60>)
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012b4:	4b13      	ldr	r3, [pc, #76]	; (8001304 <_sbrk+0x64>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d102      	bne.n	80012c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012bc:	4b11      	ldr	r3, [pc, #68]	; (8001304 <_sbrk+0x64>)
 80012be:	4a12      	ldr	r2, [pc, #72]	; (8001308 <_sbrk+0x68>)
 80012c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012c2:	4b10      	ldr	r3, [pc, #64]	; (8001304 <_sbrk+0x64>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4413      	add	r3, r2
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d207      	bcs.n	80012e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012d0:	f001 fbf6 	bl	8002ac0 <__errno>
 80012d4:	4603      	mov	r3, r0
 80012d6:	220c      	movs	r2, #12
 80012d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012da:	f04f 33ff 	mov.w	r3, #4294967295
 80012de:	e009      	b.n	80012f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012e6:	4b07      	ldr	r3, [pc, #28]	; (8001304 <_sbrk+0x64>)
 80012e8:	681a      	ldr	r2, [r3, #0]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	4413      	add	r3, r2
 80012ee:	4a05      	ldr	r2, [pc, #20]	; (8001304 <_sbrk+0x64>)
 80012f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012f2:	68fb      	ldr	r3, [r7, #12]
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3718      	adds	r7, #24
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20010000 	.word	0x20010000
 8001300:	00000400 	.word	0x00000400
 8001304:	20000134 	.word	0x20000134
 8001308:	20000150 	.word	0x20000150

0800130c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001310:	bf00      	nop
 8001312:	46bd      	mov	sp, r7
 8001314:	bc80      	pop	{r7}
 8001316:	4770      	bx	lr

08001318 <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8001318:	b480      	push	{r7}
 800131a:	b085      	sub	sp, #20
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 8001320:	2300      	movs	r3, #0
 8001322:	60fb      	str	r3, [r7, #12]
 8001324:	e00a      	b.n	800133c <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 8001326:	230c      	movs	r3, #12
 8001328:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 800132a:	bf00      	nop
 800132c:	7afb      	ldrb	r3, [r7, #11]
 800132e:	1e5a      	subs	r2, r3, #1
 8001330:	72fa      	strb	r2, [r7, #11]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d1fa      	bne.n	800132c <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68fa      	ldr	r2, [r7, #12]
 8001340:	429a      	cmp	r2, r3
 8001342:	d3f0      	bcc.n	8001326 <XPT2046_DelayUS+0xe>

	}
	
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3714      	adds	r7, #20
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr

08001350 <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b084      	sub	sp, #16
 8001354:	af00      	add	r7, sp, #0
 8001356:	4603      	mov	r3, r0
 8001358:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 800135a:	2200      	movs	r2, #0
 800135c:	2104      	movs	r1, #4
 800135e:	481d      	ldr	r0, [pc, #116]	; (80013d4 <XPT2046_WriteCMD+0x84>)
 8001360:	f000 fe67 	bl	8002032 <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 8001364:	2200      	movs	r2, #0
 8001366:	2101      	movs	r1, #1
 8001368:	481a      	ldr	r0, [pc, #104]	; (80013d4 <XPT2046_WriteCMD+0x84>)
 800136a:	f000 fe62 	bl	8002032 <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 800136e:	2300      	movs	r3, #0
 8001370:	73fb      	strb	r3, [r7, #15]
 8001372:	e027      	b.n	80013c4 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8001374:	79fa      	ldrb	r2, [r7, #7]
 8001376:	7bfb      	ldrb	r3, [r7, #15]
 8001378:	f1c3 0307 	rsb	r3, r3, #7
 800137c:	fa42 f303 	asr.w	r3, r2, r3
 8001380:	f003 0301 	and.w	r3, r3, #1
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <XPT2046_WriteCMD+0x44>
 8001388:	2201      	movs	r2, #1
 800138a:	2104      	movs	r1, #4
 800138c:	4811      	ldr	r0, [pc, #68]	; (80013d4 <XPT2046_WriteCMD+0x84>)
 800138e:	f000 fe50 	bl	8002032 <HAL_GPIO_WritePin>
 8001392:	e004      	b.n	800139e <XPT2046_WriteCMD+0x4e>
 8001394:	2200      	movs	r2, #0
 8001396:	2104      	movs	r1, #4
 8001398:	480e      	ldr	r0, [pc, #56]	; (80013d4 <XPT2046_WriteCMD+0x84>)
 800139a:	f000 fe4a 	bl	8002032 <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 800139e:	2005      	movs	r0, #5
 80013a0:	f7ff ffba 	bl	8001318 <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 80013a4:	2201      	movs	r2, #1
 80013a6:	2101      	movs	r1, #1
 80013a8:	480a      	ldr	r0, [pc, #40]	; (80013d4 <XPT2046_WriteCMD+0x84>)
 80013aa:	f000 fe42 	bl	8002032 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 80013ae:	2005      	movs	r0, #5
 80013b0:	f7ff ffb2 	bl	8001318 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80013b4:	2200      	movs	r2, #0
 80013b6:	2101      	movs	r1, #1
 80013b8:	4806      	ldr	r0, [pc, #24]	; (80013d4 <XPT2046_WriteCMD+0x84>)
 80013ba:	f000 fe3a 	bl	8002032 <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 80013be:	7bfb      	ldrb	r3, [r7, #15]
 80013c0:	3301      	adds	r3, #1
 80013c2:	73fb      	strb	r3, [r7, #15]
 80013c4:	7bfb      	ldrb	r3, [r7, #15]
 80013c6:	2b07      	cmp	r3, #7
 80013c8:	d9d4      	bls.n	8001374 <XPT2046_WriteCMD+0x24>
	}
	
}
 80013ca:	bf00      	nop
 80013cc:	bf00      	nop
 80013ce:	3710      	adds	r7, #16
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}
 80013d4:	40011800 	.word	0x40011800

080013d8 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 80013de:	2300      	movs	r3, #0
 80013e0:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 80013e2:	2200      	movs	r2, #0
 80013e4:	2104      	movs	r1, #4
 80013e6:	4819      	ldr	r0, [pc, #100]	; (800144c <XPT2046_ReadCMD+0x74>)
 80013e8:	f000 fe23 	bl	8002032 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80013ec:	2201      	movs	r2, #1
 80013ee:	2101      	movs	r1, #1
 80013f0:	4816      	ldr	r0, [pc, #88]	; (800144c <XPT2046_ReadCMD+0x74>)
 80013f2:	f000 fe1e 	bl	8002032 <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 80013f6:	2300      	movs	r3, #0
 80013f8:	71fb      	strb	r3, [r7, #7]
 80013fa:	e01e      	b.n	800143a <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 80013fc:	2200      	movs	r2, #0
 80013fe:	2101      	movs	r1, #1
 8001400:	4812      	ldr	r0, [pc, #72]	; (800144c <XPT2046_ReadCMD+0x74>)
 8001402:	f000 fe16 	bl	8002032 <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 8001406:	2108      	movs	r1, #8
 8001408:	4810      	ldr	r0, [pc, #64]	; (800144c <XPT2046_ReadCMD+0x74>)
 800140a:	f000 fdfb 	bl	8002004 <HAL_GPIO_ReadPin>
 800140e:	4603      	mov	r3, r0
 8001410:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 8001412:	887a      	ldrh	r2, [r7, #2]
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	f1c3 030b 	rsb	r3, r3, #11
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	b21a      	sxth	r2, r3
 8001420:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001424:	4313      	orrs	r3, r2
 8001426:	b21b      	sxth	r3, r3
 8001428:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 800142a:	2201      	movs	r2, #1
 800142c:	2101      	movs	r1, #1
 800142e:	4807      	ldr	r0, [pc, #28]	; (800144c <XPT2046_ReadCMD+0x74>)
 8001430:	f000 fdff 	bl	8002032 <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	3301      	adds	r3, #1
 8001438:	71fb      	strb	r3, [r7, #7]
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	2b0b      	cmp	r3, #11
 800143e:	d9dd      	bls.n	80013fc <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 8001440:	88bb      	ldrh	r3, [r7, #4]

}
 8001442:	4618      	mov	r0, r3
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40011800 	.word	0x40011800

08001450 <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	4603      	mov	r3, r0
 8001458:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff ff77 	bl	8001350 <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 8001462:	f7ff ffb9 	bl	80013d8 <XPT2046_ReadCMD>
 8001466:	4603      	mov	r3, r0
	
}
 8001468:	4618      	mov	r0, r3
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 800147a:	2090      	movs	r0, #144	; 0x90
 800147c:	f7ff ffe8 	bl	8001450 <XPT2046_ReadAdc>
 8001480:	4603      	mov	r3, r0
 8001482:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 8001484:	2001      	movs	r0, #1
 8001486:	f7ff ff47 	bl	8001318 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 800148a:	20d0      	movs	r0, #208	; 0xd0
 800148c:	f7ff ffe0 	bl	8001450 <XPT2046_ReadAdc>
 8001490:	4603      	mov	r3, r0
 8001492:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	89fa      	ldrh	r2, [r7, #14]
 8001498:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	89ba      	ldrh	r2, [r7, #12]
 800149e:	801a      	strh	r2, [r3, #0]
	
	
}
 80014a0:	bf00      	nop
 80014a2:	3710      	adds	r7, #16
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <XPT2046_ReadAdc_Smooth_XY>:


static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b092      	sub	sp, #72	; 0x48
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80014b0:	2300      	movs	r3, #0
 80014b2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 80014b6:	f107 0308 	add.w	r3, r7, #8
 80014ba:	2228      	movs	r2, #40	; 0x28
 80014bc:	2100      	movs	r1, #0
 80014be:	4618      	mov	r0, r3
 80014c0:	f001 fb28 	bl	8002b14 <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 80014c4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80014c8:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80014cc:	4611      	mov	r1, r2
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff ffce 	bl	8001470 <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 80014d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014d8:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	3348      	adds	r3, #72	; 0x48
 80014e0:	443b      	add	r3, r7
 80014e2:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 80014e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014ea:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80014ee:	330a      	adds	r3, #10
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	3348      	adds	r3, #72	; 0x48
 80014f4:	443b      	add	r3, r7
 80014f6:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 80014fa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80014fe:	3301      	adds	r3, #1
 8001500:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8001504:	2110      	movs	r1, #16
 8001506:	4871      	ldr	r0, [pc, #452]	; (80016cc <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8001508:	f000 fd7c 	bl	8002004 <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <XPT2046_ReadAdc_Smooth_XY+0x72>
 8001512:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001516:	2b09      	cmp	r3, #9
 8001518:	d9d4      	bls.n	80014c4 <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 800151a:	2110      	movs	r1, #16
 800151c:	486b      	ldr	r0, [pc, #428]	; (80016cc <XPT2046_ReadAdc_Smooth_XY+0x224>)
 800151e:	f000 fd71 	bl	8002004 <HAL_GPIO_ReadPin>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 8001528:	4b69      	ldr	r3, [pc, #420]	; (80016d0 <XPT2046_ReadAdc_Smooth_XY+0x228>)
 800152a:	2200      	movs	r2, #0
 800152c:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 800152e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8001532:	2b0a      	cmp	r3, #10
 8001534:	f040 80c4 	bne.w	80016c0 <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8001538:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 800153c:	643b      	str	r3, [r7, #64]	; 0x40
 800153e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001540:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 8001542:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001546:	63bb      	str	r3, [r7, #56]	; 0x38
 8001548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
		
		for ( i = 1; i < 10; i ++ )
 800154c:	2301      	movs	r3, #1
 800154e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8001552:	e02b      	b.n	80015ac <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8001554:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	3348      	adds	r3, #72	; 0x48
 800155c:	443b      	add	r3, r7
 800155e:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001562:	461a      	mov	r2, r3
 8001564:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001566:	4293      	cmp	r3, r2
 8001568:	dd08      	ble.n	800157c <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 800156a:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	3348      	adds	r3, #72	; 0x48
 8001572:	443b      	add	r3, r7
 8001574:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001578:	643b      	str	r3, [r7, #64]	; 0x40
 800157a:	e012      	b.n	80015a2 <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 800157c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	3348      	adds	r3, #72	; 0x48
 8001584:	443b      	add	r3, r7
 8001586:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800158a:	461a      	mov	r2, r3
 800158c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800158e:	4293      	cmp	r3, r2
 8001590:	da07      	bge.n	80015a2 <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 8001592:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	3348      	adds	r3, #72	; 0x48
 800159a:	443b      	add	r3, r7
 800159c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80015a0:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 80015a2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015a6:	3301      	adds	r3, #1
 80015a8:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80015ac:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015b0:	2b09      	cmp	r3, #9
 80015b2:	d9cf      	bls.n	8001554 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 80015b4:	2301      	movs	r3, #1
 80015b6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80015ba:	e02f      	b.n	800161c <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 80015bc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015c0:	330a      	adds	r3, #10
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	3348      	adds	r3, #72	; 0x48
 80015c6:	443b      	add	r3, r7
 80015c8:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80015cc:	461a      	mov	r2, r3
 80015ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80015d0:	4293      	cmp	r3, r2
 80015d2:	dd09      	ble.n	80015e8 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 80015d4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015d8:	330a      	adds	r3, #10
 80015da:	005b      	lsls	r3, r3, #1
 80015dc:	3348      	adds	r3, #72	; 0x48
 80015de:	443b      	add	r3, r7
 80015e0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80015e4:	63bb      	str	r3, [r7, #56]	; 0x38
 80015e6:	e014      	b.n	8001612 <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 80015e8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80015ec:	330a      	adds	r3, #10
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	3348      	adds	r3, #72	; 0x48
 80015f2:	443b      	add	r3, r7
 80015f4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80015f8:	461a      	mov	r2, r3
 80015fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80015fc:	4293      	cmp	r3, r2
 80015fe:	da08      	bge.n	8001612 <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 8001600:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001604:	330a      	adds	r3, #10
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	3348      	adds	r3, #72	; 0x48
 800160a:	443b      	add	r3, r7
 800160c:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 8001612:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001616:	3301      	adds	r3, #1
 8001618:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800161c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8001620:	2b09      	cmp	r3, #9
 8001622:	d9cb      	bls.n	80015bc <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8001624:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001628:	461a      	mov	r2, r3
 800162a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800162e:	4413      	add	r3, r2
 8001630:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001634:	4413      	add	r3, r2
 8001636:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800163a:	4413      	add	r3, r2
 800163c:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001640:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8001642:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8001646:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8001648:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800164c:	4413      	add	r3, r2
 800164e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001652:	4413      	add	r3, r2
 8001654:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001658:	4413      	add	r3, r2
 800165a:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800165e:	441a      	add	r2, r3
 8001660:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001662:	1ad2      	subs	r2, r2, r3
 8001664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 800166a:	b29a      	uxth	r2, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8001670:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001674:	461a      	mov	r2, r3
 8001676:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800167a:	4413      	add	r3, r2
 800167c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001680:	4413      	add	r3, r2
 8001682:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001686:	4413      	add	r3, r2
 8001688:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 800168c:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 800168e:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 8001692:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8001694:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8001698:	4413      	add	r3, r2
 800169a:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800169e:	4413      	add	r3, r2
 80016a0:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80016a4:	4413      	add	r3, r2
 80016a6:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80016aa:	441a      	add	r2, r3
 80016ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016ae:	1ad2      	subs	r2, r2, r3
 80016b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 80016bc:	2301      	movs	r3, #1
 80016be:	e000      	b.n	80016c2 <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 80016c0:	2300      	movs	r3, #0
	
	
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3748      	adds	r7, #72	; 0x48
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40011800 	.word	0x40011800
 80016d0:	20000138 	.word	0x20000138

080016d4 <XPT2046_Get_TouchedPoint>:



uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 80016d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80016d8:	b084      	sub	sp, #16
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
 80016de:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 80016e0:	2301      	movs	r3, #1
 80016e2:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 80016e4:	f107 0308 	add.w	r3, r7, #8
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff fedd 	bl	80014a8 <XPT2046_ReadAdc_Smooth_XY>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d06e      	beq.n	80017d2 <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	e9d3 4500 	ldrd	r4, r5, [r3]
 80016fa:	893b      	ldrh	r3, [r7, #8]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff f80d 	bl	800071c <__aeabi_i2d>
 8001702:	4602      	mov	r2, r0
 8001704:	460b      	mov	r3, r1
 8001706:	4620      	mov	r0, r4
 8001708:	4629      	mov	r1, r5
 800170a:	f7fe fd8b 	bl	8000224 <__aeabi_dmul>
 800170e:	4602      	mov	r2, r0
 8001710:	460b      	mov	r3, r1
 8001712:	4690      	mov	r8, r2
 8001714:	4699      	mov	r9, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 800171c:	897b      	ldrh	r3, [r7, #10]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fffc 	bl	800071c <__aeabi_i2d>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4620      	mov	r0, r4
 800172a:	4629      	mov	r1, r5
 800172c:	f7fe fd7a 	bl	8000224 <__aeabi_dmul>
 8001730:	4602      	mov	r2, r0
 8001732:	460b      	mov	r3, r1
 8001734:	4640      	mov	r0, r8
 8001736:	4649      	mov	r1, r9
 8001738:	f7fe fea4 	bl	8000484 <__adddf3>
 800173c:	4602      	mov	r2, r0
 800173e:	460b      	mov	r3, r1
 8001740:	4610      	mov	r0, r2
 8001742:	4619      	mov	r1, r3
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800174a:	f7fe fe9b 	bl	8000484 <__adddf3>
 800174e:	4602      	mov	r2, r0
 8001750:	460b      	mov	r3, r1
 8001752:	4610      	mov	r0, r2
 8001754:	4619      	mov	r1, r3
 8001756:	f7ff f84b 	bl	80007f0 <__aeabi_d2uiz>
 800175a:	4603      	mov	r3, r0
 800175c:	b29a      	uxth	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8001768:	893b      	ldrh	r3, [r7, #8]
 800176a:	4618      	mov	r0, r3
 800176c:	f7fe ffd6 	bl	800071c <__aeabi_i2d>
 8001770:	4602      	mov	r2, r0
 8001772:	460b      	mov	r3, r1
 8001774:	4620      	mov	r0, r4
 8001776:	4629      	mov	r1, r5
 8001778:	f7fe fd54 	bl	8000224 <__aeabi_dmul>
 800177c:	4602      	mov	r2, r0
 800177e:	460b      	mov	r3, r1
 8001780:	4690      	mov	r8, r2
 8001782:	4699      	mov	r9, r3
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800178a:	897b      	ldrh	r3, [r7, #10]
 800178c:	4618      	mov	r0, r3
 800178e:	f7fe ffc5 	bl	800071c <__aeabi_i2d>
 8001792:	4602      	mov	r2, r0
 8001794:	460b      	mov	r3, r1
 8001796:	4620      	mov	r0, r4
 8001798:	4629      	mov	r1, r5
 800179a:	f7fe fd43 	bl	8000224 <__aeabi_dmul>
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	4640      	mov	r0, r8
 80017a4:	4649      	mov	r1, r9
 80017a6:	f7fe fe6d 	bl	8000484 <__adddf3>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	4610      	mov	r0, r2
 80017b0:	4619      	mov	r1, r3
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80017b8:	f7fe fe64 	bl	8000484 <__adddf3>
 80017bc:	4602      	mov	r2, r0
 80017be:	460b      	mov	r3, r1
 80017c0:	4610      	mov	r0, r2
 80017c2:	4619      	mov	r1, r3
 80017c4:	f7ff f814 	bl	80007f0 <__aeabi_d2uiz>
 80017c8:	4603      	mov	r3, r0
 80017ca:	b29a      	uxth	r2, r3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	805a      	strh	r2, [r3, #2]
 80017d0:	e001      	b.n	80017d6 <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 80017d2:	2300      	movs	r3, #0
 80017d4:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 80017d6:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080017e4 <Check_touchkey>:
ButtonCoordinates AutoButton = { { 180, 185 }, { 270, 210 } };
ButtonCoordinates UpButton = { { 240, 30 }, { 300, 90 } };
ButtonCoordinates DownButton = { { 240, 100 }, { 300, 150 } };

void Check_touchkey(void)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b096      	sub	sp, #88	; 0x58
 80017e8:	af02      	add	r7, sp, #8
		strType_XPT2046_Coordinate strDisplayCoordinate;
	
	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) )
 80017ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80017ee:	4968      	ldr	r1, [pc, #416]	; (8001990 <Check_touchkey+0x1ac>)
 80017f0:	4618      	mov	r0, r3
 80017f2:	f7ff ff6f 	bl	80016d4 <XPT2046_Get_TouchedPoint>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80c4 	beq.w	8001986 <Check_touchkey+0x1a2>
	{
		char str1[33];
		char str2[33];

		snprintf(str1,32,"%d", strDisplayCoordinate.x);
 80017fe:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8001802:	1d38      	adds	r0, r7, #4
 8001804:	4a63      	ldr	r2, [pc, #396]	; (8001994 <Check_touchkey+0x1b0>)
 8001806:	2120      	movs	r1, #32
 8001808:	f001 f98c 	bl	8002b24 <sniprintf>
		snprintf(str2,32,"%d", strDisplayCoordinate.y);
 800180c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001810:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8001814:	4a5f      	ldr	r2, [pc, #380]	; (8001994 <Check_touchkey+0x1b0>)
 8001816:	2120      	movs	r1, #32
 8001818:	f001 f984 	bl	8002b24 <sniprintf>

		LCD_Clear(50,100,30,30,0xFFFF);
 800181c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	231e      	movs	r3, #30
 8001824:	221e      	movs	r2, #30
 8001826:	2164      	movs	r1, #100	; 0x64
 8001828:	2032      	movs	r0, #50	; 0x32
 800182a:	f7ff fa0c 	bl	8000c46 <LCD_Clear>
		LCD_DrawString(50, 100, str1);
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	461a      	mov	r2, r3
 8001832:	2164      	movs	r1, #100	; 0x64
 8001834:	2032      	movs	r0, #50	; 0x32
 8001836:	f7ff fa6f 	bl	8000d18 <LCD_DrawString>
		LCD_DrawString(50, 115, str2);
 800183a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800183e:	461a      	mov	r2, r3
 8001840:	2173      	movs	r1, #115	; 0x73
 8001842:	2032      	movs	r0, #50	; 0x32
 8001844:	f7ff fa68 	bl	8000d18 <LCD_DrawString>

		HAL_GPIO_WritePin(GPIOB, gpioPin[0], GPIO_PIN_SET);
 8001848:	4b53      	ldr	r3, [pc, #332]	; (8001998 <Check_touchkey+0x1b4>)
 800184a:	881b      	ldrh	r3, [r3, #0]
 800184c:	2201      	movs	r2, #1
 800184e:	4619      	mov	r1, r3
 8001850:	4852      	ldr	r0, [pc, #328]	; (800199c <Check_touchkey+0x1b8>)
 8001852:	f000 fbee 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, gpioPin[1], GPIO_PIN_SET);
 8001856:	4b50      	ldr	r3, [pc, #320]	; (8001998 <Check_touchkey+0x1b4>)
 8001858:	885b      	ldrh	r3, [r3, #2]
 800185a:	2201      	movs	r2, #1
 800185c:	4619      	mov	r1, r3
 800185e:	484f      	ldr	r0, [pc, #316]	; (800199c <Check_touchkey+0x1b8>)
 8001860:	f000 fbe7 	bl	8002032 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, gpioPin[2], GPIO_PIN_SET);
 8001864:	4b4c      	ldr	r3, [pc, #304]	; (8001998 <Check_touchkey+0x1b4>)
 8001866:	889b      	ldrh	r3, [r3, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	4619      	mov	r1, r3
 800186c:	484b      	ldr	r0, [pc, #300]	; (800199c <Check_touchkey+0x1b8>)
 800186e:	f000 fbe0 	bl	8002032 <HAL_GPIO_WritePin>

		if( (strDisplayCoordinate.x >= ResetButton.Top_Left.x && strDisplayCoordinate.x <= ResetButton.Bottom_Right.x)  &&
 8001872:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001876:	4b4a      	ldr	r3, [pc, #296]	; (80019a0 <Check_touchkey+0x1bc>)
 8001878:	881b      	ldrh	r3, [r3, #0]
 800187a:	429a      	cmp	r2, r3
 800187c:	d318      	bcc.n	80018b0 <Check_touchkey+0xcc>
 800187e:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8001882:	4b47      	ldr	r3, [pc, #284]	; (80019a0 <Check_touchkey+0x1bc>)
 8001884:	889b      	ldrh	r3, [r3, #4]
 8001886:	429a      	cmp	r2, r3
 8001888:	d812      	bhi.n	80018b0 <Check_touchkey+0xcc>
			(strDisplayCoordinate.y >= ResetButton.Top_Left.y && strDisplayCoordinate.y <= ResetButton.Bottom_Right.y)){
 800188a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800188e:	4b44      	ldr	r3, [pc, #272]	; (80019a0 <Check_touchkey+0x1bc>)
 8001890:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x >= ResetButton.Top_Left.x && strDisplayCoordinate.x <= ResetButton.Bottom_Right.x)  &&
 8001892:	429a      	cmp	r2, r3
 8001894:	d30c      	bcc.n	80018b0 <Check_touchkey+0xcc>
			(strDisplayCoordinate.y >= ResetButton.Top_Left.y && strDisplayCoordinate.y <= ResetButton.Bottom_Right.y)){
 8001896:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <Check_touchkey+0x1bc>)
 800189c:	88db      	ldrh	r3, [r3, #6]
 800189e:	429a      	cmp	r2, r3
 80018a0:	d806      	bhi.n	80018b0 <Check_touchkey+0xcc>
				HAL_GPIO_WritePin(GPIOB, gpioPin[1], GPIO_PIN_RESET);
 80018a2:	4b3d      	ldr	r3, [pc, #244]	; (8001998 <Check_touchkey+0x1b4>)
 80018a4:	885b      	ldrh	r3, [r3, #2]
 80018a6:	2200      	movs	r2, #0
 80018a8:	4619      	mov	r1, r3
 80018aa:	483c      	ldr	r0, [pc, #240]	; (800199c <Check_touchkey+0x1b8>)
 80018ac:	f000 fbc1 	bl	8002032 <HAL_GPIO_WritePin>
			}

		if( (strDisplayCoordinate.x >= AutoButton.Top_Left.x && strDisplayCoordinate.x <= AutoButton.Bottom_Right.x)  &&
 80018b0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80018b4:	4b3b      	ldr	r3, [pc, #236]	; (80019a4 <Check_touchkey+0x1c0>)
 80018b6:	881b      	ldrh	r3, [r3, #0]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d318      	bcc.n	80018ee <Check_touchkey+0x10a>
 80018bc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80018c0:	4b38      	ldr	r3, [pc, #224]	; (80019a4 <Check_touchkey+0x1c0>)
 80018c2:	889b      	ldrh	r3, [r3, #4]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d812      	bhi.n	80018ee <Check_touchkey+0x10a>
			(strDisplayCoordinate.y >= AutoButton.Top_Left.y && strDisplayCoordinate.y <= AutoButton.Bottom_Right.y)){
 80018c8:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <Check_touchkey+0x1c0>)
 80018ce:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x >= AutoButton.Top_Left.x && strDisplayCoordinate.x <= AutoButton.Bottom_Right.x)  &&
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d30c      	bcc.n	80018ee <Check_touchkey+0x10a>
			(strDisplayCoordinate.y >= AutoButton.Top_Left.y && strDisplayCoordinate.y <= AutoButton.Bottom_Right.y)){
 80018d4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80018d8:	4b32      	ldr	r3, [pc, #200]	; (80019a4 <Check_touchkey+0x1c0>)
 80018da:	88db      	ldrh	r3, [r3, #6]
 80018dc:	429a      	cmp	r2, r3
 80018de:	d806      	bhi.n	80018ee <Check_touchkey+0x10a>
				HAL_GPIO_WritePin(GPIOB, gpioPin[2], GPIO_PIN_RESET);
 80018e0:	4b2d      	ldr	r3, [pc, #180]	; (8001998 <Check_touchkey+0x1b4>)
 80018e2:	889b      	ldrh	r3, [r3, #4]
 80018e4:	2200      	movs	r2, #0
 80018e6:	4619      	mov	r1, r3
 80018e8:	482c      	ldr	r0, [pc, #176]	; (800199c <Check_touchkey+0x1b8>)
 80018ea:	f000 fba2 	bl	8002032 <HAL_GPIO_WritePin>
			}

		if( (strDisplayCoordinate.x >= UpButton.Top_Left.x && strDisplayCoordinate.x <= UpButton.Bottom_Right.x)  &&
 80018ee:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80018f2:	4b2d      	ldr	r3, [pc, #180]	; (80019a8 <Check_touchkey+0x1c4>)
 80018f4:	881b      	ldrh	r3, [r3, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d31f      	bcc.n	800193a <Check_touchkey+0x156>
 80018fa:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80018fe:	4b2a      	ldr	r3, [pc, #168]	; (80019a8 <Check_touchkey+0x1c4>)
 8001900:	889b      	ldrh	r3, [r3, #4]
 8001902:	429a      	cmp	r2, r3
 8001904:	d819      	bhi.n	800193a <Check_touchkey+0x156>
			(strDisplayCoordinate.y >= UpButton.Top_Left.y && strDisplayCoordinate.y <= UpButton.Bottom_Right.y)){
 8001906:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800190a:	4b27      	ldr	r3, [pc, #156]	; (80019a8 <Check_touchkey+0x1c4>)
 800190c:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x >= UpButton.Top_Left.x && strDisplayCoordinate.x <= UpButton.Bottom_Right.x)  &&
 800190e:	429a      	cmp	r2, r3
 8001910:	d313      	bcc.n	800193a <Check_touchkey+0x156>
			(strDisplayCoordinate.y >= UpButton.Top_Left.y && strDisplayCoordinate.y <= UpButton.Bottom_Right.y)){
 8001912:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <Check_touchkey+0x1c4>)
 8001918:	88db      	ldrh	r3, [r3, #6]
 800191a:	429a      	cmp	r2, r3
 800191c:	d80d      	bhi.n	800193a <Check_touchkey+0x156>
				HAL_GPIO_WritePin(GPIOB, gpioPin[2], GPIO_PIN_RESET);
 800191e:	4b1e      	ldr	r3, [pc, #120]	; (8001998 <Check_touchkey+0x1b4>)
 8001920:	889b      	ldrh	r3, [r3, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	4619      	mov	r1, r3
 8001926:	481d      	ldr	r0, [pc, #116]	; (800199c <Check_touchkey+0x1b8>)
 8001928:	f000 fb83 	bl	8002032 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, gpioPin[1], GPIO_PIN_RESET);
 800192c:	4b1a      	ldr	r3, [pc, #104]	; (8001998 <Check_touchkey+0x1b4>)
 800192e:	885b      	ldrh	r3, [r3, #2]
 8001930:	2200      	movs	r2, #0
 8001932:	4619      	mov	r1, r3
 8001934:	4819      	ldr	r0, [pc, #100]	; (800199c <Check_touchkey+0x1b8>)
 8001936:	f000 fb7c 	bl	8002032 <HAL_GPIO_WritePin>
			}

		if( (strDisplayCoordinate.x >= DownButton.Top_Left.x && strDisplayCoordinate.x <= DownButton.Bottom_Right.x)  &&
 800193a:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800193e:	4b1b      	ldr	r3, [pc, #108]	; (80019ac <Check_touchkey+0x1c8>)
 8001940:	881b      	ldrh	r3, [r3, #0]
 8001942:	429a      	cmp	r2, r3
 8001944:	d31f      	bcc.n	8001986 <Check_touchkey+0x1a2>
 8001946:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 800194a:	4b18      	ldr	r3, [pc, #96]	; (80019ac <Check_touchkey+0x1c8>)
 800194c:	889b      	ldrh	r3, [r3, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d819      	bhi.n	8001986 <Check_touchkey+0x1a2>
			(strDisplayCoordinate.y >= DownButton.Top_Left.y && strDisplayCoordinate.y <= DownButton.Bottom_Right.y)){
 8001952:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001956:	4b15      	ldr	r3, [pc, #84]	; (80019ac <Check_touchkey+0x1c8>)
 8001958:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x >= DownButton.Top_Left.x && strDisplayCoordinate.x <= DownButton.Bottom_Right.x)  &&
 800195a:	429a      	cmp	r2, r3
 800195c:	d313      	bcc.n	8001986 <Check_touchkey+0x1a2>
			(strDisplayCoordinate.y >= DownButton.Top_Left.y && strDisplayCoordinate.y <= DownButton.Bottom_Right.y)){
 800195e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8001962:	4b12      	ldr	r3, [pc, #72]	; (80019ac <Check_touchkey+0x1c8>)
 8001964:	88db      	ldrh	r3, [r3, #6]
 8001966:	429a      	cmp	r2, r3
 8001968:	d80d      	bhi.n	8001986 <Check_touchkey+0x1a2>
				HAL_GPIO_WritePin(GPIOB, gpioPin[2], GPIO_PIN_RESET);
 800196a:	4b0b      	ldr	r3, [pc, #44]	; (8001998 <Check_touchkey+0x1b4>)
 800196c:	889b      	ldrh	r3, [r3, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	4619      	mov	r1, r3
 8001972:	480a      	ldr	r0, [pc, #40]	; (800199c <Check_touchkey+0x1b8>)
 8001974:	f000 fb5d 	bl	8002032 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, gpioPin[0], GPIO_PIN_RESET);
 8001978:	4b07      	ldr	r3, [pc, #28]	; (8001998 <Check_touchkey+0x1b4>)
 800197a:	881b      	ldrh	r3, [r3, #0]
 800197c:	2200      	movs	r2, #0
 800197e:	4619      	mov	r1, r3
 8001980:	4806      	ldr	r0, [pc, #24]	; (800199c <Check_touchkey+0x1b8>)
 8001982:	f000 fb56 	bl	8002032 <HAL_GPIO_WritePin>
			}


	}
}
 8001986:	bf00      	nop
 8001988:	3750      	adds	r7, #80	; 0x50
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	20000010 	.word	0x20000010
 8001994:	08003458 	.word	0x08003458
 8001998:	20000004 	.word	0x20000004
 800199c:	40010c00 	.word	0x40010c00
 80019a0:	20000040 	.word	0x20000040
 80019a4:	20000048 	.word	0x20000048
 80019a8:	20000050 	.word	0x20000050
 80019ac:	20000058 	.word	0x20000058

080019b0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff fcac 	bl	800130c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b4:	480b      	ldr	r0, [pc, #44]	; (80019e4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019b6:	490c      	ldr	r1, [pc, #48]	; (80019e8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b8:	4a0c      	ldr	r2, [pc, #48]	; (80019ec <LoopFillZerobss+0x16>)
  movs r3, #0
 80019ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019bc:	e002      	b.n	80019c4 <LoopCopyDataInit>

080019be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019c2:	3304      	adds	r3, #4

080019c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c8:	d3f9      	bcc.n	80019be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019ca:	4a09      	ldr	r2, [pc, #36]	; (80019f0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019cc:	4c09      	ldr	r4, [pc, #36]	; (80019f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019d0:	e001      	b.n	80019d6 <LoopFillZerobss>

080019d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d4:	3204      	adds	r2, #4

080019d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d8:	d3fb      	bcc.n	80019d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f001 f877 	bl	8002acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019de:	f7ff f9ff 	bl	8000de0 <main>
  bx lr
 80019e2:	4770      	bx	lr
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	200000cc 	.word	0x200000cc
  ldr r2, =_sidata
 80019ec:	080292a8 	.word	0x080292a8
  ldr r2, =_sbss
 80019f0:	200000cc 	.word	0x200000cc
  ldr r4, =_ebss
 80019f4:	20000150 	.word	0x20000150

080019f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_2_IRQHandler>
	...

080019fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a00:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <HAL_Init+0x28>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a07      	ldr	r2, [pc, #28]	; (8001a24 <HAL_Init+0x28>)
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a0c:	2003      	movs	r0, #3
 8001a0e:	f000 f923 	bl	8001c58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a12:	200f      	movs	r0, #15
 8001a14:	f000 f808 	bl	8001a28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a18:	f7ff fb80 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	40022000 	.word	0x40022000

08001a28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a30:	4b12      	ldr	r3, [pc, #72]	; (8001a7c <HAL_InitTick+0x54>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4b12      	ldr	r3, [pc, #72]	; (8001a80 <HAL_InitTick+0x58>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	4619      	mov	r1, r3
 8001a3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a42:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f93b 	bl	8001cc2 <HAL_SYSTICK_Config>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e00e      	b.n	8001a74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b0f      	cmp	r3, #15
 8001a5a:	d80a      	bhi.n	8001a72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	f04f 30ff 	mov.w	r0, #4294967295
 8001a64:	f000 f903 	bl	8001c6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a68:	4a06      	ldr	r2, [pc, #24]	; (8001a84 <HAL_InitTick+0x5c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	e000      	b.n	8001a74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a72:	2301      	movs	r3, #1
}
 8001a74:	4618      	mov	r0, r3
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	20000000 	.word	0x20000000
 8001a80:	20000064 	.word	0x20000064
 8001a84:	20000060 	.word	0x20000060

08001a88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <HAL_IncTick+0x1c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	461a      	mov	r2, r3
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4413      	add	r3, r2
 8001a98:	4a03      	ldr	r2, [pc, #12]	; (8001aa8 <HAL_IncTick+0x20>)
 8001a9a:	6013      	str	r3, [r2, #0]
}
 8001a9c:	bf00      	nop
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bc80      	pop	{r7}
 8001aa2:	4770      	bx	lr
 8001aa4:	20000064 	.word	0x20000064
 8001aa8:	2000013c 	.word	0x2000013c

08001aac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return uwTick;
 8001ab0:	4b02      	ldr	r3, [pc, #8]	; (8001abc <HAL_GetTick+0x10>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bc80      	pop	{r7}
 8001aba:	4770      	bx	lr
 8001abc:	2000013c 	.word	0x2000013c

08001ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f003 0307 	and.w	r3, r3, #7
 8001ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad0:	4b0c      	ldr	r3, [pc, #48]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ad6:	68ba      	ldr	r2, [r7, #8]
 8001ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001adc:	4013      	ands	r3, r2
 8001ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001af2:	4a04      	ldr	r2, [pc, #16]	; (8001b04 <__NVIC_SetPriorityGrouping+0x44>)
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	60d3      	str	r3, [r2, #12]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b0c:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <__NVIC_GetPriorityGrouping+0x18>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	0a1b      	lsrs	r3, r3, #8
 8001b12:	f003 0307 	and.w	r3, r3, #7
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	db0b      	blt.n	8001b4e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b36:	79fb      	ldrb	r3, [r7, #7]
 8001b38:	f003 021f 	and.w	r2, r3, #31
 8001b3c:	4906      	ldr	r1, [pc, #24]	; (8001b58 <__NVIC_EnableIRQ+0x34>)
 8001b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b42:	095b      	lsrs	r3, r3, #5
 8001b44:	2001      	movs	r0, #1
 8001b46:	fa00 f202 	lsl.w	r2, r0, r2
 8001b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b4e:	bf00      	nop
 8001b50:	370c      	adds	r7, #12
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bc80      	pop	{r7}
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100

08001b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	6039      	str	r1, [r7, #0]
 8001b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	db0a      	blt.n	8001b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	490c      	ldr	r1, [pc, #48]	; (8001ba8 <__NVIC_SetPriority+0x4c>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	0112      	lsls	r2, r2, #4
 8001b7c:	b2d2      	uxtb	r2, r2
 8001b7e:	440b      	add	r3, r1
 8001b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b84:	e00a      	b.n	8001b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	4908      	ldr	r1, [pc, #32]	; (8001bac <__NVIC_SetPriority+0x50>)
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	3b04      	subs	r3, #4
 8001b94:	0112      	lsls	r2, r2, #4
 8001b96:	b2d2      	uxtb	r2, r2
 8001b98:	440b      	add	r3, r1
 8001b9a:	761a      	strb	r2, [r3, #24]
}
 8001b9c:	bf00      	nop
 8001b9e:	370c      	adds	r7, #12
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bc80      	pop	{r7}
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	e000e100 	.word	0xe000e100
 8001bac:	e000ed00 	.word	0xe000ed00

08001bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b089      	sub	sp, #36	; 0x24
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	60f8      	str	r0, [r7, #12]
 8001bb8:	60b9      	str	r1, [r7, #8]
 8001bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	f003 0307 	and.w	r3, r3, #7
 8001bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	f1c3 0307 	rsb	r3, r3, #7
 8001bca:	2b04      	cmp	r3, #4
 8001bcc:	bf28      	it	cs
 8001bce:	2304      	movcs	r3, #4
 8001bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	3304      	adds	r3, #4
 8001bd6:	2b06      	cmp	r3, #6
 8001bd8:	d902      	bls.n	8001be0 <NVIC_EncodePriority+0x30>
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	3b03      	subs	r3, #3
 8001bde:	e000      	b.n	8001be2 <NVIC_EncodePriority+0x32>
 8001be0:	2300      	movs	r3, #0
 8001be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be4:	f04f 32ff 	mov.w	r2, #4294967295
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	401a      	ands	r2, r3
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	697b      	ldr	r3, [r7, #20]
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43d9      	mvns	r1, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	4313      	orrs	r3, r2
         );
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	3724      	adds	r7, #36	; 0x24
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c24:	d301      	bcc.n	8001c2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c26:	2301      	movs	r3, #1
 8001c28:	e00f      	b.n	8001c4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	; (8001c54 <SysTick_Config+0x40>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c32:	210f      	movs	r1, #15
 8001c34:	f04f 30ff 	mov.w	r0, #4294967295
 8001c38:	f7ff ff90 	bl	8001b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c3c:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <SysTick_Config+0x40>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c42:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <SysTick_Config+0x40>)
 8001c44:	2207      	movs	r2, #7
 8001c46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c48:	2300      	movs	r3, #0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	e000e010 	.word	0xe000e010

08001c58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f7ff ff2d 	bl	8001ac0 <__NVIC_SetPriorityGrouping>
}
 8001c66:	bf00      	nop
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	4603      	mov	r3, r0
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
 8001c7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c80:	f7ff ff42 	bl	8001b08 <__NVIC_GetPriorityGrouping>
 8001c84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68b9      	ldr	r1, [r7, #8]
 8001c8a:	6978      	ldr	r0, [r7, #20]
 8001c8c:	f7ff ff90 	bl	8001bb0 <NVIC_EncodePriority>
 8001c90:	4602      	mov	r2, r0
 8001c92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff ff5f 	bl	8001b5c <__NVIC_SetPriority>
}
 8001c9e:	bf00      	nop
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b082      	sub	sp, #8
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff ff35 	bl	8001b24 <__NVIC_EnableIRQ>
}
 8001cba:	bf00      	nop
 8001cbc:	3708      	adds	r7, #8
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}

08001cc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b082      	sub	sp, #8
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cca:	6878      	ldr	r0, [r7, #4]
 8001ccc:	f7ff ffa2 	bl	8001c14 <SysTick_Config>
 8001cd0:	4603      	mov	r3, r0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b08b      	sub	sp, #44	; 0x2c
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cea:	2300      	movs	r3, #0
 8001cec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cee:	e179      	b.n	8001fe4 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	69fa      	ldr	r2, [r7, #28]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	f040 8168 	bne.w	8001fde <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a96      	ldr	r2, [pc, #600]	; (8001f6c <HAL_GPIO_Init+0x290>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d05e      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d18:	4a94      	ldr	r2, [pc, #592]	; (8001f6c <HAL_GPIO_Init+0x290>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d875      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d1e:	4a94      	ldr	r2, [pc, #592]	; (8001f70 <HAL_GPIO_Init+0x294>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d058      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d24:	4a92      	ldr	r2, [pc, #584]	; (8001f70 <HAL_GPIO_Init+0x294>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d86f      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d2a:	4a92      	ldr	r2, [pc, #584]	; (8001f74 <HAL_GPIO_Init+0x298>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d052      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d30:	4a90      	ldr	r2, [pc, #576]	; (8001f74 <HAL_GPIO_Init+0x298>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d869      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d36:	4a90      	ldr	r2, [pc, #576]	; (8001f78 <HAL_GPIO_Init+0x29c>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d04c      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d3c:	4a8e      	ldr	r2, [pc, #568]	; (8001f78 <HAL_GPIO_Init+0x29c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d863      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d42:	4a8e      	ldr	r2, [pc, #568]	; (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d046      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
 8001d48:	4a8c      	ldr	r2, [pc, #560]	; (8001f7c <HAL_GPIO_Init+0x2a0>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d85d      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d4e:	2b12      	cmp	r3, #18
 8001d50:	d82a      	bhi.n	8001da8 <HAL_GPIO_Init+0xcc>
 8001d52:	2b12      	cmp	r3, #18
 8001d54:	d859      	bhi.n	8001e0a <HAL_GPIO_Init+0x12e>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <HAL_GPIO_Init+0x80>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001dd7 	.word	0x08001dd7
 8001d60:	08001db1 	.word	0x08001db1
 8001d64:	08001dc3 	.word	0x08001dc3
 8001d68:	08001e05 	.word	0x08001e05
 8001d6c:	08001e0b 	.word	0x08001e0b
 8001d70:	08001e0b 	.word	0x08001e0b
 8001d74:	08001e0b 	.word	0x08001e0b
 8001d78:	08001e0b 	.word	0x08001e0b
 8001d7c:	08001e0b 	.word	0x08001e0b
 8001d80:	08001e0b 	.word	0x08001e0b
 8001d84:	08001e0b 	.word	0x08001e0b
 8001d88:	08001e0b 	.word	0x08001e0b
 8001d8c:	08001e0b 	.word	0x08001e0b
 8001d90:	08001e0b 	.word	0x08001e0b
 8001d94:	08001e0b 	.word	0x08001e0b
 8001d98:	08001e0b 	.word	0x08001e0b
 8001d9c:	08001e0b 	.word	0x08001e0b
 8001da0:	08001db9 	.word	0x08001db9
 8001da4:	08001dcd 	.word	0x08001dcd
 8001da8:	4a75      	ldr	r2, [pc, #468]	; (8001f80 <HAL_GPIO_Init+0x2a4>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001dae:	e02c      	b.n	8001e0a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	623b      	str	r3, [r7, #32]
          break;
 8001db6:	e029      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	3304      	adds	r3, #4
 8001dbe:	623b      	str	r3, [r7, #32]
          break;
 8001dc0:	e024      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	68db      	ldr	r3, [r3, #12]
 8001dc6:	3308      	adds	r3, #8
 8001dc8:	623b      	str	r3, [r7, #32]
          break;
 8001dca:	e01f      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	330c      	adds	r3, #12
 8001dd2:	623b      	str	r3, [r7, #32]
          break;
 8001dd4:	e01a      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d102      	bne.n	8001de4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001dde:	2304      	movs	r3, #4
 8001de0:	623b      	str	r3, [r7, #32]
          break;
 8001de2:	e013      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d105      	bne.n	8001df8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dec:	2308      	movs	r3, #8
 8001dee:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	69fa      	ldr	r2, [r7, #28]
 8001df4:	611a      	str	r2, [r3, #16]
          break;
 8001df6:	e009      	b.n	8001e0c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001df8:	2308      	movs	r3, #8
 8001dfa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	69fa      	ldr	r2, [r7, #28]
 8001e00:	615a      	str	r2, [r3, #20]
          break;
 8001e02:	e003      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
          break;
 8001e08:	e000      	b.n	8001e0c <HAL_GPIO_Init+0x130>
          break;
 8001e0a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	2bff      	cmp	r3, #255	; 0xff
 8001e10:	d801      	bhi.n	8001e16 <HAL_GPIO_Init+0x13a>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	e001      	b.n	8001e1a <HAL_GPIO_Init+0x13e>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	3304      	adds	r3, #4
 8001e1a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	2bff      	cmp	r3, #255	; 0xff
 8001e20:	d802      	bhi.n	8001e28 <HAL_GPIO_Init+0x14c>
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	009b      	lsls	r3, r3, #2
 8001e26:	e002      	b.n	8001e2e <HAL_GPIO_Init+0x152>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	3b08      	subs	r3, #8
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	210f      	movs	r1, #15
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3c:	43db      	mvns	r3, r3
 8001e3e:	401a      	ands	r2, r3
 8001e40:	6a39      	ldr	r1, [r7, #32]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	fa01 f303 	lsl.w	r3, r1, r3
 8001e48:	431a      	orrs	r2, r3
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80c1 	beq.w	8001fde <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e5c:	4b49      	ldr	r3, [pc, #292]	; (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001e5e:	699b      	ldr	r3, [r3, #24]
 8001e60:	4a48      	ldr	r2, [pc, #288]	; (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6193      	str	r3, [r2, #24]
 8001e68:	4b46      	ldr	r3, [pc, #280]	; (8001f84 <HAL_GPIO_Init+0x2a8>)
 8001e6a:	699b      	ldr	r3, [r3, #24]
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e74:	4a44      	ldr	r2, [pc, #272]	; (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	68fa      	ldr	r2, [r7, #12]
 8001e94:	4013      	ands	r3, r2
 8001e96:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	4a3c      	ldr	r2, [pc, #240]	; (8001f8c <HAL_GPIO_Init+0x2b0>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d01f      	beq.n	8001ee0 <HAL_GPIO_Init+0x204>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a3b      	ldr	r2, [pc, #236]	; (8001f90 <HAL_GPIO_Init+0x2b4>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d019      	beq.n	8001edc <HAL_GPIO_Init+0x200>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a3a      	ldr	r2, [pc, #232]	; (8001f94 <HAL_GPIO_Init+0x2b8>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <HAL_GPIO_Init+0x1fc>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a39      	ldr	r2, [pc, #228]	; (8001f98 <HAL_GPIO_Init+0x2bc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_GPIO_Init+0x1f8>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a38      	ldr	r2, [pc, #224]	; (8001f9c <HAL_GPIO_Init+0x2c0>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <HAL_GPIO_Init+0x1f4>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a37      	ldr	r2, [pc, #220]	; (8001fa0 <HAL_GPIO_Init+0x2c4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_GPIO_Init+0x1f0>
 8001ec8:	2305      	movs	r3, #5
 8001eca:	e00a      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ecc:	2306      	movs	r3, #6
 8001ece:	e008      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e006      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e004      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_GPIO_Init+0x206>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee4:	f002 0203 	and.w	r2, r2, #3
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	4093      	lsls	r3, r2
 8001eec:	68fa      	ldr	r2, [r7, #12]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ef2:	4925      	ldr	r1, [pc, #148]	; (8001f88 <HAL_GPIO_Init+0x2ac>)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d006      	beq.n	8001f1a <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f0c:	4b25      	ldr	r3, [pc, #148]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4924      	ldr	r1, [pc, #144]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
 8001f18:	e006      	b.n	8001f28 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f1a:	4b22      	ldr	r3, [pc, #136]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	4920      	ldr	r1, [pc, #128]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001f24:	4013      	ands	r3, r2
 8001f26:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d006      	beq.n	8001f42 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f34:	4b1b      	ldr	r3, [pc, #108]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	491a      	ldr	r1, [pc, #104]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	604b      	str	r3, [r1, #4]
 8001f40:	e006      	b.n	8001f50 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f42:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	69bb      	ldr	r3, [r7, #24]
 8001f48:	43db      	mvns	r3, r3
 8001f4a:	4916      	ldr	r1, [pc, #88]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d025      	beq.n	8001fa8 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f5c:	4b11      	ldr	r3, [pc, #68]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	4910      	ldr	r1, [pc, #64]	; (8001fa4 <HAL_GPIO_Init+0x2c8>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	4313      	orrs	r3, r2
 8001f66:	608b      	str	r3, [r1, #8]
 8001f68:	e025      	b.n	8001fb6 <HAL_GPIO_Init+0x2da>
 8001f6a:	bf00      	nop
 8001f6c:	10320000 	.word	0x10320000
 8001f70:	10310000 	.word	0x10310000
 8001f74:	10220000 	.word	0x10220000
 8001f78:	10210000 	.word	0x10210000
 8001f7c:	10120000 	.word	0x10120000
 8001f80:	10110000 	.word	0x10110000
 8001f84:	40021000 	.word	0x40021000
 8001f88:	40010000 	.word	0x40010000
 8001f8c:	40010800 	.word	0x40010800
 8001f90:	40010c00 	.word	0x40010c00
 8001f94:	40011000 	.word	0x40011000
 8001f98:	40011400 	.word	0x40011400
 8001f9c:	40011800 	.word	0x40011800
 8001fa0:	40011c00 	.word	0x40011c00
 8001fa4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa8:	4b15      	ldr	r3, [pc, #84]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	4913      	ldr	r1, [pc, #76]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d006      	beq.n	8001fd0 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc2:	4b0f      	ldr	r3, [pc, #60]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001fc4:	68da      	ldr	r2, [r3, #12]
 8001fc6:	490e      	ldr	r1, [pc, #56]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001fc8:	69bb      	ldr	r3, [r7, #24]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60cb      	str	r3, [r1, #12]
 8001fce:	e006      	b.n	8001fde <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001fd2:	68da      	ldr	r2, [r3, #12]
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	4909      	ldr	r1, [pc, #36]	; (8002000 <HAL_GPIO_Init+0x324>)
 8001fda:	4013      	ands	r3, r2
 8001fdc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681a      	ldr	r2, [r3, #0]
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	fa22 f303 	lsr.w	r3, r2, r3
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f47f ae7e 	bne.w	8001cf0 <HAL_GPIO_Init+0x14>
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	bf00      	nop
 8001ff8:	372c      	adds	r7, #44	; 0x2c
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bc80      	pop	{r7}
 8001ffe:	4770      	bx	lr
 8002000:	40010400 	.word	0x40010400

08002004 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002004:	b480      	push	{r7}
 8002006:	b085      	sub	sp, #20
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	460b      	mov	r3, r1
 800200e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	887b      	ldrh	r3, [r7, #2]
 8002016:	4013      	ands	r3, r2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800201c:	2301      	movs	r3, #1
 800201e:	73fb      	strb	r3, [r7, #15]
 8002020:	e001      	b.n	8002026 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002022:	2300      	movs	r3, #0
 8002024:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
}
 8002028:	4618      	mov	r0, r3
 800202a:	3714      	adds	r7, #20
 800202c:	46bd      	mov	sp, r7
 800202e:	bc80      	pop	{r7}
 8002030:	4770      	bx	lr

08002032 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002032:	b480      	push	{r7}
 8002034:	b083      	sub	sp, #12
 8002036:	af00      	add	r7, sp, #0
 8002038:	6078      	str	r0, [r7, #4]
 800203a:	460b      	mov	r3, r1
 800203c:	807b      	strh	r3, [r7, #2]
 800203e:	4613      	mov	r3, r2
 8002040:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002042:	787b      	ldrb	r3, [r7, #1]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002048:	887a      	ldrh	r2, [r7, #2]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800204e:	e003      	b.n	8002058 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002050:	887b      	ldrh	r3, [r7, #2]
 8002052:	041a      	lsls	r2, r3, #16
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	611a      	str	r2, [r3, #16]
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
	...

08002064 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800206e:	4b08      	ldr	r3, [pc, #32]	; (8002090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002070:	695a      	ldr	r2, [r3, #20]
 8002072:	88fb      	ldrh	r3, [r7, #6]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d006      	beq.n	8002088 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800207a:	4a05      	ldr	r2, [pc, #20]	; (8002090 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002080:	88fb      	ldrh	r3, [r7, #6]
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f806 	bl	8002094 <HAL_GPIO_EXTI_Callback>
  }
}
 8002088:	bf00      	nop
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	40010400 	.word	0x40010400

08002094 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002094:	b480      	push	{r7}
 8002096:	b083      	sub	sp, #12
 8002098:	af00      	add	r7, sp, #0
 800209a:	4603      	mov	r3, r0
 800209c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d101      	bne.n	80020ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e272      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	f000 8087 	beq.w	80021d6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020c8:	4b92      	ldr	r3, [pc, #584]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	f003 030c 	and.w	r3, r3, #12
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d00c      	beq.n	80020ee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020d4:	4b8f      	ldr	r3, [pc, #572]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f003 030c 	and.w	r3, r3, #12
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d112      	bne.n	8002106 <HAL_RCC_OscConfig+0x5e>
 80020e0:	4b8c      	ldr	r3, [pc, #560]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020ec:	d10b      	bne.n	8002106 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ee:	4b89      	ldr	r3, [pc, #548]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d06c      	beq.n	80021d4 <HAL_RCC_OscConfig+0x12c>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d168      	bne.n	80021d4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e24c      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800210e:	d106      	bne.n	800211e <HAL_RCC_OscConfig+0x76>
 8002110:	4b80      	ldr	r3, [pc, #512]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a7f      	ldr	r2, [pc, #508]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002116:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800211a:	6013      	str	r3, [r2, #0]
 800211c:	e02e      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x98>
 8002126:	4b7b      	ldr	r3, [pc, #492]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a7a      	ldr	r2, [pc, #488]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800212c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b78      	ldr	r3, [pc, #480]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a77      	ldr	r2, [pc, #476]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002138:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e01d      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002148:	d10c      	bne.n	8002164 <HAL_RCC_OscConfig+0xbc>
 800214a:	4b72      	ldr	r3, [pc, #456]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a71      	ldr	r2, [pc, #452]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002150:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002154:	6013      	str	r3, [r2, #0]
 8002156:	4b6f      	ldr	r3, [pc, #444]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4a6e      	ldr	r2, [pc, #440]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	e00b      	b.n	800217c <HAL_RCC_OscConfig+0xd4>
 8002164:	4b6b      	ldr	r3, [pc, #428]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a6a      	ldr	r2, [pc, #424]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800216a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800216e:	6013      	str	r3, [r2, #0]
 8002170:	4b68      	ldr	r3, [pc, #416]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a67      	ldr	r2, [pc, #412]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002176:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800217a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d013      	beq.n	80021ac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7ff fc92 	bl	8001aac <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800218c:	f7ff fc8e 	bl	8001aac <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b64      	cmp	r3, #100	; 0x64
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e200      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800219e:	4b5d      	ldr	r3, [pc, #372]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0xe4>
 80021aa:	e014      	b.n	80021d6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021ac:	f7ff fc7e 	bl	8001aac <HAL_GetTick>
 80021b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b4:	f7ff fc7a 	bl	8001aac <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b64      	cmp	r3, #100	; 0x64
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e1ec      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021c6:	4b53      	ldr	r3, [pc, #332]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x10c>
 80021d2:	e000      	b.n	80021d6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d063      	beq.n	80022aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021e2:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	685b      	ldr	r3, [r3, #4]
 80021e6:	f003 030c 	and.w	r3, r3, #12
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d00b      	beq.n	8002206 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021ee:	4b49      	ldr	r3, [pc, #292]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f003 030c 	and.w	r3, r3, #12
 80021f6:	2b08      	cmp	r3, #8
 80021f8:	d11c      	bne.n	8002234 <HAL_RCC_OscConfig+0x18c>
 80021fa:	4b46      	ldr	r3, [pc, #280]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d116      	bne.n	8002234 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002206:	4b43      	ldr	r3, [pc, #268]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0302 	and.w	r3, r3, #2
 800220e:	2b00      	cmp	r3, #0
 8002210:	d005      	beq.n	800221e <HAL_RCC_OscConfig+0x176>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d001      	beq.n	800221e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e1c0      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b3d      	ldr	r3, [pc, #244]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	00db      	lsls	r3, r3, #3
 800222c:	4939      	ldr	r1, [pc, #228]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002232:	e03a      	b.n	80022aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d020      	beq.n	800227e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223c:	4b36      	ldr	r3, [pc, #216]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 800223e:	2201      	movs	r2, #1
 8002240:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002242:	f7ff fc33 	bl	8001aac <HAL_GetTick>
 8002246:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002248:	e008      	b.n	800225c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224a:	f7ff fc2f 	bl	8001aac <HAL_GetTick>
 800224e:	4602      	mov	r2, r0
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	2b02      	cmp	r3, #2
 8002256:	d901      	bls.n	800225c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002258:	2303      	movs	r3, #3
 800225a:	e1a1      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800225c:	4b2d      	ldr	r3, [pc, #180]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d0f0      	beq.n	800224a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002268:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	695b      	ldr	r3, [r3, #20]
 8002274:	00db      	lsls	r3, r3, #3
 8002276:	4927      	ldr	r1, [pc, #156]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 8002278:	4313      	orrs	r3, r2
 800227a:	600b      	str	r3, [r1, #0]
 800227c:	e015      	b.n	80022aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_RCC_OscConfig+0x270>)
 8002280:	2200      	movs	r2, #0
 8002282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002284:	f7ff fc12 	bl	8001aac <HAL_GetTick>
 8002288:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228c:	f7ff fc0e 	bl	8001aac <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e180      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800229e:	4b1d      	ldr	r3, [pc, #116]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d03a      	beq.n	800232c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d019      	beq.n	80022f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022be:	4b17      	ldr	r3, [pc, #92]	; (800231c <HAL_RCC_OscConfig+0x274>)
 80022c0:	2201      	movs	r2, #1
 80022c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c4:	f7ff fbf2 	bl	8001aac <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022cc:	f7ff fbee 	bl	8001aac <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e160      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e2:	f003 0302 	and.w	r3, r3, #2
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d0f0      	beq.n	80022cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022ea:	2001      	movs	r0, #1
 80022ec:	f000 faa6 	bl	800283c <RCC_Delay>
 80022f0:	e01c      	b.n	800232c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f2:	4b0a      	ldr	r3, [pc, #40]	; (800231c <HAL_RCC_OscConfig+0x274>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022f8:	f7ff fbd8 	bl	8001aac <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fe:	e00f      	b.n	8002320 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002300:	f7ff fbd4 	bl	8001aac <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	2b02      	cmp	r3, #2
 800230c:	d908      	bls.n	8002320 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800230e:	2303      	movs	r3, #3
 8002310:	e146      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000
 8002318:	42420000 	.word	0x42420000
 800231c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002320:	4b92      	ldr	r3, [pc, #584]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	f003 0302 	and.w	r3, r3, #2
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1e9      	bne.n	8002300 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 80a6 	beq.w	8002486 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800233a:	2300      	movs	r3, #0
 800233c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233e:	4b8b      	ldr	r3, [pc, #556]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10d      	bne.n	8002366 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800234a:	4b88      	ldr	r3, [pc, #544]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 800234c:	69db      	ldr	r3, [r3, #28]
 800234e:	4a87      	ldr	r2, [pc, #540]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	61d3      	str	r3, [r2, #28]
 8002356:	4b85      	ldr	r3, [pc, #532]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002362:	2301      	movs	r3, #1
 8002364:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	4b82      	ldr	r3, [pc, #520]	; (8002570 <HAL_RCC_OscConfig+0x4c8>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d118      	bne.n	80023a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002372:	4b7f      	ldr	r3, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x4c8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a7e      	ldr	r2, [pc, #504]	; (8002570 <HAL_RCC_OscConfig+0x4c8>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237e:	f7ff fb95 	bl	8001aac <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002386:	f7ff fb91 	bl	8001aac <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b64      	cmp	r3, #100	; 0x64
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e103      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	4b75      	ldr	r3, [pc, #468]	; (8002570 <HAL_RCC_OscConfig+0x4c8>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x312>
 80023ac:	4b6f      	ldr	r3, [pc, #444]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	4a6e      	ldr	r2, [pc, #440]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6213      	str	r3, [r2, #32]
 80023b8:	e02d      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x334>
 80023c2:	4b6a      	ldr	r3, [pc, #424]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	6a1b      	ldr	r3, [r3, #32]
 80023c6:	4a69      	ldr	r2, [pc, #420]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023c8:	f023 0301 	bic.w	r3, r3, #1
 80023cc:	6213      	str	r3, [r2, #32]
 80023ce:	4b67      	ldr	r3, [pc, #412]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	6a1b      	ldr	r3, [r3, #32]
 80023d2:	4a66      	ldr	r2, [pc, #408]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	f023 0304 	bic.w	r3, r3, #4
 80023d8:	6213      	str	r3, [r2, #32]
 80023da:	e01c      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b05      	cmp	r3, #5
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x356>
 80023e4:	4b61      	ldr	r3, [pc, #388]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023e6:	6a1b      	ldr	r3, [r3, #32]
 80023e8:	4a60      	ldr	r2, [pc, #384]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	f043 0304 	orr.w	r3, r3, #4
 80023ee:	6213      	str	r3, [r2, #32]
 80023f0:	4b5e      	ldr	r3, [pc, #376]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a5d      	ldr	r2, [pc, #372]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e00b      	b.n	8002416 <HAL_RCC_OscConfig+0x36e>
 80023fe:	4b5b      	ldr	r3, [pc, #364]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4a5a      	ldr	r2, [pc, #360]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002404:	f023 0301 	bic.w	r3, r3, #1
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	4b58      	ldr	r3, [pc, #352]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4a57      	ldr	r2, [pc, #348]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002410:	f023 0304 	bic.w	r3, r3, #4
 8002414:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d015      	beq.n	800244a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800241e:	f7ff fb45 	bl	8001aac <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002424:	e00a      	b.n	800243c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002426:	f7ff fb41 	bl	8001aac <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	f241 3288 	movw	r2, #5000	; 0x1388
 8002434:	4293      	cmp	r3, r2
 8002436:	d901      	bls.n	800243c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e0b1      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243c:	4b4b      	ldr	r3, [pc, #300]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 800243e:	6a1b      	ldr	r3, [r3, #32]
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d0ee      	beq.n	8002426 <HAL_RCC_OscConfig+0x37e>
 8002448:	e014      	b.n	8002474 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800244a:	f7ff fb2f 	bl	8001aac <HAL_GetTick>
 800244e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002450:	e00a      	b.n	8002468 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002452:	f7ff fb2b 	bl	8001aac <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002460:	4293      	cmp	r3, r2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e09b      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002468:	4b40      	ldr	r3, [pc, #256]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	f003 0302 	and.w	r3, r3, #2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1ee      	bne.n	8002452 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002474:	7dfb      	ldrb	r3, [r7, #23]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d105      	bne.n	8002486 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800247a:	4b3c      	ldr	r3, [pc, #240]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	4a3b      	ldr	r2, [pc, #236]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002480:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002484:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8087 	beq.w	800259e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002490:	4b36      	ldr	r3, [pc, #216]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	f003 030c 	and.w	r3, r3, #12
 8002498:	2b08      	cmp	r3, #8
 800249a:	d061      	beq.n	8002560 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	69db      	ldr	r3, [r3, #28]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d146      	bne.n	8002532 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a4:	4b33      	ldr	r3, [pc, #204]	; (8002574 <HAL_RCC_OscConfig+0x4cc>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7ff faff 	bl	8001aac <HAL_GetTick>
 80024ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b0:	e008      	b.n	80024c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b2:	f7ff fafb 	bl	8001aac <HAL_GetTick>
 80024b6:	4602      	mov	r2, r0
 80024b8:	693b      	ldr	r3, [r7, #16]
 80024ba:	1ad3      	subs	r3, r2, r3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e06d      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c4:	4b29      	ldr	r3, [pc, #164]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1f0      	bne.n	80024b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a1b      	ldr	r3, [r3, #32]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d108      	bne.n	80024ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024da:	4b24      	ldr	r3, [pc, #144]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4921      	ldr	r1, [pc, #132]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024ec:	4b1f      	ldr	r3, [pc, #124]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a19      	ldr	r1, [r3, #32]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	430b      	orrs	r3, r1
 80024fe:	491b      	ldr	r1, [pc, #108]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002500:	4313      	orrs	r3, r2
 8002502:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002504:	4b1b      	ldr	r3, [pc, #108]	; (8002574 <HAL_RCC_OscConfig+0x4cc>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800250a:	f7ff facf 	bl	8001aac <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002512:	f7ff facb 	bl	8001aac <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e03d      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002524:	4b11      	ldr	r3, [pc, #68]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d0f0      	beq.n	8002512 <HAL_RCC_OscConfig+0x46a>
 8002530:	e035      	b.n	800259e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002532:	4b10      	ldr	r3, [pc, #64]	; (8002574 <HAL_RCC_OscConfig+0x4cc>)
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002538:	f7ff fab8 	bl	8001aac <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800253e:	e008      	b.n	8002552 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002540:	f7ff fab4 	bl	8001aac <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	2b02      	cmp	r3, #2
 800254c:	d901      	bls.n	8002552 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800254e:	2303      	movs	r3, #3
 8002550:	e026      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002552:	4b06      	ldr	r3, [pc, #24]	; (800256c <HAL_RCC_OscConfig+0x4c4>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f0      	bne.n	8002540 <HAL_RCC_OscConfig+0x498>
 800255e:	e01e      	b.n	800259e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	69db      	ldr	r3, [r3, #28]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d107      	bne.n	8002578 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e019      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
 800256c:	40021000 	.word	0x40021000
 8002570:	40007000 	.word	0x40007000
 8002574:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCC_OscConfig+0x500>)
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6a1b      	ldr	r3, [r3, #32]
 8002588:	429a      	cmp	r2, r3
 800258a:	d106      	bne.n	800259a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002596:	429a      	cmp	r2, r3
 8002598:	d001      	beq.n	800259e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800259e:	2300      	movs	r3, #0
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	40021000 	.word	0x40021000

080025ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b084      	sub	sp, #16
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d101      	bne.n	80025c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0d0      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025c0:	4b6a      	ldr	r3, [pc, #424]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0307 	and.w	r3, r3, #7
 80025c8:	683a      	ldr	r2, [r7, #0]
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d910      	bls.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ce:	4b67      	ldr	r3, [pc, #412]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f023 0207 	bic.w	r2, r3, #7
 80025d6:	4965      	ldr	r1, [pc, #404]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	4313      	orrs	r3, r2
 80025dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025de:	4b63      	ldr	r3, [pc, #396]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	429a      	cmp	r2, r3
 80025ea:	d001      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e0b8      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d020      	beq.n	800263e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d005      	beq.n	8002614 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002608:	4b59      	ldr	r3, [pc, #356]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	4a58      	ldr	r2, [pc, #352]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002612:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f003 0308 	and.w	r3, r3, #8
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002620:	4b53      	ldr	r3, [pc, #332]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	4a52      	ldr	r2, [pc, #328]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800262a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262c:	4b50      	ldr	r3, [pc, #320]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	494d      	ldr	r1, [pc, #308]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	2b00      	cmp	r3, #0
 8002648:	d040      	beq.n	80026cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d107      	bne.n	8002662 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002652:	4b47      	ldr	r3, [pc, #284]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d115      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e07f      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	2b02      	cmp	r3, #2
 8002668:	d107      	bne.n	800267a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800266a:	4b41      	ldr	r3, [pc, #260]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d109      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e073      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800267a:	4b3d      	ldr	r3, [pc, #244]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 0302 	and.w	r3, r3, #2
 8002682:	2b00      	cmp	r3, #0
 8002684:	d101      	bne.n	800268a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002686:	2301      	movs	r3, #1
 8002688:	e06b      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800268a:	4b39      	ldr	r3, [pc, #228]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f023 0203 	bic.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	685b      	ldr	r3, [r3, #4]
 8002696:	4936      	ldr	r1, [pc, #216]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	4313      	orrs	r3, r2
 800269a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800269c:	f7ff fa06 	bl	8001aac <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a2:	e00a      	b.n	80026ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026a4:	f7ff fa02 	bl	8001aac <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d901      	bls.n	80026ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e053      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026ba:	4b2d      	ldr	r3, [pc, #180]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f003 020c 	and.w	r2, r3, #12
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d1eb      	bne.n	80026a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026cc:	4b27      	ldr	r3, [pc, #156]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	683a      	ldr	r2, [r7, #0]
 80026d6:	429a      	cmp	r2, r3
 80026d8:	d210      	bcs.n	80026fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026da:	4b24      	ldr	r3, [pc, #144]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f023 0207 	bic.w	r2, r3, #7
 80026e2:	4922      	ldr	r1, [pc, #136]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ea:	4b20      	ldr	r3, [pc, #128]	; (800276c <HAL_RCC_ClockConfig+0x1c0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d001      	beq.n	80026fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	e032      	b.n	8002762 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0304 	and.w	r3, r3, #4
 8002704:	2b00      	cmp	r3, #0
 8002706:	d008      	beq.n	800271a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002708:	4b19      	ldr	r3, [pc, #100]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	4916      	ldr	r1, [pc, #88]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	4313      	orrs	r3, r2
 8002718:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0308 	and.w	r3, r3, #8
 8002722:	2b00      	cmp	r3, #0
 8002724:	d009      	beq.n	800273a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	691b      	ldr	r3, [r3, #16]
 8002732:	00db      	lsls	r3, r3, #3
 8002734:	490e      	ldr	r1, [pc, #56]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	4313      	orrs	r3, r2
 8002738:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800273a:	f000 f821 	bl	8002780 <HAL_RCC_GetSysClockFreq>
 800273e:	4602      	mov	r2, r0
 8002740:	4b0b      	ldr	r3, [pc, #44]	; (8002770 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	091b      	lsrs	r3, r3, #4
 8002746:	f003 030f 	and.w	r3, r3, #15
 800274a:	490a      	ldr	r1, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x1c8>)
 800274c:	5ccb      	ldrb	r3, [r1, r3]
 800274e:	fa22 f303 	lsr.w	r3, r2, r3
 8002752:	4a09      	ldr	r2, [pc, #36]	; (8002778 <HAL_RCC_ClockConfig+0x1cc>)
 8002754:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002756:	4b09      	ldr	r3, [pc, #36]	; (800277c <HAL_RCC_ClockConfig+0x1d0>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff f964 	bl	8001a28 <HAL_InitTick>

  return HAL_OK;
 8002760:	2300      	movs	r3, #0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3710      	adds	r7, #16
 8002766:	46bd      	mov	sp, r7
 8002768:	bd80      	pop	{r7, pc}
 800276a:	bf00      	nop
 800276c:	40022000 	.word	0x40022000
 8002770:	40021000 	.word	0x40021000
 8002774:	0802925c 	.word	0x0802925c
 8002778:	20000000 	.word	0x20000000
 800277c:	20000060 	.word	0x20000060

08002780 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002780:	b490      	push	{r4, r7}
 8002782:	b08a      	sub	sp, #40	; 0x28
 8002784:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002786:	4b29      	ldr	r3, [pc, #164]	; (800282c <HAL_RCC_GetSysClockFreq+0xac>)
 8002788:	1d3c      	adds	r4, r7, #4
 800278a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800278c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002790:	f240 2301 	movw	r3, #513	; 0x201
 8002794:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	61fb      	str	r3, [r7, #28]
 800279a:	2300      	movs	r3, #0
 800279c:	61bb      	str	r3, [r7, #24]
 800279e:	2300      	movs	r3, #0
 80027a0:	627b      	str	r3, [r7, #36]	; 0x24
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027aa:	4b21      	ldr	r3, [pc, #132]	; (8002830 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 030c 	and.w	r3, r3, #12
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d002      	beq.n	80027c0 <HAL_RCC_GetSysClockFreq+0x40>
 80027ba:	2b08      	cmp	r3, #8
 80027bc:	d003      	beq.n	80027c6 <HAL_RCC_GetSysClockFreq+0x46>
 80027be:	e02b      	b.n	8002818 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80027c0:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027c2:	623b      	str	r3, [r7, #32]
      break;
 80027c4:	e02b      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	0c9b      	lsrs	r3, r3, #18
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	3328      	adds	r3, #40	; 0x28
 80027d0:	443b      	add	r3, r7
 80027d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80027d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d012      	beq.n	8002808 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <HAL_RCC_GetSysClockFreq+0xb0>)
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	0c5b      	lsrs	r3, r3, #17
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	3328      	adds	r3, #40	; 0x28
 80027ee:	443b      	add	r3, r7
 80027f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80027f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	4a0e      	ldr	r2, [pc, #56]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb4>)
 80027fa:	fb03 f202 	mul.w	r2, r3, r2
 80027fe:	69bb      	ldr	r3, [r7, #24]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	627b      	str	r3, [r7, #36]	; 0x24
 8002806:	e004      	b.n	8002812 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	4a0b      	ldr	r2, [pc, #44]	; (8002838 <HAL_RCC_GetSysClockFreq+0xb8>)
 800280c:	fb02 f303 	mul.w	r3, r2, r3
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	623b      	str	r3, [r7, #32]
      break;
 8002816:	e002      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4b06      	ldr	r3, [pc, #24]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb4>)
 800281a:	623b      	str	r3, [r7, #32]
      break;
 800281c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281e:	6a3b      	ldr	r3, [r7, #32]
}
 8002820:	4618      	mov	r0, r3
 8002822:	3728      	adds	r7, #40	; 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bc90      	pop	{r4, r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	0800345c 	.word	0x0800345c
 8002830:	40021000 	.word	0x40021000
 8002834:	007a1200 	.word	0x007a1200
 8002838:	003d0900 	.word	0x003d0900

0800283c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002844:	4b0a      	ldr	r3, [pc, #40]	; (8002870 <RCC_Delay+0x34>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <RCC_Delay+0x38>)
 800284a:	fba2 2303 	umull	r2, r3, r2, r3
 800284e:	0a5b      	lsrs	r3, r3, #9
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	fb02 f303 	mul.w	r3, r2, r3
 8002856:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002858:	bf00      	nop
  }
  while (Delay --);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	1e5a      	subs	r2, r3, #1
 800285e:	60fa      	str	r2, [r7, #12]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f9      	bne.n	8002858 <RCC_Delay+0x1c>
}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	bc80      	pop	{r7}
 800286e:	4770      	bx	lr
 8002870:	20000000 	.word	0x20000000
 8002874:	10624dd3 	.word	0x10624dd3

08002878 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d004      	beq.n	8002894 <HAL_SRAM_Init+0x1c>
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002892:	d101      	bne.n	8002898 <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e038      	b.n	800290a <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d106      	bne.n	80028b2 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f7fe fcab 	bl	8001208 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	3308      	adds	r3, #8
 80028ba:	4619      	mov	r1, r3
 80028bc:	4610      	mov	r0, r2
 80028be:	f000 f829 	bl	8002914 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	6818      	ldr	r0, [r3, #0]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68b9      	ldr	r1, [r7, #8]
 80028ce:	f000 f88b 	bl	80029e8 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	6858      	ldr	r0, [r3, #4]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	f000 f8b6 	bl	8002a50 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	6892      	ldr	r2, [r2, #8]
 80028ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	6892      	ldr	r2, [r2, #8]
 80028f8:	f041 0101 	orr.w	r1, r1, #1
 80028fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	6812      	ldr	r2, [r2, #0]
 800292c:	f023 0101 	bic.w	r1, r3, #1
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	2b08      	cmp	r3, #8
 800293c:	d102      	bne.n	8002944 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800293e:	2340      	movs	r3, #64	; 0x40
 8002940:	617b      	str	r3, [r7, #20]
 8002942:	e001      	b.n	8002948 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002954:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800295a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002960:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002966:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 800296c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002972:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 8002978:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 800297e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 8002984:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 800298a:	4313      	orrs	r3, r2
 800298c:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	699b      	ldr	r3, [r3, #24]
 8002992:	693a      	ldr	r2, [r7, #16]
 8002994:	4313      	orrs	r3, r2
 8002996:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800299c:	693a      	ldr	r2, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80029a2:	4b10      	ldr	r3, [pc, #64]	; (80029e4 <FSMC_NORSRAM_Init+0xd0>)
 80029a4:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ac:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80029b4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	43db      	mvns	r3, r3
 80029c4:	ea02 0103 	and.w	r1, r2, r3
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4319      	orrs	r1, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80029d6:	2300      	movs	r3, #0
}
 80029d8:	4618      	mov	r0, r3
 80029da:	371c      	adds	r7, #28
 80029dc:	46bd      	mov	sp, r7
 80029de:	bc80      	pop	{r7}
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	0008fb7f 	.word	0x0008fb7f

080029e8 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	1c5a      	adds	r2, r3, #1
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029fe:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	431a      	orrs	r2, r3
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	021b      	lsls	r3, r3, #8
 8002a14:	431a      	orrs	r2, r3
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	041b      	lsls	r3, r3, #16
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	691b      	ldr	r3, [r3, #16]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	051b      	lsls	r3, r3, #20
 8002a26:	431a      	orrs	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	695b      	ldr	r3, [r3, #20]
 8002a2c:	3b02      	subs	r3, #2
 8002a2e:	061b      	lsls	r3, r3, #24
 8002a30:	431a      	orrs	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	3201      	adds	r2, #1
 8002a3c:	4319      	orrs	r1, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8002a44:	2300      	movs	r3, #0
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3714      	adds	r7, #20
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bc80      	pop	{r7}
 8002a4e:	4770      	bx	lr

08002a50 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b085      	sub	sp, #20
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	60f8      	str	r0, [r7, #12]
 8002a58:	60b9      	str	r1, [r7, #8]
 8002a5a:	607a      	str	r2, [r7, #4]
 8002a5c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a64:	d11d      	bne.n	8002aa2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8002a70:	4013      	ands	r3, r2
 8002a72:	68ba      	ldr	r2, [r7, #8]
 8002a74:	6811      	ldr	r1, [r2, #0]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	6852      	ldr	r2, [r2, #4]
 8002a7a:	0112      	lsls	r2, r2, #4
 8002a7c:	4311      	orrs	r1, r2
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	6892      	ldr	r2, [r2, #8]
 8002a82:	0212      	lsls	r2, r2, #8
 8002a84:	4311      	orrs	r1, r2
 8002a86:	68ba      	ldr	r2, [r7, #8]
 8002a88:	6992      	ldr	r2, [r2, #24]
 8002a8a:	4311      	orrs	r1, r2
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	68d2      	ldr	r2, [r2, #12]
 8002a90:	0412      	lsls	r2, r2, #16
 8002a92:	430a      	orrs	r2, r1
 8002a94:	ea43 0102 	orr.w	r1, r3, r2
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002aa0:	e005      	b.n	8002aae <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8002aaa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bc80      	pop	{r7}
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	cff00000 	.word	0xcff00000

08002ac0 <__errno>:
 8002ac0:	4b01      	ldr	r3, [pc, #4]	; (8002ac8 <__errno+0x8>)
 8002ac2:	6818      	ldr	r0, [r3, #0]
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	20000068 	.word	0x20000068

08002acc <__libc_init_array>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	2600      	movs	r6, #0
 8002ad0:	4d0c      	ldr	r5, [pc, #48]	; (8002b04 <__libc_init_array+0x38>)
 8002ad2:	4c0d      	ldr	r4, [pc, #52]	; (8002b08 <__libc_init_array+0x3c>)
 8002ad4:	1b64      	subs	r4, r4, r5
 8002ad6:	10a4      	asrs	r4, r4, #2
 8002ad8:	42a6      	cmp	r6, r4
 8002ada:	d109      	bne.n	8002af0 <__libc_init_array+0x24>
 8002adc:	f000 fcb0 	bl	8003440 <_init>
 8002ae0:	2600      	movs	r6, #0
 8002ae2:	4d0a      	ldr	r5, [pc, #40]	; (8002b0c <__libc_init_array+0x40>)
 8002ae4:	4c0a      	ldr	r4, [pc, #40]	; (8002b10 <__libc_init_array+0x44>)
 8002ae6:	1b64      	subs	r4, r4, r5
 8002ae8:	10a4      	asrs	r4, r4, #2
 8002aea:	42a6      	cmp	r6, r4
 8002aec:	d105      	bne.n	8002afa <__libc_init_array+0x2e>
 8002aee:	bd70      	pop	{r4, r5, r6, pc}
 8002af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002af4:	4798      	blx	r3
 8002af6:	3601      	adds	r6, #1
 8002af8:	e7ee      	b.n	8002ad8 <__libc_init_array+0xc>
 8002afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8002afe:	4798      	blx	r3
 8002b00:	3601      	adds	r6, #1
 8002b02:	e7f2      	b.n	8002aea <__libc_init_array+0x1e>
 8002b04:	080292a0 	.word	0x080292a0
 8002b08:	080292a0 	.word	0x080292a0
 8002b0c:	080292a0 	.word	0x080292a0
 8002b10:	080292a4 	.word	0x080292a4

08002b14 <memset>:
 8002b14:	4603      	mov	r3, r0
 8002b16:	4402      	add	r2, r0
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d100      	bne.n	8002b1e <memset+0xa>
 8002b1c:	4770      	bx	lr
 8002b1e:	f803 1b01 	strb.w	r1, [r3], #1
 8002b22:	e7f9      	b.n	8002b18 <memset+0x4>

08002b24 <sniprintf>:
 8002b24:	b40c      	push	{r2, r3}
 8002b26:	b530      	push	{r4, r5, lr}
 8002b28:	4b17      	ldr	r3, [pc, #92]	; (8002b88 <sniprintf+0x64>)
 8002b2a:	1e0c      	subs	r4, r1, #0
 8002b2c:	681d      	ldr	r5, [r3, #0]
 8002b2e:	b09d      	sub	sp, #116	; 0x74
 8002b30:	da08      	bge.n	8002b44 <sniprintf+0x20>
 8002b32:	238b      	movs	r3, #139	; 0x8b
 8002b34:	f04f 30ff 	mov.w	r0, #4294967295
 8002b38:	602b      	str	r3, [r5, #0]
 8002b3a:	b01d      	add	sp, #116	; 0x74
 8002b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002b40:	b002      	add	sp, #8
 8002b42:	4770      	bx	lr
 8002b44:	f44f 7302 	mov.w	r3, #520	; 0x208
 8002b48:	f8ad 3014 	strh.w	r3, [sp, #20]
 8002b4c:	bf0c      	ite	eq
 8002b4e:	4623      	moveq	r3, r4
 8002b50:	f104 33ff 	addne.w	r3, r4, #4294967295
 8002b54:	9304      	str	r3, [sp, #16]
 8002b56:	9307      	str	r3, [sp, #28]
 8002b58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b5c:	9002      	str	r0, [sp, #8]
 8002b5e:	9006      	str	r0, [sp, #24]
 8002b60:	f8ad 3016 	strh.w	r3, [sp, #22]
 8002b64:	4628      	mov	r0, r5
 8002b66:	ab21      	add	r3, sp, #132	; 0x84
 8002b68:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8002b6a:	a902      	add	r1, sp, #8
 8002b6c:	9301      	str	r3, [sp, #4]
 8002b6e:	f000 f869 	bl	8002c44 <_svfiprintf_r>
 8002b72:	1c43      	adds	r3, r0, #1
 8002b74:	bfbc      	itt	lt
 8002b76:	238b      	movlt	r3, #139	; 0x8b
 8002b78:	602b      	strlt	r3, [r5, #0]
 8002b7a:	2c00      	cmp	r4, #0
 8002b7c:	d0dd      	beq.n	8002b3a <sniprintf+0x16>
 8002b7e:	2200      	movs	r2, #0
 8002b80:	9b02      	ldr	r3, [sp, #8]
 8002b82:	701a      	strb	r2, [r3, #0]
 8002b84:	e7d9      	b.n	8002b3a <sniprintf+0x16>
 8002b86:	bf00      	nop
 8002b88:	20000068 	.word	0x20000068

08002b8c <__ssputs_r>:
 8002b8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b90:	688e      	ldr	r6, [r1, #8]
 8002b92:	4682      	mov	sl, r0
 8002b94:	429e      	cmp	r6, r3
 8002b96:	460c      	mov	r4, r1
 8002b98:	4690      	mov	r8, r2
 8002b9a:	461f      	mov	r7, r3
 8002b9c:	d838      	bhi.n	8002c10 <__ssputs_r+0x84>
 8002b9e:	898a      	ldrh	r2, [r1, #12]
 8002ba0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002ba4:	d032      	beq.n	8002c0c <__ssputs_r+0x80>
 8002ba6:	6825      	ldr	r5, [r4, #0]
 8002ba8:	6909      	ldr	r1, [r1, #16]
 8002baa:	3301      	adds	r3, #1
 8002bac:	eba5 0901 	sub.w	r9, r5, r1
 8002bb0:	6965      	ldr	r5, [r4, #20]
 8002bb2:	444b      	add	r3, r9
 8002bb4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002bb8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002bbc:	106d      	asrs	r5, r5, #1
 8002bbe:	429d      	cmp	r5, r3
 8002bc0:	bf38      	it	cc
 8002bc2:	461d      	movcc	r5, r3
 8002bc4:	0553      	lsls	r3, r2, #21
 8002bc6:	d531      	bpl.n	8002c2c <__ssputs_r+0xa0>
 8002bc8:	4629      	mov	r1, r5
 8002bca:	f000 fb6f 	bl	80032ac <_malloc_r>
 8002bce:	4606      	mov	r6, r0
 8002bd0:	b950      	cbnz	r0, 8002be8 <__ssputs_r+0x5c>
 8002bd2:	230c      	movs	r3, #12
 8002bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bd8:	f8ca 3000 	str.w	r3, [sl]
 8002bdc:	89a3      	ldrh	r3, [r4, #12]
 8002bde:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002be2:	81a3      	strh	r3, [r4, #12]
 8002be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002be8:	464a      	mov	r2, r9
 8002bea:	6921      	ldr	r1, [r4, #16]
 8002bec:	f000 face 	bl	800318c <memcpy>
 8002bf0:	89a3      	ldrh	r3, [r4, #12]
 8002bf2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bfa:	81a3      	strh	r3, [r4, #12]
 8002bfc:	6126      	str	r6, [r4, #16]
 8002bfe:	444e      	add	r6, r9
 8002c00:	6026      	str	r6, [r4, #0]
 8002c02:	463e      	mov	r6, r7
 8002c04:	6165      	str	r5, [r4, #20]
 8002c06:	eba5 0509 	sub.w	r5, r5, r9
 8002c0a:	60a5      	str	r5, [r4, #8]
 8002c0c:	42be      	cmp	r6, r7
 8002c0e:	d900      	bls.n	8002c12 <__ssputs_r+0x86>
 8002c10:	463e      	mov	r6, r7
 8002c12:	4632      	mov	r2, r6
 8002c14:	4641      	mov	r1, r8
 8002c16:	6820      	ldr	r0, [r4, #0]
 8002c18:	f000 fac6 	bl	80031a8 <memmove>
 8002c1c:	68a3      	ldr	r3, [r4, #8]
 8002c1e:	2000      	movs	r0, #0
 8002c20:	1b9b      	subs	r3, r3, r6
 8002c22:	60a3      	str	r3, [r4, #8]
 8002c24:	6823      	ldr	r3, [r4, #0]
 8002c26:	4433      	add	r3, r6
 8002c28:	6023      	str	r3, [r4, #0]
 8002c2a:	e7db      	b.n	8002be4 <__ssputs_r+0x58>
 8002c2c:	462a      	mov	r2, r5
 8002c2e:	f000 fbb1 	bl	8003394 <_realloc_r>
 8002c32:	4606      	mov	r6, r0
 8002c34:	2800      	cmp	r0, #0
 8002c36:	d1e1      	bne.n	8002bfc <__ssputs_r+0x70>
 8002c38:	4650      	mov	r0, sl
 8002c3a:	6921      	ldr	r1, [r4, #16]
 8002c3c:	f000 face 	bl	80031dc <_free_r>
 8002c40:	e7c7      	b.n	8002bd2 <__ssputs_r+0x46>
	...

08002c44 <_svfiprintf_r>:
 8002c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c48:	4698      	mov	r8, r3
 8002c4a:	898b      	ldrh	r3, [r1, #12]
 8002c4c:	4607      	mov	r7, r0
 8002c4e:	061b      	lsls	r3, r3, #24
 8002c50:	460d      	mov	r5, r1
 8002c52:	4614      	mov	r4, r2
 8002c54:	b09d      	sub	sp, #116	; 0x74
 8002c56:	d50e      	bpl.n	8002c76 <_svfiprintf_r+0x32>
 8002c58:	690b      	ldr	r3, [r1, #16]
 8002c5a:	b963      	cbnz	r3, 8002c76 <_svfiprintf_r+0x32>
 8002c5c:	2140      	movs	r1, #64	; 0x40
 8002c5e:	f000 fb25 	bl	80032ac <_malloc_r>
 8002c62:	6028      	str	r0, [r5, #0]
 8002c64:	6128      	str	r0, [r5, #16]
 8002c66:	b920      	cbnz	r0, 8002c72 <_svfiprintf_r+0x2e>
 8002c68:	230c      	movs	r3, #12
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002c70:	e0d1      	b.n	8002e16 <_svfiprintf_r+0x1d2>
 8002c72:	2340      	movs	r3, #64	; 0x40
 8002c74:	616b      	str	r3, [r5, #20]
 8002c76:	2300      	movs	r3, #0
 8002c78:	9309      	str	r3, [sp, #36]	; 0x24
 8002c7a:	2320      	movs	r3, #32
 8002c7c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002c80:	2330      	movs	r3, #48	; 0x30
 8002c82:	f04f 0901 	mov.w	r9, #1
 8002c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8002c8a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002e30 <_svfiprintf_r+0x1ec>
 8002c8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002c92:	4623      	mov	r3, r4
 8002c94:	469a      	mov	sl, r3
 8002c96:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002c9a:	b10a      	cbz	r2, 8002ca0 <_svfiprintf_r+0x5c>
 8002c9c:	2a25      	cmp	r2, #37	; 0x25
 8002c9e:	d1f9      	bne.n	8002c94 <_svfiprintf_r+0x50>
 8002ca0:	ebba 0b04 	subs.w	fp, sl, r4
 8002ca4:	d00b      	beq.n	8002cbe <_svfiprintf_r+0x7a>
 8002ca6:	465b      	mov	r3, fp
 8002ca8:	4622      	mov	r2, r4
 8002caa:	4629      	mov	r1, r5
 8002cac:	4638      	mov	r0, r7
 8002cae:	f7ff ff6d 	bl	8002b8c <__ssputs_r>
 8002cb2:	3001      	adds	r0, #1
 8002cb4:	f000 80aa 	beq.w	8002e0c <_svfiprintf_r+0x1c8>
 8002cb8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002cba:	445a      	add	r2, fp
 8002cbc:	9209      	str	r2, [sp, #36]	; 0x24
 8002cbe:	f89a 3000 	ldrb.w	r3, [sl]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	f000 80a2 	beq.w	8002e0c <_svfiprintf_r+0x1c8>
 8002cc8:	2300      	movs	r3, #0
 8002cca:	f04f 32ff 	mov.w	r2, #4294967295
 8002cce:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002cd2:	f10a 0a01 	add.w	sl, sl, #1
 8002cd6:	9304      	str	r3, [sp, #16]
 8002cd8:	9307      	str	r3, [sp, #28]
 8002cda:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002cde:	931a      	str	r3, [sp, #104]	; 0x68
 8002ce0:	4654      	mov	r4, sl
 8002ce2:	2205      	movs	r2, #5
 8002ce4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002ce8:	4851      	ldr	r0, [pc, #324]	; (8002e30 <_svfiprintf_r+0x1ec>)
 8002cea:	f000 fa41 	bl	8003170 <memchr>
 8002cee:	9a04      	ldr	r2, [sp, #16]
 8002cf0:	b9d8      	cbnz	r0, 8002d2a <_svfiprintf_r+0xe6>
 8002cf2:	06d0      	lsls	r0, r2, #27
 8002cf4:	bf44      	itt	mi
 8002cf6:	2320      	movmi	r3, #32
 8002cf8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002cfc:	0711      	lsls	r1, r2, #28
 8002cfe:	bf44      	itt	mi
 8002d00:	232b      	movmi	r3, #43	; 0x2b
 8002d02:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002d06:	f89a 3000 	ldrb.w	r3, [sl]
 8002d0a:	2b2a      	cmp	r3, #42	; 0x2a
 8002d0c:	d015      	beq.n	8002d3a <_svfiprintf_r+0xf6>
 8002d0e:	4654      	mov	r4, sl
 8002d10:	2000      	movs	r0, #0
 8002d12:	f04f 0c0a 	mov.w	ip, #10
 8002d16:	9a07      	ldr	r2, [sp, #28]
 8002d18:	4621      	mov	r1, r4
 8002d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002d1e:	3b30      	subs	r3, #48	; 0x30
 8002d20:	2b09      	cmp	r3, #9
 8002d22:	d94e      	bls.n	8002dc2 <_svfiprintf_r+0x17e>
 8002d24:	b1b0      	cbz	r0, 8002d54 <_svfiprintf_r+0x110>
 8002d26:	9207      	str	r2, [sp, #28]
 8002d28:	e014      	b.n	8002d54 <_svfiprintf_r+0x110>
 8002d2a:	eba0 0308 	sub.w	r3, r0, r8
 8002d2e:	fa09 f303 	lsl.w	r3, r9, r3
 8002d32:	4313      	orrs	r3, r2
 8002d34:	46a2      	mov	sl, r4
 8002d36:	9304      	str	r3, [sp, #16]
 8002d38:	e7d2      	b.n	8002ce0 <_svfiprintf_r+0x9c>
 8002d3a:	9b03      	ldr	r3, [sp, #12]
 8002d3c:	1d19      	adds	r1, r3, #4
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	9103      	str	r1, [sp, #12]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	bfbb      	ittet	lt
 8002d46:	425b      	neglt	r3, r3
 8002d48:	f042 0202 	orrlt.w	r2, r2, #2
 8002d4c:	9307      	strge	r3, [sp, #28]
 8002d4e:	9307      	strlt	r3, [sp, #28]
 8002d50:	bfb8      	it	lt
 8002d52:	9204      	strlt	r2, [sp, #16]
 8002d54:	7823      	ldrb	r3, [r4, #0]
 8002d56:	2b2e      	cmp	r3, #46	; 0x2e
 8002d58:	d10c      	bne.n	8002d74 <_svfiprintf_r+0x130>
 8002d5a:	7863      	ldrb	r3, [r4, #1]
 8002d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8002d5e:	d135      	bne.n	8002dcc <_svfiprintf_r+0x188>
 8002d60:	9b03      	ldr	r3, [sp, #12]
 8002d62:	3402      	adds	r4, #2
 8002d64:	1d1a      	adds	r2, r3, #4
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	9203      	str	r2, [sp, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bfb8      	it	lt
 8002d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8002d72:	9305      	str	r3, [sp, #20]
 8002d74:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8002e34 <_svfiprintf_r+0x1f0>
 8002d78:	2203      	movs	r2, #3
 8002d7a:	4650      	mov	r0, sl
 8002d7c:	7821      	ldrb	r1, [r4, #0]
 8002d7e:	f000 f9f7 	bl	8003170 <memchr>
 8002d82:	b140      	cbz	r0, 8002d96 <_svfiprintf_r+0x152>
 8002d84:	2340      	movs	r3, #64	; 0x40
 8002d86:	eba0 000a 	sub.w	r0, r0, sl
 8002d8a:	fa03 f000 	lsl.w	r0, r3, r0
 8002d8e:	9b04      	ldr	r3, [sp, #16]
 8002d90:	3401      	adds	r4, #1
 8002d92:	4303      	orrs	r3, r0
 8002d94:	9304      	str	r3, [sp, #16]
 8002d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d9a:	2206      	movs	r2, #6
 8002d9c:	4826      	ldr	r0, [pc, #152]	; (8002e38 <_svfiprintf_r+0x1f4>)
 8002d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002da2:	f000 f9e5 	bl	8003170 <memchr>
 8002da6:	2800      	cmp	r0, #0
 8002da8:	d038      	beq.n	8002e1c <_svfiprintf_r+0x1d8>
 8002daa:	4b24      	ldr	r3, [pc, #144]	; (8002e3c <_svfiprintf_r+0x1f8>)
 8002dac:	bb1b      	cbnz	r3, 8002df6 <_svfiprintf_r+0x1b2>
 8002dae:	9b03      	ldr	r3, [sp, #12]
 8002db0:	3307      	adds	r3, #7
 8002db2:	f023 0307 	bic.w	r3, r3, #7
 8002db6:	3308      	adds	r3, #8
 8002db8:	9303      	str	r3, [sp, #12]
 8002dba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dbc:	4433      	add	r3, r6
 8002dbe:	9309      	str	r3, [sp, #36]	; 0x24
 8002dc0:	e767      	b.n	8002c92 <_svfiprintf_r+0x4e>
 8002dc2:	460c      	mov	r4, r1
 8002dc4:	2001      	movs	r0, #1
 8002dc6:	fb0c 3202 	mla	r2, ip, r2, r3
 8002dca:	e7a5      	b.n	8002d18 <_svfiprintf_r+0xd4>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	f04f 0c0a 	mov.w	ip, #10
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	3401      	adds	r4, #1
 8002dd6:	9305      	str	r3, [sp, #20]
 8002dd8:	4620      	mov	r0, r4
 8002dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002dde:	3a30      	subs	r2, #48	; 0x30
 8002de0:	2a09      	cmp	r2, #9
 8002de2:	d903      	bls.n	8002dec <_svfiprintf_r+0x1a8>
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0c5      	beq.n	8002d74 <_svfiprintf_r+0x130>
 8002de8:	9105      	str	r1, [sp, #20]
 8002dea:	e7c3      	b.n	8002d74 <_svfiprintf_r+0x130>
 8002dec:	4604      	mov	r4, r0
 8002dee:	2301      	movs	r3, #1
 8002df0:	fb0c 2101 	mla	r1, ip, r1, r2
 8002df4:	e7f0      	b.n	8002dd8 <_svfiprintf_r+0x194>
 8002df6:	ab03      	add	r3, sp, #12
 8002df8:	9300      	str	r3, [sp, #0]
 8002dfa:	462a      	mov	r2, r5
 8002dfc:	4638      	mov	r0, r7
 8002dfe:	4b10      	ldr	r3, [pc, #64]	; (8002e40 <_svfiprintf_r+0x1fc>)
 8002e00:	a904      	add	r1, sp, #16
 8002e02:	f3af 8000 	nop.w
 8002e06:	1c42      	adds	r2, r0, #1
 8002e08:	4606      	mov	r6, r0
 8002e0a:	d1d6      	bne.n	8002dba <_svfiprintf_r+0x176>
 8002e0c:	89ab      	ldrh	r3, [r5, #12]
 8002e0e:	065b      	lsls	r3, r3, #25
 8002e10:	f53f af2c 	bmi.w	8002c6c <_svfiprintf_r+0x28>
 8002e14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002e16:	b01d      	add	sp, #116	; 0x74
 8002e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e1c:	ab03      	add	r3, sp, #12
 8002e1e:	9300      	str	r3, [sp, #0]
 8002e20:	462a      	mov	r2, r5
 8002e22:	4638      	mov	r0, r7
 8002e24:	4b06      	ldr	r3, [pc, #24]	; (8002e40 <_svfiprintf_r+0x1fc>)
 8002e26:	a904      	add	r1, sp, #16
 8002e28:	f000 f87c 	bl	8002f24 <_printf_i>
 8002e2c:	e7eb      	b.n	8002e06 <_svfiprintf_r+0x1c2>
 8002e2e:	bf00      	nop
 8002e30:	0802926c 	.word	0x0802926c
 8002e34:	08029272 	.word	0x08029272
 8002e38:	08029276 	.word	0x08029276
 8002e3c:	00000000 	.word	0x00000000
 8002e40:	08002b8d 	.word	0x08002b8d

08002e44 <_printf_common>:
 8002e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e48:	4616      	mov	r6, r2
 8002e4a:	4699      	mov	r9, r3
 8002e4c:	688a      	ldr	r2, [r1, #8]
 8002e4e:	690b      	ldr	r3, [r1, #16]
 8002e50:	4607      	mov	r7, r0
 8002e52:	4293      	cmp	r3, r2
 8002e54:	bfb8      	it	lt
 8002e56:	4613      	movlt	r3, r2
 8002e58:	6033      	str	r3, [r6, #0]
 8002e5a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002e5e:	460c      	mov	r4, r1
 8002e60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002e64:	b10a      	cbz	r2, 8002e6a <_printf_common+0x26>
 8002e66:	3301      	adds	r3, #1
 8002e68:	6033      	str	r3, [r6, #0]
 8002e6a:	6823      	ldr	r3, [r4, #0]
 8002e6c:	0699      	lsls	r1, r3, #26
 8002e6e:	bf42      	ittt	mi
 8002e70:	6833      	ldrmi	r3, [r6, #0]
 8002e72:	3302      	addmi	r3, #2
 8002e74:	6033      	strmi	r3, [r6, #0]
 8002e76:	6825      	ldr	r5, [r4, #0]
 8002e78:	f015 0506 	ands.w	r5, r5, #6
 8002e7c:	d106      	bne.n	8002e8c <_printf_common+0x48>
 8002e7e:	f104 0a19 	add.w	sl, r4, #25
 8002e82:	68e3      	ldr	r3, [r4, #12]
 8002e84:	6832      	ldr	r2, [r6, #0]
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	42ab      	cmp	r3, r5
 8002e8a:	dc28      	bgt.n	8002ede <_printf_common+0x9a>
 8002e8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8002e90:	1e13      	subs	r3, r2, #0
 8002e92:	6822      	ldr	r2, [r4, #0]
 8002e94:	bf18      	it	ne
 8002e96:	2301      	movne	r3, #1
 8002e98:	0692      	lsls	r2, r2, #26
 8002e9a:	d42d      	bmi.n	8002ef8 <_printf_common+0xb4>
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	4638      	mov	r0, r7
 8002ea0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ea4:	47c0      	blx	r8
 8002ea6:	3001      	adds	r0, #1
 8002ea8:	d020      	beq.n	8002eec <_printf_common+0xa8>
 8002eaa:	6823      	ldr	r3, [r4, #0]
 8002eac:	68e5      	ldr	r5, [r4, #12]
 8002eae:	f003 0306 	and.w	r3, r3, #6
 8002eb2:	2b04      	cmp	r3, #4
 8002eb4:	bf18      	it	ne
 8002eb6:	2500      	movne	r5, #0
 8002eb8:	6832      	ldr	r2, [r6, #0]
 8002eba:	f04f 0600 	mov.w	r6, #0
 8002ebe:	68a3      	ldr	r3, [r4, #8]
 8002ec0:	bf08      	it	eq
 8002ec2:	1aad      	subeq	r5, r5, r2
 8002ec4:	6922      	ldr	r2, [r4, #16]
 8002ec6:	bf08      	it	eq
 8002ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	bfc4      	itt	gt
 8002ed0:	1a9b      	subgt	r3, r3, r2
 8002ed2:	18ed      	addgt	r5, r5, r3
 8002ed4:	341a      	adds	r4, #26
 8002ed6:	42b5      	cmp	r5, r6
 8002ed8:	d11a      	bne.n	8002f10 <_printf_common+0xcc>
 8002eda:	2000      	movs	r0, #0
 8002edc:	e008      	b.n	8002ef0 <_printf_common+0xac>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	4652      	mov	r2, sl
 8002ee2:	4649      	mov	r1, r9
 8002ee4:	4638      	mov	r0, r7
 8002ee6:	47c0      	blx	r8
 8002ee8:	3001      	adds	r0, #1
 8002eea:	d103      	bne.n	8002ef4 <_printf_common+0xb0>
 8002eec:	f04f 30ff 	mov.w	r0, #4294967295
 8002ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ef4:	3501      	adds	r5, #1
 8002ef6:	e7c4      	b.n	8002e82 <_printf_common+0x3e>
 8002ef8:	2030      	movs	r0, #48	; 0x30
 8002efa:	18e1      	adds	r1, r4, r3
 8002efc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002f00:	1c5a      	adds	r2, r3, #1
 8002f02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002f06:	4422      	add	r2, r4
 8002f08:	3302      	adds	r3, #2
 8002f0a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002f0e:	e7c5      	b.n	8002e9c <_printf_common+0x58>
 8002f10:	2301      	movs	r3, #1
 8002f12:	4622      	mov	r2, r4
 8002f14:	4649      	mov	r1, r9
 8002f16:	4638      	mov	r0, r7
 8002f18:	47c0      	blx	r8
 8002f1a:	3001      	adds	r0, #1
 8002f1c:	d0e6      	beq.n	8002eec <_printf_common+0xa8>
 8002f1e:	3601      	adds	r6, #1
 8002f20:	e7d9      	b.n	8002ed6 <_printf_common+0x92>
	...

08002f24 <_printf_i>:
 8002f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002f28:	7e0f      	ldrb	r7, [r1, #24]
 8002f2a:	4691      	mov	r9, r2
 8002f2c:	2f78      	cmp	r7, #120	; 0x78
 8002f2e:	4680      	mov	r8, r0
 8002f30:	460c      	mov	r4, r1
 8002f32:	469a      	mov	sl, r3
 8002f34:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002f36:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002f3a:	d807      	bhi.n	8002f4c <_printf_i+0x28>
 8002f3c:	2f62      	cmp	r7, #98	; 0x62
 8002f3e:	d80a      	bhi.n	8002f56 <_printf_i+0x32>
 8002f40:	2f00      	cmp	r7, #0
 8002f42:	f000 80d9 	beq.w	80030f8 <_printf_i+0x1d4>
 8002f46:	2f58      	cmp	r7, #88	; 0x58
 8002f48:	f000 80a4 	beq.w	8003094 <_printf_i+0x170>
 8002f4c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f50:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8002f54:	e03a      	b.n	8002fcc <_printf_i+0xa8>
 8002f56:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002f5a:	2b15      	cmp	r3, #21
 8002f5c:	d8f6      	bhi.n	8002f4c <_printf_i+0x28>
 8002f5e:	a101      	add	r1, pc, #4	; (adr r1, 8002f64 <_printf_i+0x40>)
 8002f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002f64:	08002fbd 	.word	0x08002fbd
 8002f68:	08002fd1 	.word	0x08002fd1
 8002f6c:	08002f4d 	.word	0x08002f4d
 8002f70:	08002f4d 	.word	0x08002f4d
 8002f74:	08002f4d 	.word	0x08002f4d
 8002f78:	08002f4d 	.word	0x08002f4d
 8002f7c:	08002fd1 	.word	0x08002fd1
 8002f80:	08002f4d 	.word	0x08002f4d
 8002f84:	08002f4d 	.word	0x08002f4d
 8002f88:	08002f4d 	.word	0x08002f4d
 8002f8c:	08002f4d 	.word	0x08002f4d
 8002f90:	080030df 	.word	0x080030df
 8002f94:	08003001 	.word	0x08003001
 8002f98:	080030c1 	.word	0x080030c1
 8002f9c:	08002f4d 	.word	0x08002f4d
 8002fa0:	08002f4d 	.word	0x08002f4d
 8002fa4:	08003101 	.word	0x08003101
 8002fa8:	08002f4d 	.word	0x08002f4d
 8002fac:	08003001 	.word	0x08003001
 8002fb0:	08002f4d 	.word	0x08002f4d
 8002fb4:	08002f4d 	.word	0x08002f4d
 8002fb8:	080030c9 	.word	0x080030c9
 8002fbc:	682b      	ldr	r3, [r5, #0]
 8002fbe:	1d1a      	adds	r2, r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	602a      	str	r2, [r5, #0]
 8002fc4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002fc8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002fcc:	2301      	movs	r3, #1
 8002fce:	e0a4      	b.n	800311a <_printf_i+0x1f6>
 8002fd0:	6820      	ldr	r0, [r4, #0]
 8002fd2:	6829      	ldr	r1, [r5, #0]
 8002fd4:	0606      	lsls	r6, r0, #24
 8002fd6:	f101 0304 	add.w	r3, r1, #4
 8002fda:	d50a      	bpl.n	8002ff2 <_printf_i+0xce>
 8002fdc:	680e      	ldr	r6, [r1, #0]
 8002fde:	602b      	str	r3, [r5, #0]
 8002fe0:	2e00      	cmp	r6, #0
 8002fe2:	da03      	bge.n	8002fec <_printf_i+0xc8>
 8002fe4:	232d      	movs	r3, #45	; 0x2d
 8002fe6:	4276      	negs	r6, r6
 8002fe8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002fec:	230a      	movs	r3, #10
 8002fee:	485e      	ldr	r0, [pc, #376]	; (8003168 <_printf_i+0x244>)
 8002ff0:	e019      	b.n	8003026 <_printf_i+0x102>
 8002ff2:	680e      	ldr	r6, [r1, #0]
 8002ff4:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002ff8:	602b      	str	r3, [r5, #0]
 8002ffa:	bf18      	it	ne
 8002ffc:	b236      	sxthne	r6, r6
 8002ffe:	e7ef      	b.n	8002fe0 <_printf_i+0xbc>
 8003000:	682b      	ldr	r3, [r5, #0]
 8003002:	6820      	ldr	r0, [r4, #0]
 8003004:	1d19      	adds	r1, r3, #4
 8003006:	6029      	str	r1, [r5, #0]
 8003008:	0601      	lsls	r1, r0, #24
 800300a:	d501      	bpl.n	8003010 <_printf_i+0xec>
 800300c:	681e      	ldr	r6, [r3, #0]
 800300e:	e002      	b.n	8003016 <_printf_i+0xf2>
 8003010:	0646      	lsls	r6, r0, #25
 8003012:	d5fb      	bpl.n	800300c <_printf_i+0xe8>
 8003014:	881e      	ldrh	r6, [r3, #0]
 8003016:	2f6f      	cmp	r7, #111	; 0x6f
 8003018:	bf0c      	ite	eq
 800301a:	2308      	moveq	r3, #8
 800301c:	230a      	movne	r3, #10
 800301e:	4852      	ldr	r0, [pc, #328]	; (8003168 <_printf_i+0x244>)
 8003020:	2100      	movs	r1, #0
 8003022:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003026:	6865      	ldr	r5, [r4, #4]
 8003028:	2d00      	cmp	r5, #0
 800302a:	bfa8      	it	ge
 800302c:	6821      	ldrge	r1, [r4, #0]
 800302e:	60a5      	str	r5, [r4, #8]
 8003030:	bfa4      	itt	ge
 8003032:	f021 0104 	bicge.w	r1, r1, #4
 8003036:	6021      	strge	r1, [r4, #0]
 8003038:	b90e      	cbnz	r6, 800303e <_printf_i+0x11a>
 800303a:	2d00      	cmp	r5, #0
 800303c:	d04d      	beq.n	80030da <_printf_i+0x1b6>
 800303e:	4615      	mov	r5, r2
 8003040:	fbb6 f1f3 	udiv	r1, r6, r3
 8003044:	fb03 6711 	mls	r7, r3, r1, r6
 8003048:	5dc7      	ldrb	r7, [r0, r7]
 800304a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800304e:	4637      	mov	r7, r6
 8003050:	42bb      	cmp	r3, r7
 8003052:	460e      	mov	r6, r1
 8003054:	d9f4      	bls.n	8003040 <_printf_i+0x11c>
 8003056:	2b08      	cmp	r3, #8
 8003058:	d10b      	bne.n	8003072 <_printf_i+0x14e>
 800305a:	6823      	ldr	r3, [r4, #0]
 800305c:	07de      	lsls	r6, r3, #31
 800305e:	d508      	bpl.n	8003072 <_printf_i+0x14e>
 8003060:	6923      	ldr	r3, [r4, #16]
 8003062:	6861      	ldr	r1, [r4, #4]
 8003064:	4299      	cmp	r1, r3
 8003066:	bfde      	ittt	le
 8003068:	2330      	movle	r3, #48	; 0x30
 800306a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800306e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003072:	1b52      	subs	r2, r2, r5
 8003074:	6122      	str	r2, [r4, #16]
 8003076:	464b      	mov	r3, r9
 8003078:	4621      	mov	r1, r4
 800307a:	4640      	mov	r0, r8
 800307c:	f8cd a000 	str.w	sl, [sp]
 8003080:	aa03      	add	r2, sp, #12
 8003082:	f7ff fedf 	bl	8002e44 <_printf_common>
 8003086:	3001      	adds	r0, #1
 8003088:	d14c      	bne.n	8003124 <_printf_i+0x200>
 800308a:	f04f 30ff 	mov.w	r0, #4294967295
 800308e:	b004      	add	sp, #16
 8003090:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003094:	4834      	ldr	r0, [pc, #208]	; (8003168 <_printf_i+0x244>)
 8003096:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800309a:	6829      	ldr	r1, [r5, #0]
 800309c:	6823      	ldr	r3, [r4, #0]
 800309e:	f851 6b04 	ldr.w	r6, [r1], #4
 80030a2:	6029      	str	r1, [r5, #0]
 80030a4:	061d      	lsls	r5, r3, #24
 80030a6:	d514      	bpl.n	80030d2 <_printf_i+0x1ae>
 80030a8:	07df      	lsls	r7, r3, #31
 80030aa:	bf44      	itt	mi
 80030ac:	f043 0320 	orrmi.w	r3, r3, #32
 80030b0:	6023      	strmi	r3, [r4, #0]
 80030b2:	b91e      	cbnz	r6, 80030bc <_printf_i+0x198>
 80030b4:	6823      	ldr	r3, [r4, #0]
 80030b6:	f023 0320 	bic.w	r3, r3, #32
 80030ba:	6023      	str	r3, [r4, #0]
 80030bc:	2310      	movs	r3, #16
 80030be:	e7af      	b.n	8003020 <_printf_i+0xfc>
 80030c0:	6823      	ldr	r3, [r4, #0]
 80030c2:	f043 0320 	orr.w	r3, r3, #32
 80030c6:	6023      	str	r3, [r4, #0]
 80030c8:	2378      	movs	r3, #120	; 0x78
 80030ca:	4828      	ldr	r0, [pc, #160]	; (800316c <_printf_i+0x248>)
 80030cc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80030d0:	e7e3      	b.n	800309a <_printf_i+0x176>
 80030d2:	0659      	lsls	r1, r3, #25
 80030d4:	bf48      	it	mi
 80030d6:	b2b6      	uxthmi	r6, r6
 80030d8:	e7e6      	b.n	80030a8 <_printf_i+0x184>
 80030da:	4615      	mov	r5, r2
 80030dc:	e7bb      	b.n	8003056 <_printf_i+0x132>
 80030de:	682b      	ldr	r3, [r5, #0]
 80030e0:	6826      	ldr	r6, [r4, #0]
 80030e2:	1d18      	adds	r0, r3, #4
 80030e4:	6961      	ldr	r1, [r4, #20]
 80030e6:	6028      	str	r0, [r5, #0]
 80030e8:	0635      	lsls	r5, r6, #24
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	d501      	bpl.n	80030f2 <_printf_i+0x1ce>
 80030ee:	6019      	str	r1, [r3, #0]
 80030f0:	e002      	b.n	80030f8 <_printf_i+0x1d4>
 80030f2:	0670      	lsls	r0, r6, #25
 80030f4:	d5fb      	bpl.n	80030ee <_printf_i+0x1ca>
 80030f6:	8019      	strh	r1, [r3, #0]
 80030f8:	2300      	movs	r3, #0
 80030fa:	4615      	mov	r5, r2
 80030fc:	6123      	str	r3, [r4, #16]
 80030fe:	e7ba      	b.n	8003076 <_printf_i+0x152>
 8003100:	682b      	ldr	r3, [r5, #0]
 8003102:	2100      	movs	r1, #0
 8003104:	1d1a      	adds	r2, r3, #4
 8003106:	602a      	str	r2, [r5, #0]
 8003108:	681d      	ldr	r5, [r3, #0]
 800310a:	6862      	ldr	r2, [r4, #4]
 800310c:	4628      	mov	r0, r5
 800310e:	f000 f82f 	bl	8003170 <memchr>
 8003112:	b108      	cbz	r0, 8003118 <_printf_i+0x1f4>
 8003114:	1b40      	subs	r0, r0, r5
 8003116:	6060      	str	r0, [r4, #4]
 8003118:	6863      	ldr	r3, [r4, #4]
 800311a:	6123      	str	r3, [r4, #16]
 800311c:	2300      	movs	r3, #0
 800311e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003122:	e7a8      	b.n	8003076 <_printf_i+0x152>
 8003124:	462a      	mov	r2, r5
 8003126:	4649      	mov	r1, r9
 8003128:	4640      	mov	r0, r8
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	47d0      	blx	sl
 800312e:	3001      	adds	r0, #1
 8003130:	d0ab      	beq.n	800308a <_printf_i+0x166>
 8003132:	6823      	ldr	r3, [r4, #0]
 8003134:	079b      	lsls	r3, r3, #30
 8003136:	d413      	bmi.n	8003160 <_printf_i+0x23c>
 8003138:	68e0      	ldr	r0, [r4, #12]
 800313a:	9b03      	ldr	r3, [sp, #12]
 800313c:	4298      	cmp	r0, r3
 800313e:	bfb8      	it	lt
 8003140:	4618      	movlt	r0, r3
 8003142:	e7a4      	b.n	800308e <_printf_i+0x16a>
 8003144:	2301      	movs	r3, #1
 8003146:	4632      	mov	r2, r6
 8003148:	4649      	mov	r1, r9
 800314a:	4640      	mov	r0, r8
 800314c:	47d0      	blx	sl
 800314e:	3001      	adds	r0, #1
 8003150:	d09b      	beq.n	800308a <_printf_i+0x166>
 8003152:	3501      	adds	r5, #1
 8003154:	68e3      	ldr	r3, [r4, #12]
 8003156:	9903      	ldr	r1, [sp, #12]
 8003158:	1a5b      	subs	r3, r3, r1
 800315a:	42ab      	cmp	r3, r5
 800315c:	dcf2      	bgt.n	8003144 <_printf_i+0x220>
 800315e:	e7eb      	b.n	8003138 <_printf_i+0x214>
 8003160:	2500      	movs	r5, #0
 8003162:	f104 0619 	add.w	r6, r4, #25
 8003166:	e7f5      	b.n	8003154 <_printf_i+0x230>
 8003168:	0802927d 	.word	0x0802927d
 800316c:	0802928e 	.word	0x0802928e

08003170 <memchr>:
 8003170:	4603      	mov	r3, r0
 8003172:	b510      	push	{r4, lr}
 8003174:	b2c9      	uxtb	r1, r1
 8003176:	4402      	add	r2, r0
 8003178:	4293      	cmp	r3, r2
 800317a:	4618      	mov	r0, r3
 800317c:	d101      	bne.n	8003182 <memchr+0x12>
 800317e:	2000      	movs	r0, #0
 8003180:	e003      	b.n	800318a <memchr+0x1a>
 8003182:	7804      	ldrb	r4, [r0, #0]
 8003184:	3301      	adds	r3, #1
 8003186:	428c      	cmp	r4, r1
 8003188:	d1f6      	bne.n	8003178 <memchr+0x8>
 800318a:	bd10      	pop	{r4, pc}

0800318c <memcpy>:
 800318c:	440a      	add	r2, r1
 800318e:	4291      	cmp	r1, r2
 8003190:	f100 33ff 	add.w	r3, r0, #4294967295
 8003194:	d100      	bne.n	8003198 <memcpy+0xc>
 8003196:	4770      	bx	lr
 8003198:	b510      	push	{r4, lr}
 800319a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800319e:	4291      	cmp	r1, r2
 80031a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80031a4:	d1f9      	bne.n	800319a <memcpy+0xe>
 80031a6:	bd10      	pop	{r4, pc}

080031a8 <memmove>:
 80031a8:	4288      	cmp	r0, r1
 80031aa:	b510      	push	{r4, lr}
 80031ac:	eb01 0402 	add.w	r4, r1, r2
 80031b0:	d902      	bls.n	80031b8 <memmove+0x10>
 80031b2:	4284      	cmp	r4, r0
 80031b4:	4623      	mov	r3, r4
 80031b6:	d807      	bhi.n	80031c8 <memmove+0x20>
 80031b8:	1e43      	subs	r3, r0, #1
 80031ba:	42a1      	cmp	r1, r4
 80031bc:	d008      	beq.n	80031d0 <memmove+0x28>
 80031be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80031c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80031c6:	e7f8      	b.n	80031ba <memmove+0x12>
 80031c8:	4601      	mov	r1, r0
 80031ca:	4402      	add	r2, r0
 80031cc:	428a      	cmp	r2, r1
 80031ce:	d100      	bne.n	80031d2 <memmove+0x2a>
 80031d0:	bd10      	pop	{r4, pc}
 80031d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80031d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80031da:	e7f7      	b.n	80031cc <memmove+0x24>

080031dc <_free_r>:
 80031dc:	b538      	push	{r3, r4, r5, lr}
 80031de:	4605      	mov	r5, r0
 80031e0:	2900      	cmp	r1, #0
 80031e2:	d040      	beq.n	8003266 <_free_r+0x8a>
 80031e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031e8:	1f0c      	subs	r4, r1, #4
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	bfb8      	it	lt
 80031ee:	18e4      	addlt	r4, r4, r3
 80031f0:	f000 f910 	bl	8003414 <__malloc_lock>
 80031f4:	4a1c      	ldr	r2, [pc, #112]	; (8003268 <_free_r+0x8c>)
 80031f6:	6813      	ldr	r3, [r2, #0]
 80031f8:	b933      	cbnz	r3, 8003208 <_free_r+0x2c>
 80031fa:	6063      	str	r3, [r4, #4]
 80031fc:	6014      	str	r4, [r2, #0]
 80031fe:	4628      	mov	r0, r5
 8003200:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003204:	f000 b90c 	b.w	8003420 <__malloc_unlock>
 8003208:	42a3      	cmp	r3, r4
 800320a:	d908      	bls.n	800321e <_free_r+0x42>
 800320c:	6820      	ldr	r0, [r4, #0]
 800320e:	1821      	adds	r1, r4, r0
 8003210:	428b      	cmp	r3, r1
 8003212:	bf01      	itttt	eq
 8003214:	6819      	ldreq	r1, [r3, #0]
 8003216:	685b      	ldreq	r3, [r3, #4]
 8003218:	1809      	addeq	r1, r1, r0
 800321a:	6021      	streq	r1, [r4, #0]
 800321c:	e7ed      	b.n	80031fa <_free_r+0x1e>
 800321e:	461a      	mov	r2, r3
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	b10b      	cbz	r3, 8003228 <_free_r+0x4c>
 8003224:	42a3      	cmp	r3, r4
 8003226:	d9fa      	bls.n	800321e <_free_r+0x42>
 8003228:	6811      	ldr	r1, [r2, #0]
 800322a:	1850      	adds	r0, r2, r1
 800322c:	42a0      	cmp	r0, r4
 800322e:	d10b      	bne.n	8003248 <_free_r+0x6c>
 8003230:	6820      	ldr	r0, [r4, #0]
 8003232:	4401      	add	r1, r0
 8003234:	1850      	adds	r0, r2, r1
 8003236:	4283      	cmp	r3, r0
 8003238:	6011      	str	r1, [r2, #0]
 800323a:	d1e0      	bne.n	80031fe <_free_r+0x22>
 800323c:	6818      	ldr	r0, [r3, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	4401      	add	r1, r0
 8003242:	6011      	str	r1, [r2, #0]
 8003244:	6053      	str	r3, [r2, #4]
 8003246:	e7da      	b.n	80031fe <_free_r+0x22>
 8003248:	d902      	bls.n	8003250 <_free_r+0x74>
 800324a:	230c      	movs	r3, #12
 800324c:	602b      	str	r3, [r5, #0]
 800324e:	e7d6      	b.n	80031fe <_free_r+0x22>
 8003250:	6820      	ldr	r0, [r4, #0]
 8003252:	1821      	adds	r1, r4, r0
 8003254:	428b      	cmp	r3, r1
 8003256:	bf01      	itttt	eq
 8003258:	6819      	ldreq	r1, [r3, #0]
 800325a:	685b      	ldreq	r3, [r3, #4]
 800325c:	1809      	addeq	r1, r1, r0
 800325e:	6021      	streq	r1, [r4, #0]
 8003260:	6063      	str	r3, [r4, #4]
 8003262:	6054      	str	r4, [r2, #4]
 8003264:	e7cb      	b.n	80031fe <_free_r+0x22>
 8003266:	bd38      	pop	{r3, r4, r5, pc}
 8003268:	20000140 	.word	0x20000140

0800326c <sbrk_aligned>:
 800326c:	b570      	push	{r4, r5, r6, lr}
 800326e:	4e0e      	ldr	r6, [pc, #56]	; (80032a8 <sbrk_aligned+0x3c>)
 8003270:	460c      	mov	r4, r1
 8003272:	6831      	ldr	r1, [r6, #0]
 8003274:	4605      	mov	r5, r0
 8003276:	b911      	cbnz	r1, 800327e <sbrk_aligned+0x12>
 8003278:	f000 f8bc 	bl	80033f4 <_sbrk_r>
 800327c:	6030      	str	r0, [r6, #0]
 800327e:	4621      	mov	r1, r4
 8003280:	4628      	mov	r0, r5
 8003282:	f000 f8b7 	bl	80033f4 <_sbrk_r>
 8003286:	1c43      	adds	r3, r0, #1
 8003288:	d00a      	beq.n	80032a0 <sbrk_aligned+0x34>
 800328a:	1cc4      	adds	r4, r0, #3
 800328c:	f024 0403 	bic.w	r4, r4, #3
 8003290:	42a0      	cmp	r0, r4
 8003292:	d007      	beq.n	80032a4 <sbrk_aligned+0x38>
 8003294:	1a21      	subs	r1, r4, r0
 8003296:	4628      	mov	r0, r5
 8003298:	f000 f8ac 	bl	80033f4 <_sbrk_r>
 800329c:	3001      	adds	r0, #1
 800329e:	d101      	bne.n	80032a4 <sbrk_aligned+0x38>
 80032a0:	f04f 34ff 	mov.w	r4, #4294967295
 80032a4:	4620      	mov	r0, r4
 80032a6:	bd70      	pop	{r4, r5, r6, pc}
 80032a8:	20000144 	.word	0x20000144

080032ac <_malloc_r>:
 80032ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032b0:	1ccd      	adds	r5, r1, #3
 80032b2:	f025 0503 	bic.w	r5, r5, #3
 80032b6:	3508      	adds	r5, #8
 80032b8:	2d0c      	cmp	r5, #12
 80032ba:	bf38      	it	cc
 80032bc:	250c      	movcc	r5, #12
 80032be:	2d00      	cmp	r5, #0
 80032c0:	4607      	mov	r7, r0
 80032c2:	db01      	blt.n	80032c8 <_malloc_r+0x1c>
 80032c4:	42a9      	cmp	r1, r5
 80032c6:	d905      	bls.n	80032d4 <_malloc_r+0x28>
 80032c8:	230c      	movs	r3, #12
 80032ca:	2600      	movs	r6, #0
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	4630      	mov	r0, r6
 80032d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032d4:	4e2e      	ldr	r6, [pc, #184]	; (8003390 <_malloc_r+0xe4>)
 80032d6:	f000 f89d 	bl	8003414 <__malloc_lock>
 80032da:	6833      	ldr	r3, [r6, #0]
 80032dc:	461c      	mov	r4, r3
 80032de:	bb34      	cbnz	r4, 800332e <_malloc_r+0x82>
 80032e0:	4629      	mov	r1, r5
 80032e2:	4638      	mov	r0, r7
 80032e4:	f7ff ffc2 	bl	800326c <sbrk_aligned>
 80032e8:	1c43      	adds	r3, r0, #1
 80032ea:	4604      	mov	r4, r0
 80032ec:	d14d      	bne.n	800338a <_malloc_r+0xde>
 80032ee:	6834      	ldr	r4, [r6, #0]
 80032f0:	4626      	mov	r6, r4
 80032f2:	2e00      	cmp	r6, #0
 80032f4:	d140      	bne.n	8003378 <_malloc_r+0xcc>
 80032f6:	6823      	ldr	r3, [r4, #0]
 80032f8:	4631      	mov	r1, r6
 80032fa:	4638      	mov	r0, r7
 80032fc:	eb04 0803 	add.w	r8, r4, r3
 8003300:	f000 f878 	bl	80033f4 <_sbrk_r>
 8003304:	4580      	cmp	r8, r0
 8003306:	d13a      	bne.n	800337e <_malloc_r+0xd2>
 8003308:	6821      	ldr	r1, [r4, #0]
 800330a:	3503      	adds	r5, #3
 800330c:	1a6d      	subs	r5, r5, r1
 800330e:	f025 0503 	bic.w	r5, r5, #3
 8003312:	3508      	adds	r5, #8
 8003314:	2d0c      	cmp	r5, #12
 8003316:	bf38      	it	cc
 8003318:	250c      	movcc	r5, #12
 800331a:	4638      	mov	r0, r7
 800331c:	4629      	mov	r1, r5
 800331e:	f7ff ffa5 	bl	800326c <sbrk_aligned>
 8003322:	3001      	adds	r0, #1
 8003324:	d02b      	beq.n	800337e <_malloc_r+0xd2>
 8003326:	6823      	ldr	r3, [r4, #0]
 8003328:	442b      	add	r3, r5
 800332a:	6023      	str	r3, [r4, #0]
 800332c:	e00e      	b.n	800334c <_malloc_r+0xa0>
 800332e:	6822      	ldr	r2, [r4, #0]
 8003330:	1b52      	subs	r2, r2, r5
 8003332:	d41e      	bmi.n	8003372 <_malloc_r+0xc6>
 8003334:	2a0b      	cmp	r2, #11
 8003336:	d916      	bls.n	8003366 <_malloc_r+0xba>
 8003338:	1961      	adds	r1, r4, r5
 800333a:	42a3      	cmp	r3, r4
 800333c:	6025      	str	r5, [r4, #0]
 800333e:	bf18      	it	ne
 8003340:	6059      	strne	r1, [r3, #4]
 8003342:	6863      	ldr	r3, [r4, #4]
 8003344:	bf08      	it	eq
 8003346:	6031      	streq	r1, [r6, #0]
 8003348:	5162      	str	r2, [r4, r5]
 800334a:	604b      	str	r3, [r1, #4]
 800334c:	4638      	mov	r0, r7
 800334e:	f104 060b 	add.w	r6, r4, #11
 8003352:	f000 f865 	bl	8003420 <__malloc_unlock>
 8003356:	f026 0607 	bic.w	r6, r6, #7
 800335a:	1d23      	adds	r3, r4, #4
 800335c:	1af2      	subs	r2, r6, r3
 800335e:	d0b6      	beq.n	80032ce <_malloc_r+0x22>
 8003360:	1b9b      	subs	r3, r3, r6
 8003362:	50a3      	str	r3, [r4, r2]
 8003364:	e7b3      	b.n	80032ce <_malloc_r+0x22>
 8003366:	6862      	ldr	r2, [r4, #4]
 8003368:	42a3      	cmp	r3, r4
 800336a:	bf0c      	ite	eq
 800336c:	6032      	streq	r2, [r6, #0]
 800336e:	605a      	strne	r2, [r3, #4]
 8003370:	e7ec      	b.n	800334c <_malloc_r+0xa0>
 8003372:	4623      	mov	r3, r4
 8003374:	6864      	ldr	r4, [r4, #4]
 8003376:	e7b2      	b.n	80032de <_malloc_r+0x32>
 8003378:	4634      	mov	r4, r6
 800337a:	6876      	ldr	r6, [r6, #4]
 800337c:	e7b9      	b.n	80032f2 <_malloc_r+0x46>
 800337e:	230c      	movs	r3, #12
 8003380:	4638      	mov	r0, r7
 8003382:	603b      	str	r3, [r7, #0]
 8003384:	f000 f84c 	bl	8003420 <__malloc_unlock>
 8003388:	e7a1      	b.n	80032ce <_malloc_r+0x22>
 800338a:	6025      	str	r5, [r4, #0]
 800338c:	e7de      	b.n	800334c <_malloc_r+0xa0>
 800338e:	bf00      	nop
 8003390:	20000140 	.word	0x20000140

08003394 <_realloc_r>:
 8003394:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003398:	4680      	mov	r8, r0
 800339a:	4614      	mov	r4, r2
 800339c:	460e      	mov	r6, r1
 800339e:	b921      	cbnz	r1, 80033aa <_realloc_r+0x16>
 80033a0:	4611      	mov	r1, r2
 80033a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80033a6:	f7ff bf81 	b.w	80032ac <_malloc_r>
 80033aa:	b92a      	cbnz	r2, 80033b8 <_realloc_r+0x24>
 80033ac:	f7ff ff16 	bl	80031dc <_free_r>
 80033b0:	4625      	mov	r5, r4
 80033b2:	4628      	mov	r0, r5
 80033b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033b8:	f000 f838 	bl	800342c <_malloc_usable_size_r>
 80033bc:	4284      	cmp	r4, r0
 80033be:	4607      	mov	r7, r0
 80033c0:	d802      	bhi.n	80033c8 <_realloc_r+0x34>
 80033c2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80033c6:	d812      	bhi.n	80033ee <_realloc_r+0x5a>
 80033c8:	4621      	mov	r1, r4
 80033ca:	4640      	mov	r0, r8
 80033cc:	f7ff ff6e 	bl	80032ac <_malloc_r>
 80033d0:	4605      	mov	r5, r0
 80033d2:	2800      	cmp	r0, #0
 80033d4:	d0ed      	beq.n	80033b2 <_realloc_r+0x1e>
 80033d6:	42bc      	cmp	r4, r7
 80033d8:	4622      	mov	r2, r4
 80033da:	4631      	mov	r1, r6
 80033dc:	bf28      	it	cs
 80033de:	463a      	movcs	r2, r7
 80033e0:	f7ff fed4 	bl	800318c <memcpy>
 80033e4:	4631      	mov	r1, r6
 80033e6:	4640      	mov	r0, r8
 80033e8:	f7ff fef8 	bl	80031dc <_free_r>
 80033ec:	e7e1      	b.n	80033b2 <_realloc_r+0x1e>
 80033ee:	4635      	mov	r5, r6
 80033f0:	e7df      	b.n	80033b2 <_realloc_r+0x1e>
	...

080033f4 <_sbrk_r>:
 80033f4:	b538      	push	{r3, r4, r5, lr}
 80033f6:	2300      	movs	r3, #0
 80033f8:	4d05      	ldr	r5, [pc, #20]	; (8003410 <_sbrk_r+0x1c>)
 80033fa:	4604      	mov	r4, r0
 80033fc:	4608      	mov	r0, r1
 80033fe:	602b      	str	r3, [r5, #0]
 8003400:	f7fd ff4e 	bl	80012a0 <_sbrk>
 8003404:	1c43      	adds	r3, r0, #1
 8003406:	d102      	bne.n	800340e <_sbrk_r+0x1a>
 8003408:	682b      	ldr	r3, [r5, #0]
 800340a:	b103      	cbz	r3, 800340e <_sbrk_r+0x1a>
 800340c:	6023      	str	r3, [r4, #0]
 800340e:	bd38      	pop	{r3, r4, r5, pc}
 8003410:	20000148 	.word	0x20000148

08003414 <__malloc_lock>:
 8003414:	4801      	ldr	r0, [pc, #4]	; (800341c <__malloc_lock+0x8>)
 8003416:	f000 b811 	b.w	800343c <__retarget_lock_acquire_recursive>
 800341a:	bf00      	nop
 800341c:	2000014c 	.word	0x2000014c

08003420 <__malloc_unlock>:
 8003420:	4801      	ldr	r0, [pc, #4]	; (8003428 <__malloc_unlock+0x8>)
 8003422:	f000 b80c 	b.w	800343e <__retarget_lock_release_recursive>
 8003426:	bf00      	nop
 8003428:	2000014c 	.word	0x2000014c

0800342c <_malloc_usable_size_r>:
 800342c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003430:	1f18      	subs	r0, r3, #4
 8003432:	2b00      	cmp	r3, #0
 8003434:	bfbc      	itt	lt
 8003436:	580b      	ldrlt	r3, [r1, r0]
 8003438:	18c0      	addlt	r0, r0, r3
 800343a:	4770      	bx	lr

0800343c <__retarget_lock_acquire_recursive>:
 800343c:	4770      	bx	lr

0800343e <__retarget_lock_release_recursive>:
 800343e:	4770      	bx	lr

08003440 <_init>:
 8003440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003442:	bf00      	nop
 8003444:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003446:	bc08      	pop	{r3}
 8003448:	469e      	mov	lr, r3
 800344a:	4770      	bx	lr

0800344c <_fini>:
 800344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800344e:	bf00      	nop
 8003450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003452:	bc08      	pop	{r3}
 8003454:	469e      	mov	lr, r3
 8003456:	4770      	bx	lr
