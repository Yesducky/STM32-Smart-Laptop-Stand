
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000647c  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0003d530  08006664  08006664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043b94  08043b94  0006018c  2**0
                  CONTENTS
  4 .ARM          00000000  08043b94  08043b94  0006018c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08043b94  08043b94  0006018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08043b94  08043b94  00053b94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08043b98  08043b98  00053b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  08043b9c  00060000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  2000018c  08043d28  0006018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  08043d28  0006034c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0006018c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d764  00000000  00000000  000601b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000245d  00000000  00000000  0006d919  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f60  00000000  00000000  0006fd78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e68  00000000  00000000  00070cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b779  00000000  00000000  00071b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a46  00000000  00000000  0008d2b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d4c2  00000000  00000000  0009ecff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013c1c1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048b8  00000000  00000000  0013c214  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000018c 	.word	0x2000018c
 8000204:	00000000 	.word	0x00000000
 8000208:	0800664c 	.word	0x0800664c

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000190 	.word	0x20000190
 8000224:	0800664c 	.word	0x0800664c

08000228 <strlen>:
 8000228:	4603      	mov	r3, r0
 800022a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022e:	2a00      	cmp	r2, #0
 8000230:	d1fb      	bne.n	800022a <strlen+0x2>
 8000232:	1a18      	subs	r0, r3, r0
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr

08000238 <__aeabi_drsub>:
 8000238:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800023c:	e002      	b.n	8000244 <__adddf3>
 800023e:	bf00      	nop

08000240 <__aeabi_dsub>:
 8000240:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000244 <__adddf3>:
 8000244:	b530      	push	{r4, r5, lr}
 8000246:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800024a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800024e:	ea94 0f05 	teq	r4, r5
 8000252:	bf08      	it	eq
 8000254:	ea90 0f02 	teqeq	r0, r2
 8000258:	bf1f      	itttt	ne
 800025a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800025e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000262:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000266:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800026a:	f000 80e2 	beq.w	8000432 <__adddf3+0x1ee>
 800026e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000272:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000276:	bfb8      	it	lt
 8000278:	426d      	neglt	r5, r5
 800027a:	dd0c      	ble.n	8000296 <__adddf3+0x52>
 800027c:	442c      	add	r4, r5
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	ea82 0000 	eor.w	r0, r2, r0
 800028a:	ea83 0101 	eor.w	r1, r3, r1
 800028e:	ea80 0202 	eor.w	r2, r0, r2
 8000292:	ea81 0303 	eor.w	r3, r1, r3
 8000296:	2d36      	cmp	r5, #54	; 0x36
 8000298:	bf88      	it	hi
 800029a:	bd30      	pophi	{r4, r5, pc}
 800029c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002ac:	d002      	beq.n	80002b4 <__adddf3+0x70>
 80002ae:	4240      	negs	r0, r0
 80002b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c0:	d002      	beq.n	80002c8 <__adddf3+0x84>
 80002c2:	4252      	negs	r2, r2
 80002c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002c8:	ea94 0f05 	teq	r4, r5
 80002cc:	f000 80a7 	beq.w	800041e <__adddf3+0x1da>
 80002d0:	f1a4 0401 	sub.w	r4, r4, #1
 80002d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002d8:	db0d      	blt.n	80002f6 <__adddf3+0xb2>
 80002da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002de:	fa22 f205 	lsr.w	r2, r2, r5
 80002e2:	1880      	adds	r0, r0, r2
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002ec:	1880      	adds	r0, r0, r2
 80002ee:	fa43 f305 	asr.w	r3, r3, r5
 80002f2:	4159      	adcs	r1, r3
 80002f4:	e00e      	b.n	8000314 <__adddf3+0xd0>
 80002f6:	f1a5 0520 	sub.w	r5, r5, #32
 80002fa:	f10e 0e20 	add.w	lr, lr, #32
 80002fe:	2a01      	cmp	r2, #1
 8000300:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000304:	bf28      	it	cs
 8000306:	f04c 0c02 	orrcs.w	ip, ip, #2
 800030a:	fa43 f305 	asr.w	r3, r3, r5
 800030e:	18c0      	adds	r0, r0, r3
 8000310:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000318:	d507      	bpl.n	800032a <__adddf3+0xe6>
 800031a:	f04f 0e00 	mov.w	lr, #0
 800031e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000322:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000326:	eb6e 0101 	sbc.w	r1, lr, r1
 800032a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800032e:	d31b      	bcc.n	8000368 <__adddf3+0x124>
 8000330:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000334:	d30c      	bcc.n	8000350 <__adddf3+0x10c>
 8000336:	0849      	lsrs	r1, r1, #1
 8000338:	ea5f 0030 	movs.w	r0, r0, rrx
 800033c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000340:	f104 0401 	add.w	r4, r4, #1
 8000344:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000348:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800034c:	f080 809a 	bcs.w	8000484 <__adddf3+0x240>
 8000350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	ea41 0105 	orr.w	r1, r1, r5
 8000366:	bd30      	pop	{r4, r5, pc}
 8000368:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800036c:	4140      	adcs	r0, r0
 800036e:	eb41 0101 	adc.w	r1, r1, r1
 8000372:	3c01      	subs	r4, #1
 8000374:	bf28      	it	cs
 8000376:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800037a:	d2e9      	bcs.n	8000350 <__adddf3+0x10c>
 800037c:	f091 0f00 	teq	r1, #0
 8000380:	bf04      	itt	eq
 8000382:	4601      	moveq	r1, r0
 8000384:	2000      	moveq	r0, #0
 8000386:	fab1 f381 	clz	r3, r1
 800038a:	bf08      	it	eq
 800038c:	3320      	addeq	r3, #32
 800038e:	f1a3 030b 	sub.w	r3, r3, #11
 8000392:	f1b3 0220 	subs.w	r2, r3, #32
 8000396:	da0c      	bge.n	80003b2 <__adddf3+0x16e>
 8000398:	320c      	adds	r2, #12
 800039a:	dd08      	ble.n	80003ae <__adddf3+0x16a>
 800039c:	f102 0c14 	add.w	ip, r2, #20
 80003a0:	f1c2 020c 	rsb	r2, r2, #12
 80003a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80003a8:	fa21 f102 	lsr.w	r1, r1, r2
 80003ac:	e00c      	b.n	80003c8 <__adddf3+0x184>
 80003ae:	f102 0214 	add.w	r2, r2, #20
 80003b2:	bfd8      	it	le
 80003b4:	f1c2 0c20 	rsble	ip, r2, #32
 80003b8:	fa01 f102 	lsl.w	r1, r1, r2
 80003bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c0:	bfdc      	itt	le
 80003c2:	ea41 010c 	orrle.w	r1, r1, ip
 80003c6:	4090      	lslle	r0, r2
 80003c8:	1ae4      	subs	r4, r4, r3
 80003ca:	bfa2      	ittt	ge
 80003cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d0:	4329      	orrge	r1, r5
 80003d2:	bd30      	popge	{r4, r5, pc}
 80003d4:	ea6f 0404 	mvn.w	r4, r4
 80003d8:	3c1f      	subs	r4, #31
 80003da:	da1c      	bge.n	8000416 <__adddf3+0x1d2>
 80003dc:	340c      	adds	r4, #12
 80003de:	dc0e      	bgt.n	80003fe <__adddf3+0x1ba>
 80003e0:	f104 0414 	add.w	r4, r4, #20
 80003e4:	f1c4 0220 	rsb	r2, r4, #32
 80003e8:	fa20 f004 	lsr.w	r0, r0, r4
 80003ec:	fa01 f302 	lsl.w	r3, r1, r2
 80003f0:	ea40 0003 	orr.w	r0, r0, r3
 80003f4:	fa21 f304 	lsr.w	r3, r1, r4
 80003f8:	ea45 0103 	orr.w	r1, r5, r3
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f1c4 040c 	rsb	r4, r4, #12
 8000402:	f1c4 0220 	rsb	r2, r4, #32
 8000406:	fa20 f002 	lsr.w	r0, r0, r2
 800040a:	fa01 f304 	lsl.w	r3, r1, r4
 800040e:	ea40 0003 	orr.w	r0, r0, r3
 8000412:	4629      	mov	r1, r5
 8000414:	bd30      	pop	{r4, r5, pc}
 8000416:	fa21 f004 	lsr.w	r0, r1, r4
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	f094 0f00 	teq	r4, #0
 8000422:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000426:	bf06      	itte	eq
 8000428:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800042c:	3401      	addeq	r4, #1
 800042e:	3d01      	subne	r5, #1
 8000430:	e74e      	b.n	80002d0 <__adddf3+0x8c>
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf18      	it	ne
 8000438:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800043c:	d029      	beq.n	8000492 <__adddf3+0x24e>
 800043e:	ea94 0f05 	teq	r4, r5
 8000442:	bf08      	it	eq
 8000444:	ea90 0f02 	teqeq	r0, r2
 8000448:	d005      	beq.n	8000456 <__adddf3+0x212>
 800044a:	ea54 0c00 	orrs.w	ip, r4, r0
 800044e:	bf04      	itt	eq
 8000450:	4619      	moveq	r1, r3
 8000452:	4610      	moveq	r0, r2
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea91 0f03 	teq	r1, r3
 800045a:	bf1e      	ittt	ne
 800045c:	2100      	movne	r1, #0
 800045e:	2000      	movne	r0, #0
 8000460:	bd30      	popne	{r4, r5, pc}
 8000462:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000466:	d105      	bne.n	8000474 <__adddf3+0x230>
 8000468:	0040      	lsls	r0, r0, #1
 800046a:	4149      	adcs	r1, r1
 800046c:	bf28      	it	cs
 800046e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000472:	bd30      	pop	{r4, r5, pc}
 8000474:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000478:	bf3c      	itt	cc
 800047a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800047e:	bd30      	popcc	{r4, r5, pc}
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000484:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000488:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800048c:	f04f 0000 	mov.w	r0, #0
 8000490:	bd30      	pop	{r4, r5, pc}
 8000492:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000496:	bf1a      	itte	ne
 8000498:	4619      	movne	r1, r3
 800049a:	4610      	movne	r0, r2
 800049c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a0:	bf1c      	itt	ne
 80004a2:	460b      	movne	r3, r1
 80004a4:	4602      	movne	r2, r0
 80004a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004aa:	bf06      	itte	eq
 80004ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b0:	ea91 0f03 	teqeq	r1, r3
 80004b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004b8:	bd30      	pop	{r4, r5, pc}
 80004ba:	bf00      	nop

080004bc <__aeabi_ui2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d0:	f04f 0500 	mov.w	r5, #0
 80004d4:	f04f 0100 	mov.w	r1, #0
 80004d8:	e750      	b.n	800037c <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_i2d>:
 80004dc:	f090 0f00 	teq	r0, #0
 80004e0:	bf04      	itt	eq
 80004e2:	2100      	moveq	r1, #0
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004f4:	bf48      	it	mi
 80004f6:	4240      	negmi	r0, r0
 80004f8:	f04f 0100 	mov.w	r1, #0
 80004fc:	e73e      	b.n	800037c <__adddf3+0x138>
 80004fe:	bf00      	nop

08000500 <__aeabi_f2d>:
 8000500:	0042      	lsls	r2, r0, #1
 8000502:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000506:	ea4f 0131 	mov.w	r1, r1, rrx
 800050a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800050e:	bf1f      	itttt	ne
 8000510:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000514:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000518:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800051c:	4770      	bxne	lr
 800051e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000522:	bf08      	it	eq
 8000524:	4770      	bxeq	lr
 8000526:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800052a:	bf04      	itt	eq
 800052c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000530:	4770      	bxeq	lr
 8000532:	b530      	push	{r4, r5, lr}
 8000534:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000540:	e71c      	b.n	800037c <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_ul2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	e00a      	b.n	800056a <__aeabi_l2d+0x16>

08000554 <__aeabi_l2d>:
 8000554:	ea50 0201 	orrs.w	r2, r0, r1
 8000558:	bf08      	it	eq
 800055a:	4770      	bxeq	lr
 800055c:	b530      	push	{r4, r5, lr}
 800055e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000562:	d502      	bpl.n	800056a <__aeabi_l2d+0x16>
 8000564:	4240      	negs	r0, r0
 8000566:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800056a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000572:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000576:	f43f aed8 	beq.w	800032a <__adddf3+0xe6>
 800057a:	f04f 0203 	mov.w	r2, #3
 800057e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000582:	bf18      	it	ne
 8000584:	3203      	addne	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000592:	f1c2 0320 	rsb	r3, r2, #32
 8000596:	fa00 fc03 	lsl.w	ip, r0, r3
 800059a:	fa20 f002 	lsr.w	r0, r0, r2
 800059e:	fa01 fe03 	lsl.w	lr, r1, r3
 80005a2:	ea40 000e 	orr.w	r0, r0, lr
 80005a6:	fa21 f102 	lsr.w	r1, r1, r2
 80005aa:	4414      	add	r4, r2
 80005ac:	e6bd      	b.n	800032a <__adddf3+0xe6>
 80005ae:	bf00      	nop

080005b0 <__aeabi_dmul>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005be:	bf1d      	ittte	ne
 80005c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005c4:	ea94 0f0c 	teqne	r4, ip
 80005c8:	ea95 0f0c 	teqne	r5, ip
 80005cc:	f000 f8de 	bleq	800078c <__aeabi_dmul+0x1dc>
 80005d0:	442c      	add	r4, r5
 80005d2:	ea81 0603 	eor.w	r6, r1, r3
 80005d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005e2:	bf18      	it	ne
 80005e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005f0:	d038      	beq.n	8000664 <__aeabi_dmul+0xb4>
 80005f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000602:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000606:	f04f 0600 	mov.w	r6, #0
 800060a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800060e:	f09c 0f00 	teq	ip, #0
 8000612:	bf18      	it	ne
 8000614:	f04e 0e01 	orrne.w	lr, lr, #1
 8000618:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800061c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000620:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000624:	d204      	bcs.n	8000630 <__aeabi_dmul+0x80>
 8000626:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800062a:	416d      	adcs	r5, r5
 800062c:	eb46 0606 	adc.w	r6, r6, r6
 8000630:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000634:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000638:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800063c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000640:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000644:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000648:	bf88      	it	hi
 800064a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800064e:	d81e      	bhi.n	800068e <__aeabi_dmul+0xde>
 8000650:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000654:	bf08      	it	eq
 8000656:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800065a:	f150 0000 	adcs.w	r0, r0, #0
 800065e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000668:	ea46 0101 	orr.w	r1, r6, r1
 800066c:	ea40 0002 	orr.w	r0, r0, r2
 8000670:	ea81 0103 	eor.w	r1, r1, r3
 8000674:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000678:	bfc2      	ittt	gt
 800067a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800067e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000682:	bd70      	popgt	{r4, r5, r6, pc}
 8000684:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000688:	f04f 0e00 	mov.w	lr, #0
 800068c:	3c01      	subs	r4, #1
 800068e:	f300 80ab 	bgt.w	80007e8 <__aeabi_dmul+0x238>
 8000692:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000696:	bfde      	ittt	le
 8000698:	2000      	movle	r0, #0
 800069a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800069e:	bd70      	pople	{r4, r5, r6, pc}
 80006a0:	f1c4 0400 	rsb	r4, r4, #0
 80006a4:	3c20      	subs	r4, #32
 80006a6:	da35      	bge.n	8000714 <__aeabi_dmul+0x164>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc1b      	bgt.n	80006e4 <__aeabi_dmul+0x134>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0520 	rsb	r5, r4, #32
 80006b4:	fa00 f305 	lsl.w	r3, r0, r5
 80006b8:	fa20 f004 	lsr.w	r0, r0, r4
 80006bc:	fa01 f205 	lsl.w	r2, r1, r5
 80006c0:	ea40 0002 	orr.w	r0, r0, r2
 80006c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	fa21 f604 	lsr.w	r6, r1, r4
 80006d4:	eb42 0106 	adc.w	r1, r2, r6
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 040c 	rsb	r4, r4, #12
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f304 	lsl.w	r3, r0, r4
 80006f0:	fa20 f005 	lsr.w	r0, r0, r5
 80006f4:	fa01 f204 	lsl.w	r2, r1, r4
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000704:	f141 0100 	adc.w	r1, r1, #0
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 0520 	rsb	r5, r4, #32
 8000718:	fa00 f205 	lsl.w	r2, r0, r5
 800071c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000720:	fa20 f304 	lsr.w	r3, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea43 0302 	orr.w	r3, r3, r2
 800072c:	fa21 f004 	lsr.w	r0, r1, r4
 8000730:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000734:	fa21 f204 	lsr.w	r2, r1, r4
 8000738:	ea20 0002 	bic.w	r0, r0, r2
 800073c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f094 0f00 	teq	r4, #0
 8000750:	d10f      	bne.n	8000772 <__aeabi_dmul+0x1c2>
 8000752:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000756:	0040      	lsls	r0, r0, #1
 8000758:	eb41 0101 	adc.w	r1, r1, r1
 800075c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000760:	bf08      	it	eq
 8000762:	3c01      	subeq	r4, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1a6>
 8000766:	ea41 0106 	orr.w	r1, r1, r6
 800076a:	f095 0f00 	teq	r5, #0
 800076e:	bf18      	it	ne
 8000770:	4770      	bxne	lr
 8000772:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000776:	0052      	lsls	r2, r2, #1
 8000778:	eb43 0303 	adc.w	r3, r3, r3
 800077c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000780:	bf08      	it	eq
 8000782:	3d01      	subeq	r5, #1
 8000784:	d0f7      	beq.n	8000776 <__aeabi_dmul+0x1c6>
 8000786:	ea43 0306 	orr.w	r3, r3, r6
 800078a:	4770      	bx	lr
 800078c:	ea94 0f0c 	teq	r4, ip
 8000790:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000794:	bf18      	it	ne
 8000796:	ea95 0f0c 	teqne	r5, ip
 800079a:	d00c      	beq.n	80007b6 <__aeabi_dmul+0x206>
 800079c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a0:	bf18      	it	ne
 80007a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a6:	d1d1      	bne.n	800074c <__aeabi_dmul+0x19c>
 80007a8:	ea81 0103 	eor.w	r1, r1, r3
 80007ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b0:	f04f 0000 	mov.w	r0, #0
 80007b4:	bd70      	pop	{r4, r5, r6, pc}
 80007b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ba:	bf06      	itte	eq
 80007bc:	4610      	moveq	r0, r2
 80007be:	4619      	moveq	r1, r3
 80007c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007c4:	d019      	beq.n	80007fa <__aeabi_dmul+0x24a>
 80007c6:	ea94 0f0c 	teq	r4, ip
 80007ca:	d102      	bne.n	80007d2 <__aeabi_dmul+0x222>
 80007cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d0:	d113      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007d2:	ea95 0f0c 	teq	r5, ip
 80007d6:	d105      	bne.n	80007e4 <__aeabi_dmul+0x234>
 80007d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007dc:	bf1c      	itt	ne
 80007de:	4610      	movne	r0, r2
 80007e0:	4619      	movne	r1, r3
 80007e2:	d10a      	bne.n	80007fa <__aeabi_dmul+0x24a>
 80007e4:	ea81 0103 	eor.w	r1, r1, r3
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007f4:	f04f 0000 	mov.w	r0, #0
 80007f8:	bd70      	pop	{r4, r5, r6, pc}
 80007fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000802:	bd70      	pop	{r4, r5, r6, pc}

08000804 <__aeabi_ddiv>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800080a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800080e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000812:	bf1d      	ittte	ne
 8000814:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000818:	ea94 0f0c 	teqne	r4, ip
 800081c:	ea95 0f0c 	teqne	r5, ip
 8000820:	f000 f8a7 	bleq	8000972 <__aeabi_ddiv+0x16e>
 8000824:	eba4 0405 	sub.w	r4, r4, r5
 8000828:	ea81 0e03 	eor.w	lr, r1, r3
 800082c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000830:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000834:	f000 8088 	beq.w	8000948 <__aeabi_ddiv+0x144>
 8000838:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800083c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000840:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000844:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000848:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800084c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000850:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000854:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000858:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800085c:	429d      	cmp	r5, r3
 800085e:	bf08      	it	eq
 8000860:	4296      	cmpeq	r6, r2
 8000862:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000866:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800086a:	d202      	bcs.n	8000872 <__aeabi_ddiv+0x6e>
 800086c:	085b      	lsrs	r3, r3, #1
 800086e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000872:	1ab6      	subs	r6, r6, r2
 8000874:	eb65 0503 	sbc.w	r5, r5, r3
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000882:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 000c 	orrcs.w	r0, r0, ip
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008e4:	d018      	beq.n	8000918 <__aeabi_ddiv+0x114>
 80008e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000902:	d1c0      	bne.n	8000886 <__aeabi_ddiv+0x82>
 8000904:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000908:	d10b      	bne.n	8000922 <__aeabi_ddiv+0x11e>
 800090a:	ea41 0100 	orr.w	r1, r1, r0
 800090e:	f04f 0000 	mov.w	r0, #0
 8000912:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000916:	e7b6      	b.n	8000886 <__aeabi_ddiv+0x82>
 8000918:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800091c:	bf04      	itt	eq
 800091e:	4301      	orreq	r1, r0
 8000920:	2000      	moveq	r0, #0
 8000922:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000926:	bf88      	it	hi
 8000928:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800092c:	f63f aeaf 	bhi.w	800068e <__aeabi_dmul+0xde>
 8000930:	ebb5 0c03 	subs.w	ip, r5, r3
 8000934:	bf04      	itt	eq
 8000936:	ebb6 0c02 	subseq.w	ip, r6, r2
 800093a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800093e:	f150 0000 	adcs.w	r0, r0, #0
 8000942:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800094c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000950:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000954:	bfc2      	ittt	gt
 8000956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800095a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095e:	bd70      	popgt	{r4, r5, r6, pc}
 8000960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000964:	f04f 0e00 	mov.w	lr, #0
 8000968:	3c01      	subs	r4, #1
 800096a:	e690      	b.n	800068e <__aeabi_dmul+0xde>
 800096c:	ea45 0e06 	orr.w	lr, r5, r6
 8000970:	e68d      	b.n	800068e <__aeabi_dmul+0xde>
 8000972:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000976:	ea94 0f0c 	teq	r4, ip
 800097a:	bf08      	it	eq
 800097c:	ea95 0f0c 	teqeq	r5, ip
 8000980:	f43f af3b 	beq.w	80007fa <__aeabi_dmul+0x24a>
 8000984:	ea94 0f0c 	teq	r4, ip
 8000988:	d10a      	bne.n	80009a0 <__aeabi_ddiv+0x19c>
 800098a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800098e:	f47f af34 	bne.w	80007fa <__aeabi_dmul+0x24a>
 8000992:	ea95 0f0c 	teq	r5, ip
 8000996:	f47f af25 	bne.w	80007e4 <__aeabi_dmul+0x234>
 800099a:	4610      	mov	r0, r2
 800099c:	4619      	mov	r1, r3
 800099e:	e72c      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009a0:	ea95 0f0c 	teq	r5, ip
 80009a4:	d106      	bne.n	80009b4 <__aeabi_ddiv+0x1b0>
 80009a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009aa:	f43f aefd 	beq.w	80007a8 <__aeabi_dmul+0x1f8>
 80009ae:	4610      	mov	r0, r2
 80009b0:	4619      	mov	r1, r3
 80009b2:	e722      	b.n	80007fa <__aeabi_dmul+0x24a>
 80009b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009b8:	bf18      	it	ne
 80009ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009be:	f47f aec5 	bne.w	800074c <__aeabi_dmul+0x19c>
 80009c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009c6:	f47f af0d 	bne.w	80007e4 <__aeabi_dmul+0x234>
 80009ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ce:	f47f aeeb 	bne.w	80007a8 <__aeabi_dmul+0x1f8>
 80009d2:	e712      	b.n	80007fa <__aeabi_dmul+0x24a>

080009d4 <__gedf2>:
 80009d4:	f04f 3cff 	mov.w	ip, #4294967295
 80009d8:	e006      	b.n	80009e8 <__cmpdf2+0x4>
 80009da:	bf00      	nop

080009dc <__ledf2>:
 80009dc:	f04f 0c01 	mov.w	ip, #1
 80009e0:	e002      	b.n	80009e8 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__cmpdf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f8:	bf18      	it	ne
 80009fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009fe:	d01b      	beq.n	8000a38 <__cmpdf2+0x54>
 8000a00:	b001      	add	sp, #4
 8000a02:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a06:	bf0c      	ite	eq
 8000a08:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a0c:	ea91 0f03 	teqne	r1, r3
 8000a10:	bf02      	ittt	eq
 8000a12:	ea90 0f02 	teqeq	r0, r2
 8000a16:	2000      	moveq	r0, #0
 8000a18:	4770      	bxeq	lr
 8000a1a:	f110 0f00 	cmn.w	r0, #0
 8000a1e:	ea91 0f03 	teq	r1, r3
 8000a22:	bf58      	it	pl
 8000a24:	4299      	cmppl	r1, r3
 8000a26:	bf08      	it	eq
 8000a28:	4290      	cmpeq	r0, r2
 8000a2a:	bf2c      	ite	cs
 8000a2c:	17d8      	asrcs	r0, r3, #31
 8000a2e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a32:	f040 0001 	orr.w	r0, r0, #1
 8000a36:	4770      	bx	lr
 8000a38:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a3c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a40:	d102      	bne.n	8000a48 <__cmpdf2+0x64>
 8000a42:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a46:	d107      	bne.n	8000a58 <__cmpdf2+0x74>
 8000a48:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a4c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a50:	d1d6      	bne.n	8000a00 <__cmpdf2+0x1c>
 8000a52:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a56:	d0d3      	beq.n	8000a00 <__cmpdf2+0x1c>
 8000a58:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop

08000a60 <__aeabi_cdrcmple>:
 8000a60:	4684      	mov	ip, r0
 8000a62:	4610      	mov	r0, r2
 8000a64:	4662      	mov	r2, ip
 8000a66:	468c      	mov	ip, r1
 8000a68:	4619      	mov	r1, r3
 8000a6a:	4663      	mov	r3, ip
 8000a6c:	e000      	b.n	8000a70 <__aeabi_cdcmpeq>
 8000a6e:	bf00      	nop

08000a70 <__aeabi_cdcmpeq>:
 8000a70:	b501      	push	{r0, lr}
 8000a72:	f7ff ffb7 	bl	80009e4 <__cmpdf2>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	bf48      	it	mi
 8000a7a:	f110 0f00 	cmnmi.w	r0, #0
 8000a7e:	bd01      	pop	{r0, pc}

08000a80 <__aeabi_dcmpeq>:
 8000a80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a84:	f7ff fff4 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a88:	bf0c      	ite	eq
 8000a8a:	2001      	moveq	r0, #1
 8000a8c:	2000      	movne	r0, #0
 8000a8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a92:	bf00      	nop

08000a94 <__aeabi_dcmplt>:
 8000a94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a98:	f7ff ffea 	bl	8000a70 <__aeabi_cdcmpeq>
 8000a9c:	bf34      	ite	cc
 8000a9e:	2001      	movcc	r0, #1
 8000aa0:	2000      	movcs	r0, #0
 8000aa2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_dcmple>:
 8000aa8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aac:	f7ff ffe0 	bl	8000a70 <__aeabi_cdcmpeq>
 8000ab0:	bf94      	ite	ls
 8000ab2:	2001      	movls	r0, #1
 8000ab4:	2000      	movhi	r0, #0
 8000ab6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aba:	bf00      	nop

08000abc <__aeabi_dcmpge>:
 8000abc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac0:	f7ff ffce 	bl	8000a60 <__aeabi_cdrcmple>
 8000ac4:	bf94      	ite	ls
 8000ac6:	2001      	movls	r0, #1
 8000ac8:	2000      	movhi	r0, #0
 8000aca:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ace:	bf00      	nop

08000ad0 <__aeabi_dcmpgt>:
 8000ad0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad4:	f7ff ffc4 	bl	8000a60 <__aeabi_cdrcmple>
 8000ad8:	bf34      	ite	cc
 8000ada:	2001      	movcc	r0, #1
 8000adc:	2000      	movcs	r0, #0
 8000ade:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ae2:	bf00      	nop

08000ae4 <__aeabi_d2iz>:
 8000ae4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ae8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aec:	d215      	bcs.n	8000b1a <__aeabi_d2iz+0x36>
 8000aee:	d511      	bpl.n	8000b14 <__aeabi_d2iz+0x30>
 8000af0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000af4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000af8:	d912      	bls.n	8000b20 <__aeabi_d2iz+0x3c>
 8000afa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000afe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b06:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b0e:	bf18      	it	ne
 8000b10:	4240      	negne	r0, r0
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d105      	bne.n	8000b2c <__aeabi_d2iz+0x48>
 8000b20:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b24:	bf08      	it	eq
 8000b26:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop

08000b34 <__aeabi_d2uiz>:
 8000b34:	004a      	lsls	r2, r1, #1
 8000b36:	d211      	bcs.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b38:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b3c:	d211      	bcs.n	8000b62 <__aeabi_d2uiz+0x2e>
 8000b3e:	d50d      	bpl.n	8000b5c <__aeabi_d2uiz+0x28>
 8000b40:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b44:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b48:	d40e      	bmi.n	8000b68 <__aeabi_d2uiz+0x34>
 8000b4a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b4e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b52:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b56:	fa23 f002 	lsr.w	r0, r3, r2
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d102      	bne.n	8000b6e <__aeabi_d2uiz+0x3a>
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	4770      	bx	lr
 8000b6e:	f04f 0000 	mov.w	r0, #0
 8000b72:	4770      	bx	lr

08000b74 <Ov7725_Init>:

/************************************************
 * Sensor_Init
 ************************************************/
ErrorStatus Ov7725_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
	uint16_t i = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	80fb      	strh	r3, [r7, #6]
	uint8_t Sensor_IDCode = 0;	
 8000b7e:	2300      	movs	r3, #0
 8000b80:	717b      	strb	r3, [r7, #5]
	
	if( 0 == SCCB_WriteByte ( 0x12, 0x80 ) ) /*reset sensor */
 8000b82:	2180      	movs	r1, #128	; 0x80
 8000b84:	2012      	movs	r0, #18
 8000b86:	f000 f955 	bl	8000e34 <SCCB_WriteByte>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d101      	bne.n	8000b94 <Ov7725_Init+0x20>
	{
		return ERROR ;
 8000b90:	2301      	movs	r3, #1
 8000b92:	e030      	b.n	8000bf6 <Ov7725_Init+0x82>
	}	

	if( 0 == SCCB_ReadByte( &Sensor_IDCode, 1, 0x0b ) )	 /* read sensor ID*/
 8000b94:	1d7b      	adds	r3, r7, #5
 8000b96:	220b      	movs	r2, #11
 8000b98:	2101      	movs	r1, #1
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f000 f979 	bl	8000e92 <SCCB_ReadByte>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <Ov7725_Init+0x36>
	{
		return ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e025      	b.n	8000bf6 <Ov7725_Init+0x82>
	}
	//DEBUG("Sensor ID is 0x%x", Sensor_IDCode);	
	
	if(Sensor_IDCode == OV7725_ID)
 8000baa:	797b      	ldrb	r3, [r7, #5]
 8000bac:	2b21      	cmp	r3, #33	; 0x21
 8000bae:	d11f      	bne.n	8000bf0 <Ov7725_Init+0x7c>
	{
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	80fb      	strh	r3, [r7, #6]
 8000bb4:	e015      	b.n	8000be2 <Ov7725_Init+0x6e>
		{
			if( 0 == SCCB_WriteByte(Sensor_Config[i].Address, Sensor_Config[i].Value) )
 8000bb6:	88fb      	ldrh	r3, [r7, #6]
 8000bb8:	4a11      	ldr	r2, [pc, #68]	; (8000c00 <Ov7725_Init+0x8c>)
 8000bba:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8000bbe:	b29a      	uxth	r2, r3
 8000bc0:	88fb      	ldrh	r3, [r7, #6]
 8000bc2:	490f      	ldr	r1, [pc, #60]	; (8000c00 <Ov7725_Init+0x8c>)
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	440b      	add	r3, r1
 8000bc8:	785b      	ldrb	r3, [r3, #1]
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4610      	mov	r0, r2
 8000bce:	f000 f931 	bl	8000e34 <SCCB_WriteByte>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d101      	bne.n	8000bdc <Ov7725_Init+0x68>
			{                
				return ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	e00c      	b.n	8000bf6 <Ov7725_Init+0x82>
		for( i = 0 ; i < OV7725_REG_NUM ; i++ )
 8000bdc:	88fb      	ldrh	r3, [r7, #6]
 8000bde:	3301      	adds	r3, #1
 8000be0:	80fb      	strh	r3, [r7, #6]
 8000be2:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <Ov7725_Init+0x90>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	88fa      	ldrh	r2, [r7, #6]
 8000bea:	429a      	cmp	r2, r3
 8000bec:	d3e3      	bcc.n	8000bb6 <Ov7725_Init+0x42>
 8000bee:	e001      	b.n	8000bf4 <Ov7725_Init+0x80>
			}
		}
	}
	else
	{
		return ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e000      	b.n	8000bf6 <Ov7725_Init+0x82>
	}
	
	return SUCCESS;
 8000bf4:	2300      	movs	r3, #0
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	20000000 	.word	0x20000000
 8000c04:	2000009a 	.word	0x2000009a

08000c08 <SCCB_delay>:

#define DEV_ADR  ADDR_OV7725 			 


static void SCCB_delay(void)
{	
 8000c08:	b480      	push	{r7}
 8000c0a:	b083      	sub	sp, #12
 8000c0c:	af00      	add	r7, sp, #0
   uint16_t i = 400; 
 8000c0e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c12:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000c14:	e002      	b.n	8000c1c <SCCB_delay+0x14>
   { 
     i--; 
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	80fb      	strh	r3, [r7, #6]
   while(i) 
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d1f9      	bne.n	8000c16 <SCCB_delay+0xe>
   } 
}
 8000c22:	bf00      	nop
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bc80      	pop	{r7}
 8000c2c:	4770      	bx	lr
	...

08000c30 <SCCB_Start>:


static int SCCB_Start(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	SDA_H;
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <SCCB_Start+0x54>)
 8000c36:	2280      	movs	r2, #128	; 0x80
 8000c38:	611a      	str	r2, [r3, #16]
	SCL_H;
 8000c3a:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <SCCB_Start+0x54>)
 8000c3c:	2240      	movs	r2, #64	; 0x40
 8000c3e:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000c40:	f7ff ffe2 	bl	8000c08 <SCCB_delay>
	if(!SDA_read)
 8000c44:	2180      	movs	r1, #128	; 0x80
 8000c46:	480f      	ldr	r0, [pc, #60]	; (8000c84 <SCCB_Start+0x54>)
 8000c48:	f003 f824 	bl	8003c94 <HAL_GPIO_ReadPin>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d101      	bne.n	8000c56 <SCCB_Start+0x26>
	return DISABLE;	
 8000c52:	2300      	movs	r3, #0
 8000c54:	e013      	b.n	8000c7e <SCCB_Start+0x4e>
	SDA_L;
 8000c56:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <SCCB_Start+0x54>)
 8000c58:	2280      	movs	r2, #128	; 0x80
 8000c5a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c5c:	f7ff ffd4 	bl	8000c08 <SCCB_delay>
	if(SDA_read) 
 8000c60:	2180      	movs	r1, #128	; 0x80
 8000c62:	4808      	ldr	r0, [pc, #32]	; (8000c84 <SCCB_Start+0x54>)
 8000c64:	f003 f816 	bl	8003c94 <HAL_GPIO_ReadPin>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SCCB_Start+0x42>
	return DISABLE;	
 8000c6e:	2300      	movs	r3, #0
 8000c70:	e005      	b.n	8000c7e <SCCB_Start+0x4e>
	SDA_L;
 8000c72:	4b04      	ldr	r3, [pc, #16]	; (8000c84 <SCCB_Start+0x54>)
 8000c74:	2280      	movs	r2, #128	; 0x80
 8000c76:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c78:	f7ff ffc6 	bl	8000c08 <SCCB_delay>
	return ENABLE;
 8000c7c:	2301      	movs	r3, #1
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40011000 	.word	0x40011000

08000c88 <SCCB_Stop>:


static void SCCB_Stop(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	SCL_L;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <SCCB_Stop+0x30>)
 8000c8e:	2240      	movs	r2, #64	; 0x40
 8000c90:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c92:	f7ff ffb9 	bl	8000c08 <SCCB_delay>
	SDA_L;
 8000c96:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <SCCB_Stop+0x30>)
 8000c98:	2280      	movs	r2, #128	; 0x80
 8000c9a:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000c9c:	f7ff ffb4 	bl	8000c08 <SCCB_delay>
	SCL_H;
 8000ca0:	4b05      	ldr	r3, [pc, #20]	; (8000cb8 <SCCB_Stop+0x30>)
 8000ca2:	2240      	movs	r2, #64	; 0x40
 8000ca4:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000ca6:	f7ff ffaf 	bl	8000c08 <SCCB_delay>
	SDA_H;
 8000caa:	4b03      	ldr	r3, [pc, #12]	; (8000cb8 <SCCB_Stop+0x30>)
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cb0:	f7ff ffaa 	bl	8000c08 <SCCB_delay>
}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	40011000 	.word	0x40011000

08000cbc <SCCB_Ack>:


static void SCCB_Ack(void)
{	
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	af00      	add	r7, sp, #0
	SCL_L;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	; (8000cec <SCCB_Ack+0x30>)
 8000cc2:	2240      	movs	r2, #64	; 0x40
 8000cc4:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000cc6:	f7ff ff9f 	bl	8000c08 <SCCB_delay>
	SDA_L;
 8000cca:	4b08      	ldr	r3, [pc, #32]	; (8000cec <SCCB_Ack+0x30>)
 8000ccc:	2280      	movs	r2, #128	; 0x80
 8000cce:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000cd0:	f7ff ff9a 	bl	8000c08 <SCCB_delay>
	SCL_H;
 8000cd4:	4b05      	ldr	r3, [pc, #20]	; (8000cec <SCCB_Ack+0x30>)
 8000cd6:	2240      	movs	r2, #64	; 0x40
 8000cd8:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000cda:	f7ff ff95 	bl	8000c08 <SCCB_delay>
	SCL_L;
 8000cde:	4b03      	ldr	r3, [pc, #12]	; (8000cec <SCCB_Ack+0x30>)
 8000ce0:	2240      	movs	r2, #64	; 0x40
 8000ce2:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000ce4:	f7ff ff90 	bl	8000c08 <SCCB_delay>
}
 8000ce8:	bf00      	nop
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40011000 	.word	0x40011000

08000cf0 <SCCB_NoAck>:


static void SCCB_NoAck(void)
{	
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
	SCL_L;
 8000cf4:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <SCCB_NoAck+0x30>)
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000cfa:	f7ff ff85 	bl	8000c08 <SCCB_delay>
	SDA_H;
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <SCCB_NoAck+0x30>)
 8000d00:	2280      	movs	r2, #128	; 0x80
 8000d02:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d04:	f7ff ff80 	bl	8000c08 <SCCB_delay>
	SCL_H;
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SCCB_NoAck+0x30>)
 8000d0a:	2240      	movs	r2, #64	; 0x40
 8000d0c:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d0e:	f7ff ff7b 	bl	8000c08 <SCCB_delay>
	SCL_L;
 8000d12:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <SCCB_NoAck+0x30>)
 8000d14:	2240      	movs	r2, #64	; 0x40
 8000d16:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000d18:	f7ff ff76 	bl	8000c08 <SCCB_delay>
}
 8000d1c:	bf00      	nop
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	40011000 	.word	0x40011000

08000d24 <SCCB_WaitAck>:


static int SCCB_WaitAck(void) 	
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0
	SCL_L;
 8000d28:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <SCCB_WaitAck+0x48>)
 8000d2a:	2240      	movs	r2, #64	; 0x40
 8000d2c:	615a      	str	r2, [r3, #20]
	SCCB_delay();
 8000d2e:	f7ff ff6b 	bl	8000c08 <SCCB_delay>
	SDA_H;			
 8000d32:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <SCCB_WaitAck+0x48>)
 8000d34:	2280      	movs	r2, #128	; 0x80
 8000d36:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d38:	f7ff ff66 	bl	8000c08 <SCCB_delay>
	SCL_H;
 8000d3c:	4b0b      	ldr	r3, [pc, #44]	; (8000d6c <SCCB_WaitAck+0x48>)
 8000d3e:	2240      	movs	r2, #64	; 0x40
 8000d40:	611a      	str	r2, [r3, #16]
	SCCB_delay();
 8000d42:	f7ff ff61 	bl	8000c08 <SCCB_delay>
	if(SDA_read)
 8000d46:	2180      	movs	r1, #128	; 0x80
 8000d48:	4808      	ldr	r0, [pc, #32]	; (8000d6c <SCCB_WaitAck+0x48>)
 8000d4a:	f002 ffa3 	bl	8003c94 <HAL_GPIO_ReadPin>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d004      	beq.n	8000d5e <SCCB_WaitAck+0x3a>
	{
      SCL_L;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SCCB_WaitAck+0x48>)
 8000d56:	2240      	movs	r2, #64	; 0x40
 8000d58:	615a      	str	r2, [r3, #20]
      return DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	e003      	b.n	8000d66 <SCCB_WaitAck+0x42>
	}
	SCL_L;
 8000d5e:	4b03      	ldr	r3, [pc, #12]	; (8000d6c <SCCB_WaitAck+0x48>)
 8000d60:	2240      	movs	r2, #64	; 0x40
 8000d62:	615a      	str	r2, [r3, #20]
	return ENABLE;
 8000d64:	2301      	movs	r3, #1
}
 8000d66:	4618      	mov	r0, r3
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	40011000 	.word	0x40011000

08000d70 <SCCB_SendByte>:


static void SCCB_SendByte(uint8_t SendByte) 
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	4603      	mov	r3, r0
 8000d78:	71fb      	strb	r3, [r7, #7]
    uint8_t i=8;
 8000d7a:	2308      	movs	r3, #8
 8000d7c:	73fb      	strb	r3, [r7, #15]
    while(i--)
 8000d7e:	e019      	b.n	8000db4 <SCCB_SendByte+0x44>
    {
        SCL_L;
 8000d80:	4b12      	ldr	r3, [pc, #72]	; (8000dcc <SCCB_SendByte+0x5c>)
 8000d82:	2240      	movs	r2, #64	; 0x40
 8000d84:	615a      	str	r2, [r3, #20]
        SCCB_delay();
 8000d86:	f7ff ff3f 	bl	8000c08 <SCCB_delay>
      if(SendByte&0x80)
 8000d8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	da03      	bge.n	8000d9a <SCCB_SendByte+0x2a>
        SDA_H;  
 8000d92:	4b0e      	ldr	r3, [pc, #56]	; (8000dcc <SCCB_SendByte+0x5c>)
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	611a      	str	r2, [r3, #16]
 8000d98:	e002      	b.n	8000da0 <SCCB_SendByte+0x30>
      else 
        SDA_L;   
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	; (8000dcc <SCCB_SendByte+0x5c>)
 8000d9c:	2280      	movs	r2, #128	; 0x80
 8000d9e:	615a      	str	r2, [r3, #20]
        SendByte<<=1;
 8000da0:	79fb      	ldrb	r3, [r7, #7]
 8000da2:	005b      	lsls	r3, r3, #1
 8000da4:	71fb      	strb	r3, [r7, #7]
        SCCB_delay();
 8000da6:	f7ff ff2f 	bl	8000c08 <SCCB_delay>
		SCL_H;
 8000daa:	4b08      	ldr	r3, [pc, #32]	; (8000dcc <SCCB_SendByte+0x5c>)
 8000dac:	2240      	movs	r2, #64	; 0x40
 8000dae:	611a      	str	r2, [r3, #16]
        SCCB_delay();
 8000db0:	f7ff ff2a 	bl	8000c08 <SCCB_delay>
    while(i--)
 8000db4:	7bfb      	ldrb	r3, [r7, #15]
 8000db6:	1e5a      	subs	r2, r3, #1
 8000db8:	73fa      	strb	r2, [r7, #15]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1e0      	bne.n	8000d80 <SCCB_SendByte+0x10>
    }
    SCL_L;
 8000dbe:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <SCCB_SendByte+0x5c>)
 8000dc0:	2240      	movs	r2, #64	; 0x40
 8000dc2:	615a      	str	r2, [r3, #20]
}
 8000dc4:	bf00      	nop
 8000dc6:	3710      	adds	r7, #16
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40011000 	.word	0x40011000

08000dd0 <SCCB_ReceiveByte>:


static int SCCB_ReceiveByte(void)  
{ 
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
    uint8_t i=8;
 8000dd6:	2308      	movs	r3, #8
 8000dd8:	71fb      	strb	r3, [r7, #7]
    uint8_t ReceiveByte=0;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	71bb      	strb	r3, [r7, #6]

    SDA_H;				
 8000dde:	4b14      	ldr	r3, [pc, #80]	; (8000e30 <SCCB_ReceiveByte+0x60>)
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	611a      	str	r2, [r3, #16]
    while(i--)
 8000de4:	e017      	b.n	8000e16 <SCCB_ReceiveByte+0x46>
    {
      ReceiveByte<<=1;      
 8000de6:	79bb      	ldrb	r3, [r7, #6]
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	71bb      	strb	r3, [r7, #6]
      SCL_L;
 8000dec:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <SCCB_ReceiveByte+0x60>)
 8000dee:	2240      	movs	r2, #64	; 0x40
 8000df0:	615a      	str	r2, [r3, #20]
      SCCB_delay();
 8000df2:	f7ff ff09 	bl	8000c08 <SCCB_delay>
	  SCL_H;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <SCCB_ReceiveByte+0x60>)
 8000df8:	2240      	movs	r2, #64	; 0x40
 8000dfa:	611a      	str	r2, [r3, #16]
      SCCB_delay();	
 8000dfc:	f7ff ff04 	bl	8000c08 <SCCB_delay>
      if(SDA_read)
 8000e00:	2180      	movs	r1, #128	; 0x80
 8000e02:	480b      	ldr	r0, [pc, #44]	; (8000e30 <SCCB_ReceiveByte+0x60>)
 8000e04:	f002 ff46 	bl	8003c94 <HAL_GPIO_ReadPin>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d003      	beq.n	8000e16 <SCCB_ReceiveByte+0x46>
      {
        ReceiveByte|=0x01;
 8000e0e:	79bb      	ldrb	r3, [r7, #6]
 8000e10:	f043 0301 	orr.w	r3, r3, #1
 8000e14:	71bb      	strb	r3, [r7, #6]
    while(i--)
 8000e16:	79fb      	ldrb	r3, [r7, #7]
 8000e18:	1e5a      	subs	r2, r3, #1
 8000e1a:	71fa      	strb	r2, [r7, #7]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d1e2      	bne.n	8000de6 <SCCB_ReceiveByte+0x16>
      }
    }
    SCL_L;
 8000e20:	4b03      	ldr	r3, [pc, #12]	; (8000e30 <SCCB_ReceiveByte+0x60>)
 8000e22:	2240      	movs	r2, #64	; 0x40
 8000e24:	615a      	str	r2, [r3, #20]
    return ReceiveByte;
 8000e26:	79bb      	ldrb	r3, [r7, #6]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3708      	adds	r7, #8
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40011000 	.word	0x40011000

08000e34 <SCCB_WriteByte>:

          
int SCCB_WriteByte( uint16_t WriteAddress , uint8_t SendByte )
{		
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	460a      	mov	r2, r1
 8000e3e:	80fb      	strh	r3, [r7, #6]
 8000e40:	4613      	mov	r3, r2
 8000e42:	717b      	strb	r3, [r7, #5]
    if(!SCCB_Start())
 8000e44:	f7ff fef4 	bl	8000c30 <SCCB_Start>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d101      	bne.n	8000e52 <SCCB_WriteByte+0x1e>
	{
	    return DISABLE;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	e01b      	b.n	8000e8a <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte( DEV_ADR );                
 8000e52:	2042      	movs	r0, #66	; 0x42
 8000e54:	f7ff ff8c 	bl	8000d70 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000e58:	f7ff ff64 	bl	8000d24 <SCCB_WaitAck>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d103      	bne.n	8000e6a <SCCB_WriteByte+0x36>
	{
		SCCB_Stop(); 
 8000e62:	f7ff ff11 	bl	8000c88 <SCCB_Stop>
		return DISABLE;
 8000e66:	2300      	movs	r3, #0
 8000e68:	e00f      	b.n	8000e8a <SCCB_WriteByte+0x56>
	}
    SCCB_SendByte((uint8_t)(WriteAddress & 0x00FF));  
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	b2db      	uxtb	r3, r3
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff7e 	bl	8000d70 <SCCB_SendByte>
    SCCB_WaitAck();	
 8000e74:	f7ff ff56 	bl	8000d24 <SCCB_WaitAck>
    SCCB_SendByte(SendByte);
 8000e78:	797b      	ldrb	r3, [r7, #5]
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f7ff ff78 	bl	8000d70 <SCCB_SendByte>
    SCCB_WaitAck();   
 8000e80:	f7ff ff50 	bl	8000d24 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000e84:	f7ff ff00 	bl	8000c88 <SCCB_Stop>
    return ENABLE;
 8000e88:	2301      	movs	r3, #1
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <SCCB_ReadByte>:

          
int SCCB_ReadByte(uint8_t* pBuffer, uint16_t length, uint8_t ReadAddress)
{	
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b082      	sub	sp, #8
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	807b      	strh	r3, [r7, #2]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	707b      	strb	r3, [r7, #1]
    if(!SCCB_Start())
 8000ea2:	f7ff fec5 	bl	8000c30 <SCCB_Start>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <SCCB_ReadByte+0x1e>
	{
	    return DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	e040      	b.n	8000f32 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR );       
 8000eb0:	2042      	movs	r0, #66	; 0x42
 8000eb2:	f7ff ff5d 	bl	8000d70 <SCCB_SendByte>
    if( !SCCB_WaitAck() )
 8000eb6:	f7ff ff35 	bl	8000d24 <SCCB_WaitAck>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d103      	bne.n	8000ec8 <SCCB_ReadByte+0x36>
	{
		SCCB_Stop(); 
 8000ec0:	f7ff fee2 	bl	8000c88 <SCCB_Stop>
		return DISABLE;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	e034      	b.n	8000f32 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( ReadAddress );     
 8000ec8:	787b      	ldrb	r3, [r7, #1]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff ff50 	bl	8000d70 <SCCB_SendByte>
    SCCB_WaitAck();	
 8000ed0:	f7ff ff28 	bl	8000d24 <SCCB_WaitAck>
    SCCB_Stop(); 
 8000ed4:	f7ff fed8 	bl	8000c88 <SCCB_Stop>
	
    if(!SCCB_Start())
 8000ed8:	f7ff feaa 	bl	8000c30 <SCCB_Start>
 8000edc:	4603      	mov	r3, r0
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d101      	bne.n	8000ee6 <SCCB_ReadByte+0x54>
	{
		return DISABLE;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	e025      	b.n	8000f32 <SCCB_ReadByte+0xa0>
	}
    SCCB_SendByte( DEV_ADR + 1 );   
 8000ee6:	2043      	movs	r0, #67	; 0x43
 8000ee8:	f7ff ff42 	bl	8000d70 <SCCB_SendByte>
    if(!SCCB_WaitAck())
 8000eec:	f7ff ff1a 	bl	8000d24 <SCCB_WaitAck>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d117      	bne.n	8000f26 <SCCB_ReadByte+0x94>
	{
		SCCB_Stop(); 
 8000ef6:	f7ff fec7 	bl	8000c88 <SCCB_Stop>
		return DISABLE;
 8000efa:	2300      	movs	r3, #0
 8000efc:	e019      	b.n	8000f32 <SCCB_ReadByte+0xa0>
	}
    while(length)
    {
      *pBuffer = SCCB_ReceiveByte();
 8000efe:	f7ff ff67 	bl	8000dd0 <SCCB_ReceiveByte>
 8000f02:	4603      	mov	r3, r0
 8000f04:	b2da      	uxtb	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	701a      	strb	r2, [r3, #0]
      if(length == 1)
 8000f0a:	887b      	ldrh	r3, [r7, #2]
 8000f0c:	2b01      	cmp	r3, #1
 8000f0e:	d102      	bne.n	8000f16 <SCCB_ReadByte+0x84>
	  {
		  SCCB_NoAck();
 8000f10:	f7ff feee 	bl	8000cf0 <SCCB_NoAck>
 8000f14:	e001      	b.n	8000f1a <SCCB_ReadByte+0x88>
	  }
      else
	  {
		SCCB_Ack(); 
 8000f16:	f7ff fed1 	bl	8000cbc <SCCB_Ack>
	  }
      pBuffer++;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	607b      	str	r3, [r7, #4]
      length--;
 8000f20:	887b      	ldrh	r3, [r7, #2]
 8000f22:	3b01      	subs	r3, #1
 8000f24:	807b      	strh	r3, [r7, #2]
    while(length)
 8000f26:	887b      	ldrh	r3, [r7, #2]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d1e8      	bne.n	8000efe <SCCB_ReadByte+0x6c>
    }
    SCCB_Stop();
 8000f2c:	f7ff feac 	bl	8000c88 <SCCB_Stop>
    return ENABLE;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <Delay>:
void		LCD_FillColor           ( uint32_t ulAmout_Point, uint16_t usColor );
uint16_t	LCD_Read_PixelData      ( void );



void Delay ( __IO uint32_t nCount ){  for ( ; nCount != 0; nCount -- );}
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	e002      	b.n	8000f4a <Delay+0x10>
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	607b      	str	r3, [r7, #4]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d1f9      	bne.n	8000f44 <Delay+0xa>
 8000f50:	bf00      	nop
 8000f52:	bf00      	nop
 8000f54:	370c      	adds	r7, #12
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bc80      	pop	{r7}
 8000f5a:	4770      	bx	lr

08000f5c <LCD_INIT>:

void LCD_INIT ( void )
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af02      	add	r7, sp, #8
	LCD_BackLed_Control(ENABLE);
 8000f62:	2001      	movs	r0, #1
 8000f64:	f000 f828 	bl	8000fb8 <LCD_BackLed_Control>
	LCD_Rst();
 8000f68:	f000 f80e 	bl	8000f88 <LCD_Rst>
	LCD_REG_Config();
 8000f6c:	f000 f85e 	bl	800102c <LCD_REG_Config>
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 8000f70:	2300      	movs	r3, #0
 8000f72:	9300      	str	r3, [sp, #0]
 8000f74:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000f78:	22f0      	movs	r2, #240	; 0xf0
 8000f7a:	2100      	movs	r1, #0
 8000f7c:	2000      	movs	r0, #0
 8000f7e:	f000 f9e6 	bl	800134e <LCD_Clear>
}
 8000f82:	bf00      	nop
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <LCD_Rst>:



void LCD_Rst ( void )
{			
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_RESET);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2102      	movs	r1, #2
 8000f90:	4807      	ldr	r0, [pc, #28]	; (8000fb0 <LCD_Rst+0x28>)
 8000f92:	f002 fe96 	bl	8003cc2 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 					   
 8000f96:	4807      	ldr	r0, [pc, #28]	; (8000fb4 <LCD_Rst+0x2c>)
 8000f98:	f7ff ffcf 	bl	8000f3a <Delay>
	HAL_GPIO_WritePin(LCD_RST_PORT,LCD_RST_PIN,GPIO_PIN_SET);
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	4803      	ldr	r0, [pc, #12]	; (8000fb0 <LCD_Rst+0x28>)
 8000fa2:	f002 fe8e 	bl	8003cc2 <HAL_GPIO_WritePin>
	Delay ( 0xAFFf<<2 ); 	
 8000fa6:	4803      	ldr	r0, [pc, #12]	; (8000fb4 <LCD_Rst+0x2c>)
 8000fa8:	f7ff ffc7 	bl	8000f3a <Delay>
}
 8000fac:	bf00      	nop
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40011800 	.word	0x40011800
 8000fb4:	0002bffc 	.word	0x0002bffc

08000fb8 <LCD_BackLed_Control>:


void LCD_BackLed_Control ( FunctionalState enumState )
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	if ( enumState )
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d006      	beq.n	8000fd6 <LCD_BackLed_Control+0x1e>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_RESET);	
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fce:	4807      	ldr	r0, [pc, #28]	; (8000fec <LCD_BackLed_Control+0x34>)
 8000fd0:	f002 fe77 	bl	8003cc2 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
}
 8000fd4:	e005      	b.n	8000fe2 <LCD_BackLed_Control+0x2a>
		HAL_GPIO_WritePin(LCD_BK_PORT,LCD_BK_PIN,GPIO_PIN_SET);			
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fdc:	4803      	ldr	r0, [pc, #12]	; (8000fec <LCD_BackLed_Control+0x34>)
 8000fde:	f002 fe70 	bl	8003cc2 <HAL_GPIO_WritePin>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40011400 	.word	0x40011400

08000ff0 <LCD_Write_Cmd>:




void LCD_Write_Cmd ( uint16_t usCmd )
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_CMD ) = usCmd;
 8000ffa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	8013      	strh	r3, [r2, #0]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <LCD_Write_Data>:




void LCD_Write_Data ( uint16_t usData )
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	80fb      	strh	r3, [r7, #6]
	* ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) = usData;
 8001016:	4a04      	ldr	r2, [pc, #16]	; (8001028 <LCD_Write_Data+0x1c>)
 8001018:	88fb      	ldrh	r3, [r7, #6]
 800101a:	8013      	strh	r3, [r2, #0]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	bc80      	pop	{r7}
 8001024:	4770      	bx	lr
 8001026:	bf00      	nop
 8001028:	60020000 	.word	0x60020000

0800102c <LCD_REG_Config>:
	return ( * ( __IO uint16_t * ) ( FSMC_Addr_LCD_DATA ) );	
}


void LCD_REG_Config ( void )
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
	/*  Power control B (CFh)  */
	DEBUG_DELAY  ();
	LCD_Write_Cmd ( 0xCF  );
 8001030:	20cf      	movs	r0, #207	; 0xcf
 8001032:	f7ff ffdd 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00  );
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff ffe8 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x81  );
 800103c:	2081      	movs	r0, #129	; 0x81
 800103e:	f7ff ffe5 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x30  );
 8001042:	2030      	movs	r0, #48	; 0x30
 8001044:	f7ff ffe2 	bl	800100c <LCD_Write_Data>
	
	/*  Power on sequence control (EDh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xED );
 8001048:	20ed      	movs	r0, #237	; 0xed
 800104a:	f7ff ffd1 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x64 );
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f7ff ffdc 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 8001054:	2003      	movs	r0, #3
 8001056:	f7ff ffd9 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x12 );
 800105a:	2012      	movs	r0, #18
 800105c:	f7ff ffd6 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x81 );
 8001060:	2081      	movs	r0, #129	; 0x81
 8001062:	f7ff ffd3 	bl	800100c <LCD_Write_Data>
	
	/*  Driver timing control A (E8h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xE8 );
 8001066:	20e8      	movs	r0, #232	; 0xe8
 8001068:	f7ff ffc2 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x85 );
 800106c:	2085      	movs	r0, #133	; 0x85
 800106e:	f7ff ffcd 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 8001072:	2010      	movs	r0, #16
 8001074:	f7ff ffca 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x78 );
 8001078:	2078      	movs	r0, #120	; 0x78
 800107a:	f7ff ffc7 	bl	800100c <LCD_Write_Data>
	
	/*  Power control A (CBh) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xCB );
 800107e:	20cb      	movs	r0, #203	; 0xcb
 8001080:	f7ff ffb6 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x39 );
 8001084:	2039      	movs	r0, #57	; 0x39
 8001086:	f7ff ffc1 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x2C );
 800108a:	202c      	movs	r0, #44	; 0x2c
 800108c:	f7ff ffbe 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001090:	2000      	movs	r0, #0
 8001092:	f7ff ffbb 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x34 );
 8001096:	2034      	movs	r0, #52	; 0x34
 8001098:	f7ff ffb8 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x02 );
 800109c:	2002      	movs	r0, #2
 800109e:	f7ff ffb5 	bl	800100c <LCD_Write_Data>
	
	/* Pump ratio control (F7h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xF7 );
 80010a2:	20f7      	movs	r0, #247	; 0xf7
 80010a4:	f7ff ffa4 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x20 );
 80010a8:	2020      	movs	r0, #32
 80010aa:	f7ff ffaf 	bl	800100c <LCD_Write_Data>
	
	/* Driver timing control B */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xEA );
 80010ae:	20ea      	movs	r0, #234	; 0xea
 80010b0:	f7ff ff9e 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80010b4:	2000      	movs	r0, #0
 80010b6:	f7ff ffa9 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 80010ba:	2000      	movs	r0, #0
 80010bc:	f7ff ffa6 	bl	800100c <LCD_Write_Data>
	
	/* Frame Rate Control (In Normal Mode/Full Colors) (B1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB1 );
 80010c0:	20b1      	movs	r0, #177	; 0xb1
 80010c2:	f7ff ff95 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 80010c6:	2000      	movs	r0, #0
 80010c8:	f7ff ffa0 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80010cc:	201b      	movs	r0, #27
 80010ce:	f7ff ff9d 	bl	800100c <LCD_Write_Data>
	
	/*  Display Function Control (B6h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xB6 );
 80010d2:	20b6      	movs	r0, #182	; 0xb6
 80010d4:	f7ff ff8c 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0A );
 80010d8:	200a      	movs	r0, #10
 80010da:	f7ff ff97 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0xA2 );
 80010de:	20a2      	movs	r0, #162	; 0xa2
 80010e0:	f7ff ff94 	bl	800100c <LCD_Write_Data>
	
	/* Power Control 1 (C0h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC0 );
 80010e4:	20c0      	movs	r0, #192	; 0xc0
 80010e6:	f7ff ff83 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x35 );
 80010ea:	2035      	movs	r0, #53	; 0x35
 80010ec:	f7ff ff8e 	bl	800100c <LCD_Write_Data>
	
	/* Power Control 2 (C1h) */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0xC1 );
 80010f0:	20c1      	movs	r0, #193	; 0xc1
 80010f2:	f7ff ff7d 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x11 );
 80010f6:	2011      	movs	r0, #17
 80010f8:	f7ff ff88 	bl	800100c <LCD_Write_Data>
	
	/* VCOM Control 1 (C5h) */
	LCD_Write_Cmd ( 0xC5 );
 80010fc:	20c5      	movs	r0, #197	; 0xc5
 80010fe:	f7ff ff77 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x45 );
 8001102:	2045      	movs	r0, #69	; 0x45
 8001104:	f7ff ff82 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x45 );
 8001108:	2045      	movs	r0, #69	; 0x45
 800110a:	f7ff ff7f 	bl	800100c <LCD_Write_Data>
	
	/*  VCOM Control 2 (C7h)  */
	LCD_Write_Cmd ( 0xC7 );
 800110e:	20c7      	movs	r0, #199	; 0xc7
 8001110:	f7ff ff6e 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xA2 );
 8001114:	20a2      	movs	r0, #162	; 0xa2
 8001116:	f7ff ff79 	bl	800100c <LCD_Write_Data>
	
	/* Enable 3G (F2h) */
	LCD_Write_Cmd ( 0xF2 );
 800111a:	20f2      	movs	r0, #242	; 0xf2
 800111c:	f7ff ff68 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ff73 	bl	800100c <LCD_Write_Data>
	
	/* Gamma Set (26h) */
	LCD_Write_Cmd ( 0x26 );
 8001126:	2026      	movs	r0, #38	; 0x26
 8001128:	f7ff ff62 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x01 );
 800112c:	2001      	movs	r0, #1
 800112e:	f7ff ff6d 	bl	800100c <LCD_Write_Data>
	DEBUG_DELAY ();
	
	/* Positive Gamma Correction */
	LCD_Write_Cmd ( 0xE0 ); //Set Gamma
 8001132:	20e0      	movs	r0, #224	; 0xe0
 8001134:	f7ff ff5c 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x0F );
 8001138:	200f      	movs	r0, #15
 800113a:	f7ff ff67 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x26 );
 800113e:	2026      	movs	r0, #38	; 0x26
 8001140:	f7ff ff64 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x24 );
 8001144:	2024      	movs	r0, #36	; 0x24
 8001146:	f7ff ff61 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x0B );
 800114a:	200b      	movs	r0, #11
 800114c:	f7ff ff5e 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x0E );
 8001150:	200e      	movs	r0, #14
 8001152:	f7ff ff5b 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 8001156:	2009      	movs	r0, #9
 8001158:	f7ff ff58 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x54 );
 800115c:	2054      	movs	r0, #84	; 0x54
 800115e:	f7ff ff55 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0xA8 );
 8001162:	20a8      	movs	r0, #168	; 0xa8
 8001164:	f7ff ff52 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x46 );
 8001168:	2046      	movs	r0, #70	; 0x46
 800116a:	f7ff ff4f 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x0C );
 800116e:	200c      	movs	r0, #12
 8001170:	f7ff ff4c 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x17 );
 8001174:	2017      	movs	r0, #23
 8001176:	f7ff ff49 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x09 );
 800117a:	2009      	movs	r0, #9
 800117c:	f7ff ff46 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 8001180:	200f      	movs	r0, #15
 8001182:	f7ff ff43 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 8001186:	2007      	movs	r0, #7
 8001188:	f7ff ff40 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ff3d 	bl	800100c <LCD_Write_Data>
	
	/* Negative Gamma Correction (E1h) */
	LCD_Write_Cmd ( 0XE1 ); //Set Gamma
 8001192:	20e1      	movs	r0, #225	; 0xe1
 8001194:	f7ff ff2c 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001198:	2000      	movs	r0, #0
 800119a:	f7ff ff37 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x19 );
 800119e:	2019      	movs	r0, #25
 80011a0:	f7ff ff34 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x1B );
 80011a4:	201b      	movs	r0, #27
 80011a6:	f7ff ff31 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x04 );
 80011aa:	2004      	movs	r0, #4
 80011ac:	f7ff ff2e 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x10 );
 80011b0:	2010      	movs	r0, #16
 80011b2:	f7ff ff2b 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x07 );
 80011b6:	2007      	movs	r0, #7
 80011b8:	f7ff ff28 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x2A );
 80011bc:	202a      	movs	r0, #42	; 0x2a
 80011be:	f7ff ff25 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x47 );
 80011c2:	2047      	movs	r0, #71	; 0x47
 80011c4:	f7ff ff22 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x39 );
 80011c8:	2039      	movs	r0, #57	; 0x39
 80011ca:	f7ff ff1f 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x03 );
 80011ce:	2003      	movs	r0, #3
 80011d0:	f7ff ff1c 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80011d4:	2006      	movs	r0, #6
 80011d6:	f7ff ff19 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x06 );
 80011da:	2006      	movs	r0, #6
 80011dc:	f7ff ff16 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x30 );
 80011e0:	2030      	movs	r0, #48	; 0x30
 80011e2:	f7ff ff13 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x38 );
 80011e6:	2038      	movs	r0, #56	; 0x38
 80011e8:	f7ff ff10 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x0F );
 80011ec:	200f      	movs	r0, #15
 80011ee:	f7ff ff0d 	bl	800100c <LCD_Write_Data>
	
	/* memory access control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x36 ); 	
 80011f2:	2036      	movs	r0, #54	; 0x36
 80011f4:	f7ff fefc 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0xC8 );  // Version 1
 80011f8:	20c8      	movs	r0, #200	; 0xc8
 80011fa:	f7ff ff07 	bl	800100c <LCD_Write_Data>
	/* display inversion */
//	LCD_Write_Cmd ( 0x21 );   // Version 2
	DEBUG_DELAY ();
	
	/* column address control set */
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 
 80011fe:	202a      	movs	r0, #42	; 0x2a
 8001200:	f7ff fef6 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff01 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 800120a:	2000      	movs	r0, #0
 800120c:	f7ff fefe 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001210:	2000      	movs	r0, #0
 8001212:	f7ff fefb 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0xEF );
 8001216:	20ef      	movs	r0, #239	; 0xef
 8001218:	f7ff fef8 	bl	800100c <LCD_Write_Data>
	
	/* page address control set */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( CMD_Set_PAGE ); 
 800121c:	202b      	movs	r0, #43	; 0x2b
 800121e:	f7ff fee7 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x00 );
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fef2 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x00 );
 8001228:	2000      	movs	r0, #0
 800122a:	f7ff feef 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x01 );
 800122e:	2001      	movs	r0, #1
 8001230:	f7ff feec 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( 0x3F );
 8001234:	203f      	movs	r0, #63	; 0x3f
 8001236:	f7ff fee9 	bl	800100c <LCD_Write_Data>
	
	/*  Pixel Format Set (3Ah)  */
	DEBUG_DELAY ();
	LCD_Write_Cmd ( 0x3a ); 
 800123a:	203a      	movs	r0, #58	; 0x3a
 800123c:	f7ff fed8 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( 0x55 );
 8001240:	2055      	movs	r0, #85	; 0x55
 8001242:	f7ff fee3 	bl	800100c <LCD_Write_Data>
	
	/* Sleep Out (11h)  */
	LCD_Write_Cmd ( 0x11 );	
 8001246:	2011      	movs	r0, #17
 8001248:	f7ff fed2 	bl	8000ff0 <LCD_Write_Cmd>
	Delay ( 0xAFFf<<2 );
 800124c:	4803      	ldr	r0, [pc, #12]	; (800125c <LCD_REG_Config+0x230>)
 800124e:	f7ff fe74 	bl	8000f3a <Delay>
	DEBUG_DELAY ();
	
	/* Display ON (29h) */
	LCD_Write_Cmd ( 0x29 ); 
 8001252:	2029      	movs	r0, #41	; 0x29
 8001254:	f7ff fecc 	bl	8000ff0 <LCD_Write_Cmd>
	
	
}
 8001258:	bf00      	nop
 800125a:	bd80      	pop	{r7, pc}
 800125c:	0002bffc 	.word	0x0002bffc

08001260 <LCD_OpenWindow>:



void LCD_OpenWindow ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight )
{	
 8001260:	b590      	push	{r4, r7, lr}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	4604      	mov	r4, r0
 8001268:	4608      	mov	r0, r1
 800126a:	4611      	mov	r1, r2
 800126c:	461a      	mov	r2, r3
 800126e:	4623      	mov	r3, r4
 8001270:	80fb      	strh	r3, [r7, #6]
 8001272:	4603      	mov	r3, r0
 8001274:	80bb      	strh	r3, [r7, #4]
 8001276:	460b      	mov	r3, r1
 8001278:	807b      	strh	r3, [r7, #2]
 800127a:	4613      	mov	r3, r2
 800127c:	803b      	strh	r3, [r7, #0]
	LCD_Write_Cmd ( CMD_Set_COLUMN ); 				
 800127e:	202a      	movs	r0, #42	; 0x2a
 8001280:	f7ff feb6 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( usCOLUMN >> 8  );	 
 8001284:	88fb      	ldrh	r3, [r7, #6]
 8001286:	0a1b      	lsrs	r3, r3, #8
 8001288:	b29b      	uxth	r3, r3
 800128a:	4618      	mov	r0, r3
 800128c:	f7ff febe 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( usCOLUMN & 0xff  );	 
 8001290:	88fb      	ldrh	r3, [r7, #6]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	b29b      	uxth	r3, r3
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff feb8 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) >> 8  );
 800129c:	88fa      	ldrh	r2, [r7, #6]
 800129e:	887b      	ldrh	r3, [r7, #2]
 80012a0:	4413      	add	r3, r2
 80012a2:	3b01      	subs	r3, #1
 80012a4:	121b      	asrs	r3, r3, #8
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff feaf 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( ( usCOLUMN + usWidth - 1 ) & 0xff  );
 80012ae:	88fa      	ldrh	r2, [r7, #6]
 80012b0:	887b      	ldrh	r3, [r7, #2]
 80012b2:	4413      	add	r3, r2
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b29b      	uxth	r3, r3
 80012ba:	b2db      	uxtb	r3, r3
 80012bc:	b29b      	uxth	r3, r3
 80012be:	4618      	mov	r0, r3
 80012c0:	f7ff fea4 	bl	800100c <LCD_Write_Data>

	LCD_Write_Cmd ( CMD_Set_PAGE ); 			     
 80012c4:	202b      	movs	r0, #43	; 0x2b
 80012c6:	f7ff fe93 	bl	8000ff0 <LCD_Write_Cmd>
	LCD_Write_Data ( usPAGE >> 8  );
 80012ca:	88bb      	ldrh	r3, [r7, #4]
 80012cc:	0a1b      	lsrs	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4618      	mov	r0, r3
 80012d2:	f7ff fe9b 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( usPAGE & 0xff  );
 80012d6:	88bb      	ldrh	r3, [r7, #4]
 80012d8:	b2db      	uxtb	r3, r3
 80012da:	b29b      	uxth	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f7ff fe95 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1 ) >> 8 );
 80012e2:	88ba      	ldrh	r2, [r7, #4]
 80012e4:	883b      	ldrh	r3, [r7, #0]
 80012e6:	4413      	add	r3, r2
 80012e8:	3b01      	subs	r3, #1
 80012ea:	121b      	asrs	r3, r3, #8
 80012ec:	b29b      	uxth	r3, r3
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff fe8c 	bl	800100c <LCD_Write_Data>
	LCD_Write_Data ( ( usPAGE + usHeight - 1) & 0xff );
 80012f4:	88ba      	ldrh	r2, [r7, #4]
 80012f6:	883b      	ldrh	r3, [r7, #0]
 80012f8:	4413      	add	r3, r2
 80012fa:	b29b      	uxth	r3, r3
 80012fc:	3b01      	subs	r3, #1
 80012fe:	b29b      	uxth	r3, r3
 8001300:	b2db      	uxtb	r3, r3
 8001302:	b29b      	uxth	r3, r3
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff fe81 	bl	800100c <LCD_Write_Data>
	
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bd90      	pop	{r4, r7, pc}

08001312 <LCD_FillColor>:


void LCD_FillColor ( uint32_t usPoint, uint16_t usColor )
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	460b      	mov	r3, r1
 800131c:	807b      	strh	r3, [r7, #2]
	uint32_t i = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
	
	/* memory write */
	LCD_Write_Cmd ( CMD_SetPixel );	
 8001322:	202c      	movs	r0, #44	; 0x2c
 8001324:	f7ff fe64 	bl	8000ff0 <LCD_Write_Cmd>
		
	for ( i = 0; i < usPoint; i ++ )
 8001328:	2300      	movs	r3, #0
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	e006      	b.n	800133c <LCD_FillColor+0x2a>
		LCD_Write_Data ( usColor );
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff fe6b 	bl	800100c <LCD_Write_Data>
	for ( i = 0; i < usPoint; i ++ )
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3301      	adds	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	429a      	cmp	r2, r3
 8001342:	d3f4      	bcc.n	800132e <LCD_FillColor+0x1c>
		
}
 8001344:	bf00      	nop
 8001346:	bf00      	nop
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <LCD_Clear>:




void LCD_Clear ( uint16_t usCOLUMN, uint16_t usPAGE, uint16_t usWidth, uint16_t usHeight, uint16_t usColor )
{
 800134e:	b590      	push	{r4, r7, lr}
 8001350:	b083      	sub	sp, #12
 8001352:	af00      	add	r7, sp, #0
 8001354:	4604      	mov	r4, r0
 8001356:	4608      	mov	r0, r1
 8001358:	4611      	mov	r1, r2
 800135a:	461a      	mov	r2, r3
 800135c:	4623      	mov	r3, r4
 800135e:	80fb      	strh	r3, [r7, #6]
 8001360:	4603      	mov	r3, r0
 8001362:	80bb      	strh	r3, [r7, #4]
 8001364:	460b      	mov	r3, r1
 8001366:	807b      	strh	r3, [r7, #2]
 8001368:	4613      	mov	r3, r2
 800136a:	803b      	strh	r3, [r7, #0]
	LCD_OpenWindow ( usCOLUMN, usPAGE, usWidth, usHeight );
 800136c:	883b      	ldrh	r3, [r7, #0]
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	88b9      	ldrh	r1, [r7, #4]
 8001372:	88f8      	ldrh	r0, [r7, #6]
 8001374:	f7ff ff74 	bl	8001260 <LCD_OpenWindow>
	LCD_FillColor ( usWidth * usHeight, usColor );		
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	883a      	ldrh	r2, [r7, #0]
 800137c:	fb02 f303 	mul.w	r3, r2, r3
 8001380:	461a      	mov	r2, r3
 8001382:	8b3b      	ldrh	r3, [r7, #24]
 8001384:	4619      	mov	r1, r3
 8001386:	4610      	mov	r0, r2
 8001388:	f7ff ffc3 	bl	8001312 <LCD_FillColor>
	
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	bd90      	pop	{r4, r7, pc}

08001394 <LCD_DisplayInterface>:
    }
	
}


void LCD_DisplayInterface(void){
 8001394:	b580      	push	{r7, lr}
 8001396:	b082      	sub	sp, #8
 8001398:	af00      	add	r7, sp, #0
	LCD_OpenWindow(0, 0, 240, 320);
 800139a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800139e:	22f0      	movs	r2, #240	; 0xf0
 80013a0:	2100      	movs	r1, #0
 80013a2:	2000      	movs	r0, #0
 80013a4:	f7ff ff5c 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 80013a8:	202c      	movs	r0, #44	; 0x2c
 80013aa:	f7ff fe21 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 320; i++){
 80013ae:	2300      	movs	r3, #0
 80013b0:	607b      	str	r3, [r7, #4]
 80013b2:	e01d      	b.n	80013f0 <LCD_DisplayInterface+0x5c>
		for(int j = 0; j < 240; j++){
 80013b4:	2300      	movs	r3, #0
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	e014      	b.n	80013e4 <LCD_DisplayInterface+0x50>
			LCD_Write_Data (interface[319-i][239-j]);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f5c3 729f 	rsb	r2, r3, #318	; 0x13e
 80013c0:	3201      	adds	r2, #1
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	f1c3 01ef 	rsb	r1, r3, #239	; 0xef
 80013c8:	480e      	ldr	r0, [pc, #56]	; (8001404 <LCD_DisplayInterface+0x70>)
 80013ca:	4613      	mov	r3, r2
 80013cc:	011b      	lsls	r3, r3, #4
 80013ce:	1a9b      	subs	r3, r3, r2
 80013d0:	011b      	lsls	r3, r3, #4
 80013d2:	440b      	add	r3, r1
 80013d4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fe17 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 240; j++){
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	3301      	adds	r3, #1
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	2bef      	cmp	r3, #239	; 0xef
 80013e8:	dde7      	ble.n	80013ba <LCD_DisplayInterface+0x26>
	for(int i = 0; i < 320; i++){
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3301      	adds	r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80013f6:	dbdd      	blt.n	80013b4 <LCD_DisplayInterface+0x20>
		}
	}

}
 80013f8:	bf00      	nop
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	080182ac 	.word	0x080182ac

08001408 <LCD_DisplayInterface1>:

void LCD_DisplayInterface1(void){
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af02      	add	r7, sp, #8
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800140e:	2300      	movs	r3, #0
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001416:	22f0      	movs	r2, #240	; 0xf0
 8001418:	2100      	movs	r1, #0
 800141a:	2000      	movs	r0, #0
 800141c:	f7ff ff97 	bl	800134e <LCD_Clear>
	LCD_OpenWindow(100, 70, 31, 200);
 8001420:	23c8      	movs	r3, #200	; 0xc8
 8001422:	221f      	movs	r2, #31
 8001424:	2146      	movs	r1, #70	; 0x46
 8001426:	2064      	movs	r0, #100	; 0x64
 8001428:	f7ff ff1a 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 800142c:	202c      	movs	r0, #44	; 0x2c
 800142e:	f7ff fddf 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 200; i++){
 8001432:	2300      	movs	r3, #0
 8001434:	607b      	str	r3, [r7, #4]
 8001436:	e01b      	b.n	8001470 <LCD_DisplayInterface1+0x68>
		for(int j = 0; j < 31; j++){
 8001438:	2300      	movs	r3, #0
 800143a:	603b      	str	r3, [r7, #0]
 800143c:	e012      	b.n	8001464 <LCD_DisplayInterface1+0x5c>
			LCD_Write_Data (loading[199-i][30-j]);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f1c3 02c7 	rsb	r2, r3, #199	; 0xc7
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f1c3 011e 	rsb	r1, r3, #30
 800144a:	480d      	ldr	r0, [pc, #52]	; (8001480 <LCD_DisplayInterface1+0x78>)
 800144c:	4613      	mov	r3, r2
 800144e:	015b      	lsls	r3, r3, #5
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	440b      	add	r3, r1
 8001454:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001458:	4618      	mov	r0, r3
 800145a:	f7ff fdd7 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 31; j++){
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	3301      	adds	r3, #1
 8001462:	603b      	str	r3, [r7, #0]
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	2b1e      	cmp	r3, #30
 8001468:	dde9      	ble.n	800143e <LCD_DisplayInterface1+0x36>
	for(int i = 0; i < 200; i++){
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	3301      	adds	r3, #1
 800146e:	607b      	str	r3, [r7, #4]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2bc7      	cmp	r3, #199	; 0xc7
 8001474:	dde0      	ble.n	8001438 <LCD_DisplayInterface1+0x30>
		}
	}

}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	0803daac 	.word	0x0803daac

08001484 <LCD_DisplayInterface2>:

void LCD_DisplayInterface2(void){
 8001484:	b580      	push	{r7, lr}
 8001486:	b084      	sub	sp, #16
 8001488:	af02      	add	r7, sp, #8
	LCD_Clear (0, 0, 240, 320, BACKGROUND);
 800148a:	2300      	movs	r3, #0
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001492:	22f0      	movs	r2, #240	; 0xf0
 8001494:	2100      	movs	r1, #0
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff ff59 	bl	800134e <LCD_Clear>
	LCD_OpenWindow(10, 10, 40, 150);
 800149c:	2396      	movs	r3, #150	; 0x96
 800149e:	2228      	movs	r2, #40	; 0x28
 80014a0:	210a      	movs	r1, #10
 80014a2:	200a      	movs	r0, #10
 80014a4:	f7ff fedc 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 80014a8:	202c      	movs	r0, #44	; 0x2c
 80014aa:	f7ff fda1 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 150; i++){
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
 80014b2:	e01c      	b.n	80014ee <LCD_DisplayInterface2+0x6a>
		for(int j = 0; j < 40; j++){
 80014b4:	2300      	movs	r3, #0
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	e013      	b.n	80014e2 <LCD_DisplayInterface2+0x5e>
			LCD_Write_Data (target_height[149-i][39-j]);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	f1c3 0295 	rsb	r2, r3, #149	; 0x95
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	f1c3 0127 	rsb	r1, r3, #39	; 0x27
 80014c6:	480e      	ldr	r0, [pc, #56]	; (8001500 <LCD_DisplayInterface2+0x7c>)
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fd98 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 40; j++){
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	3301      	adds	r3, #1
 80014e0:	603b      	str	r3, [r7, #0]
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2b27      	cmp	r3, #39	; 0x27
 80014e6:	dde8      	ble.n	80014ba <LCD_DisplayInterface2+0x36>
	for(int i = 0; i < 150; i++){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3301      	adds	r3, #1
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2b95      	cmp	r3, #149	; 0x95
 80014f2:	dddf      	ble.n	80014b4 <LCD_DisplayInterface2+0x30>
		}
	}

}
 80014f4:	bf00      	nop
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	08040b1c 	.word	0x08040b1c

08001504 <LCD_Display0>:
/**
 * @param n: first or second digit
 */
void LCD_Display0(int n){
 8001504:	b580      	push	{r7, lr}
 8001506:	b084      	sub	sp, #16
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(90, 175-n*65, 79, 50);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	b29b      	uxth	r3, r3
 8001510:	461a      	mov	r2, r3
 8001512:	0292      	lsls	r2, r2, #10
 8001514:	1ad2      	subs	r2, r2, r3
 8001516:	0192      	lsls	r2, r2, #6
 8001518:	1ad3      	subs	r3, r2, r3
 800151a:	b29b      	uxth	r3, r3
 800151c:	33af      	adds	r3, #175	; 0xaf
 800151e:	b299      	uxth	r1, r3
 8001520:	2332      	movs	r3, #50	; 0x32
 8001522:	224f      	movs	r2, #79	; 0x4f
 8001524:	205a      	movs	r0, #90	; 0x5a
 8001526:	f7ff fe9b 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 800152a:	202c      	movs	r0, #44	; 0x2c
 800152c:	f7ff fd60 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 50; i++){
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	e01d      	b.n	8001572 <LCD_Display0+0x6e>
		for(int j = 0; j < 79; j++){
 8001536:	2300      	movs	r3, #0
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	e014      	b.n	8001566 <LCD_Display0+0x62>
			LCD_Write_Data (zero[49-i][78-j]);
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f1c3 0231 	rsb	r2, r3, #49	; 0x31
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	f1c3 014e 	rsb	r1, r3, #78	; 0x4e
 8001548:	480e      	ldr	r0, [pc, #56]	; (8001584 <LCD_Display0+0x80>)
 800154a:	4613      	mov	r3, r2
 800154c:	009b      	lsls	r3, r3, #2
 800154e:	4413      	add	r3, r2
 8001550:	011b      	lsls	r3, r3, #4
 8001552:	1a9b      	subs	r3, r3, r2
 8001554:	440b      	add	r3, r1
 8001556:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff fd56 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 79; j++){
 8001560:	68bb      	ldr	r3, [r7, #8]
 8001562:	3301      	adds	r3, #1
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	2b4e      	cmp	r3, #78	; 0x4e
 800156a:	dde7      	ble.n	800153c <LCD_Display0+0x38>
	for(int i = 0; i < 50; i++){
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	3301      	adds	r3, #1
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	2b31      	cmp	r3, #49	; 0x31
 8001576:	ddde      	ble.n	8001536 <LCD_Display0+0x32>
		}
	}
}
 8001578:	bf00      	nop
 800157a:	bf00      	nop
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	08006684 	.word	0x08006684

08001588 <LCD_Display1>:

void LCD_Display1(int n){
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(90, 187-n*65, 76, 28);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	b29b      	uxth	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	0292      	lsls	r2, r2, #10
 8001598:	1ad2      	subs	r2, r2, r3
 800159a:	0192      	lsls	r2, r2, #6
 800159c:	1ad3      	subs	r3, r2, r3
 800159e:	b29b      	uxth	r3, r3
 80015a0:	33bb      	adds	r3, #187	; 0xbb
 80015a2:	b299      	uxth	r1, r3
 80015a4:	231c      	movs	r3, #28
 80015a6:	224c      	movs	r2, #76	; 0x4c
 80015a8:	205a      	movs	r0, #90	; 0x5a
 80015aa:	f7ff fe59 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 80015ae:	202c      	movs	r0, #44	; 0x2c
 80015b0:	f7ff fd1e 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 28; i++){
 80015b4:	2300      	movs	r3, #0
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	e01b      	b.n	80015f2 <LCD_Display1+0x6a>
		for(int j = 0; j < 76; j++){
 80015ba:	2300      	movs	r3, #0
 80015bc:	60bb      	str	r3, [r7, #8]
 80015be:	e012      	b.n	80015e6 <LCD_Display1+0x5e>
			LCD_Write_Data (one[27-i][75-j]);
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f1c3 021b 	rsb	r2, r3, #27
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 80015cc:	490d      	ldr	r1, [pc, #52]	; (8001604 <LCD_Display1+0x7c>)
 80015ce:	204c      	movs	r0, #76	; 0x4c
 80015d0:	fb00 f202 	mul.w	r2, r0, r2
 80015d4:	4413      	add	r3, r2
 80015d6:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fd16 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 76; j++){
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	3301      	adds	r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]
 80015e8:	2b4b      	cmp	r3, #75	; 0x4b
 80015ea:	dde9      	ble.n	80015c0 <LCD_Display1+0x38>
	for(int i = 0; i < 28; i++){
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	3301      	adds	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	2b1b      	cmp	r3, #27
 80015f6:	dde0      	ble.n	80015ba <LCD_Display1+0x32>
		}
	}
}
 80015f8:	bf00      	nop
 80015fa:	bf00      	nop
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	08008560 	.word	0x08008560

08001608 <LCD_Display2>:

void LCD_Display2(int n){
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(90, 175-n*65, 77, 47);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	b29b      	uxth	r3, r3
 8001614:	461a      	mov	r2, r3
 8001616:	0292      	lsls	r2, r2, #10
 8001618:	1ad2      	subs	r2, r2, r3
 800161a:	0192      	lsls	r2, r2, #6
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	b29b      	uxth	r3, r3
 8001620:	33af      	adds	r3, #175	; 0xaf
 8001622:	b299      	uxth	r1, r3
 8001624:	232f      	movs	r3, #47	; 0x2f
 8001626:	224d      	movs	r2, #77	; 0x4d
 8001628:	205a      	movs	r0, #90	; 0x5a
 800162a:	f7ff fe19 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 800162e:	202c      	movs	r0, #44	; 0x2c
 8001630:	f7ff fcde 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 47; i++){
 8001634:	2300      	movs	r3, #0
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	e01b      	b.n	8001672 <LCD_Display2+0x6a>
		for(int j = 0; j < 77; j++){
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	e012      	b.n	8001666 <LCD_Display2+0x5e>
			LCD_Write_Data (two[46-i][76-j]);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f1c3 022e 	rsb	r2, r3, #46	; 0x2e
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	f1c3 034c 	rsb	r3, r3, #76	; 0x4c
 800164c:	490d      	ldr	r1, [pc, #52]	; (8001684 <LCD_Display2+0x7c>)
 800164e:	204d      	movs	r0, #77	; 0x4d
 8001650:	fb00 f202 	mul.w	r2, r0, r2
 8001654:	4413      	add	r3, r2
 8001656:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fcd6 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 77; j++){
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	3301      	adds	r3, #1
 8001664:	60bb      	str	r3, [r7, #8]
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	2b4c      	cmp	r3, #76	; 0x4c
 800166a:	dde9      	ble.n	8001640 <LCD_Display2+0x38>
	for(int i = 0; i < 47; i++){
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	3301      	adds	r3, #1
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	2b2e      	cmp	r3, #46	; 0x2e
 8001676:	dde0      	ble.n	800163a <LCD_Display2+0x32>
		}
	}
}
 8001678:	bf00      	nop
 800167a:	bf00      	nop
 800167c:	3710      	adds	r7, #16
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	08009600 	.word	0x08009600

08001688 <LCD_Display3>:

void LCD_Display3(int n){
 8001688:	b580      	push	{r7, lr}
 800168a:	b084      	sub	sp, #16
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(90, 175-n*65, 79, 46);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	b29b      	uxth	r3, r3
 8001694:	461a      	mov	r2, r3
 8001696:	0292      	lsls	r2, r2, #10
 8001698:	1ad2      	subs	r2, r2, r3
 800169a:	0192      	lsls	r2, r2, #6
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	b29b      	uxth	r3, r3
 80016a0:	33af      	adds	r3, #175	; 0xaf
 80016a2:	b299      	uxth	r1, r3
 80016a4:	232e      	movs	r3, #46	; 0x2e
 80016a6:	224f      	movs	r2, #79	; 0x4f
 80016a8:	205a      	movs	r0, #90	; 0x5a
 80016aa:	f7ff fdd9 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 80016ae:	202c      	movs	r0, #44	; 0x2c
 80016b0:	f7ff fc9e 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 46; i++){
 80016b4:	2300      	movs	r3, #0
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	e01d      	b.n	80016f6 <LCD_Display3+0x6e>
		for(int j = 0; j < 79; j++){
 80016ba:	2300      	movs	r3, #0
 80016bc:	60bb      	str	r3, [r7, #8]
 80016be:	e014      	b.n	80016ea <LCD_Display3+0x62>
			LCD_Write_Data (three[45-i][78-j]);
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f1c3 022d 	rsb	r2, r3, #45	; 0x2d
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	f1c3 014e 	rsb	r1, r3, #78	; 0x4e
 80016cc:	480e      	ldr	r0, [pc, #56]	; (8001708 <LCD_Display3+0x80>)
 80016ce:	4613      	mov	r3, r2
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	4413      	add	r3, r2
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	440b      	add	r3, r1
 80016da:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fc94 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 79; j++){
 80016e4:	68bb      	ldr	r3, [r7, #8]
 80016e6:	3301      	adds	r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b4e      	cmp	r3, #78	; 0x4e
 80016ee:	dde7      	ble.n	80016c0 <LCD_Display3+0x38>
	for(int i = 0; i < 46; i++){
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	3301      	adds	r3, #1
 80016f4:	60fb      	str	r3, [r7, #12]
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	2b2d      	cmp	r3, #45	; 0x2d
 80016fa:	ddde      	ble.n	80016ba <LCD_Display3+0x32>
		}
	}
}
 80016fc:	bf00      	nop
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	0800b248 	.word	0x0800b248

0800170c <LCD_Display4>:

void LCD_Display4(int n){
 800170c:	b580      	push	{r7, lr}
 800170e:	b084      	sub	sp, #16
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(90, 175-n*65, 76, 53);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	b29b      	uxth	r3, r3
 8001718:	461a      	mov	r2, r3
 800171a:	0292      	lsls	r2, r2, #10
 800171c:	1ad2      	subs	r2, r2, r3
 800171e:	0192      	lsls	r2, r2, #6
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	b29b      	uxth	r3, r3
 8001724:	33af      	adds	r3, #175	; 0xaf
 8001726:	b299      	uxth	r1, r3
 8001728:	2335      	movs	r3, #53	; 0x35
 800172a:	224c      	movs	r2, #76	; 0x4c
 800172c:	205a      	movs	r0, #90	; 0x5a
 800172e:	f7ff fd97 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 8001732:	202c      	movs	r0, #44	; 0x2c
 8001734:	f7ff fc5c 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 53; i++){
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e01b      	b.n	8001776 <LCD_Display4+0x6a>
		for(int j = 0; j < 76; j++){
 800173e:	2300      	movs	r3, #0
 8001740:	60bb      	str	r3, [r7, #8]
 8001742:	e012      	b.n	800176a <LCD_Display4+0x5e>
			LCD_Write_Data (four[52-i][75-j]);
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	f1c3 0234 	rsb	r2, r3, #52	; 0x34
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 8001750:	490d      	ldr	r1, [pc, #52]	; (8001788 <LCD_Display4+0x7c>)
 8001752:	204c      	movs	r0, #76	; 0x4c
 8001754:	fb00 f202 	mul.w	r2, r0, r2
 8001758:	4413      	add	r3, r2
 800175a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff fc54 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 76; j++){
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	3301      	adds	r3, #1
 8001768:	60bb      	str	r3, [r7, #8]
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2b4b      	cmp	r3, #75	; 0x4b
 800176e:	dde9      	ble.n	8001744 <LCD_Display4+0x38>
	for(int i = 0; i < 53; i++){
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	3301      	adds	r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	2b34      	cmp	r3, #52	; 0x34
 800177a:	dde0      	ble.n	800173e <LCD_Display4+0x32>
		}
	}
}
 800177c:	bf00      	nop
 800177e:	bf00      	nop
 8001780:	3710      	adds	r7, #16
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	0800ceac 	.word	0x0800ceac

0800178c <LCD_Display5>:

void LCD_Display5(int n){
 800178c:	b580      	push	{r7, lr}
 800178e:	b084      	sub	sp, #16
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(90, 175-n*65, 78, 47);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	0292      	lsls	r2, r2, #10
 800179c:	1ad2      	subs	r2, r2, r3
 800179e:	0192      	lsls	r2, r2, #6
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	33af      	adds	r3, #175	; 0xaf
 80017a6:	b299      	uxth	r1, r3
 80017a8:	232f      	movs	r3, #47	; 0x2f
 80017aa:	224e      	movs	r2, #78	; 0x4e
 80017ac:	205a      	movs	r0, #90	; 0x5a
 80017ae:	f7ff fd57 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 80017b2:	202c      	movs	r0, #44	; 0x2c
 80017b4:	f7ff fc1c 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 47; i++){
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	e01b      	b.n	80017f6 <LCD_Display5+0x6a>
		for(int j = 0; j < 78; j++){
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	e012      	b.n	80017ea <LCD_Display5+0x5e>
			LCD_Write_Data (five[46-i][77-j]);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	f1c3 022e 	rsb	r2, r3, #46	; 0x2e
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f1c3 034d 	rsb	r3, r3, #77	; 0x4d
 80017d0:	490d      	ldr	r1, [pc, #52]	; (8001808 <LCD_Display5+0x7c>)
 80017d2:	204e      	movs	r0, #78	; 0x4e
 80017d4:	fb00 f202 	mul.w	r2, r0, r2
 80017d8:	4413      	add	r3, r2
 80017da:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fc14 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 78; j++){
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	3301      	adds	r3, #1
 80017e8:	60bb      	str	r3, [r7, #8]
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	2b4d      	cmp	r3, #77	; 0x4d
 80017ee:	dde9      	ble.n	80017c4 <LCD_Display5+0x38>
	for(int i = 0; i < 47; i++){
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	3301      	adds	r3, #1
 80017f4:	60fb      	str	r3, [r7, #12]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	2b2e      	cmp	r3, #46	; 0x2e
 80017fa:	dde0      	ble.n	80017be <LCD_Display5+0x32>
		}
	}
}
 80017fc:	bf00      	nop
 80017fe:	bf00      	nop
 8001800:	3710      	adds	r7, #16
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	0800ee24 	.word	0x0800ee24

0800180c <LCD_Display6>:

void LCD_Display6(int n){
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(90, 175-n*65, 79, 50);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	b29b      	uxth	r3, r3
 8001818:	461a      	mov	r2, r3
 800181a:	0292      	lsls	r2, r2, #10
 800181c:	1ad2      	subs	r2, r2, r3
 800181e:	0192      	lsls	r2, r2, #6
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	b29b      	uxth	r3, r3
 8001824:	33af      	adds	r3, #175	; 0xaf
 8001826:	b299      	uxth	r1, r3
 8001828:	2332      	movs	r3, #50	; 0x32
 800182a:	224f      	movs	r2, #79	; 0x4f
 800182c:	205a      	movs	r0, #90	; 0x5a
 800182e:	f7ff fd17 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 8001832:	202c      	movs	r0, #44	; 0x2c
 8001834:	f7ff fbdc 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 50; i++){
 8001838:	2300      	movs	r3, #0
 800183a:	60fb      	str	r3, [r7, #12]
 800183c:	e01d      	b.n	800187a <LCD_Display6+0x6e>
		for(int j = 0; j < 79; j++){
 800183e:	2300      	movs	r3, #0
 8001840:	60bb      	str	r3, [r7, #8]
 8001842:	e014      	b.n	800186e <LCD_Display6+0x62>
			LCD_Write_Data (six[49-i][78-j]);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f1c3 0231 	rsb	r2, r3, #49	; 0x31
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	f1c3 014e 	rsb	r1, r3, #78	; 0x4e
 8001850:	480e      	ldr	r0, [pc, #56]	; (800188c <LCD_Display6+0x80>)
 8001852:	4613      	mov	r3, r2
 8001854:	009b      	lsls	r3, r3, #2
 8001856:	4413      	add	r3, r2
 8001858:	011b      	lsls	r3, r3, #4
 800185a:	1a9b      	subs	r3, r3, r2
 800185c:	440b      	add	r3, r1
 800185e:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fbd2 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 79; j++){
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	3301      	adds	r3, #1
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
 8001870:	2b4e      	cmp	r3, #78	; 0x4e
 8001872:	dde7      	ble.n	8001844 <LCD_Display6+0x38>
	for(int i = 0; i < 50; i++){
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	3301      	adds	r3, #1
 8001878:	60fb      	str	r3, [r7, #12]
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	2b31      	cmp	r3, #49	; 0x31
 800187e:	ddde      	ble.n	800183e <LCD_Display6+0x32>
		}
	}
}
 8001880:	bf00      	nop
 8001882:	bf00      	nop
 8001884:	3710      	adds	r7, #16
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	08010ac8 	.word	0x08010ac8

08001890 <LCD_Display7>:

void LCD_Display7(int n){
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(90, 175-n*65, 76, 46);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	b29b      	uxth	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	0292      	lsls	r2, r2, #10
 80018a0:	1ad2      	subs	r2, r2, r3
 80018a2:	0192      	lsls	r2, r2, #6
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	33af      	adds	r3, #175	; 0xaf
 80018aa:	b299      	uxth	r1, r3
 80018ac:	232e      	movs	r3, #46	; 0x2e
 80018ae:	224c      	movs	r2, #76	; 0x4c
 80018b0:	205a      	movs	r0, #90	; 0x5a
 80018b2:	f7ff fcd5 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 80018b6:	202c      	movs	r0, #44	; 0x2c
 80018b8:	f7ff fb9a 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 46; i++){
 80018bc:	2300      	movs	r3, #0
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	e01b      	b.n	80018fa <LCD_Display7+0x6a>
		for(int j = 0; j < 76; j++){
 80018c2:	2300      	movs	r3, #0
 80018c4:	60bb      	str	r3, [r7, #8]
 80018c6:	e012      	b.n	80018ee <LCD_Display7+0x5e>
			LCD_Write_Data (seven[45-i][75-j]);
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f1c3 022d 	rsb	r2, r3, #45	; 0x2d
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	f1c3 034b 	rsb	r3, r3, #75	; 0x4b
 80018d4:	490d      	ldr	r1, [pc, #52]	; (800190c <LCD_Display7+0x7c>)
 80018d6:	204c      	movs	r0, #76	; 0x4c
 80018d8:	fb00 f202 	mul.w	r2, r0, r2
 80018dc:	4413      	add	r3, r2
 80018de:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80018e2:	4618      	mov	r0, r3
 80018e4:	f7ff fb92 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 76; j++){
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	3301      	adds	r3, #1
 80018ec:	60bb      	str	r3, [r7, #8]
 80018ee:	68bb      	ldr	r3, [r7, #8]
 80018f0:	2b4b      	cmp	r3, #75	; 0x4b
 80018f2:	dde9      	ble.n	80018c8 <LCD_Display7+0x38>
	for(int i = 0; i < 46; i++){
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3301      	adds	r3, #1
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2b2d      	cmp	r3, #45	; 0x2d
 80018fe:	dde0      	ble.n	80018c2 <LCD_Display7+0x32>
		}
	}
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	080129a4 	.word	0x080129a4

08001910 <LCD_Display8>:

void LCD_Display8(int n){
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(90, 175-n*65, 79, 50);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	b29b      	uxth	r3, r3
 800191c:	461a      	mov	r2, r3
 800191e:	0292      	lsls	r2, r2, #10
 8001920:	1ad2      	subs	r2, r2, r3
 8001922:	0192      	lsls	r2, r2, #6
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	b29b      	uxth	r3, r3
 8001928:	33af      	adds	r3, #175	; 0xaf
 800192a:	b299      	uxth	r1, r3
 800192c:	2332      	movs	r3, #50	; 0x32
 800192e:	224f      	movs	r2, #79	; 0x4f
 8001930:	205a      	movs	r0, #90	; 0x5a
 8001932:	f7ff fc95 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 8001936:	202c      	movs	r0, #44	; 0x2c
 8001938:	f7ff fb5a 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 50; i++){
 800193c:	2300      	movs	r3, #0
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	e01d      	b.n	800197e <LCD_Display8+0x6e>
		for(int j = 0; j < 79; j++){
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	e014      	b.n	8001972 <LCD_Display8+0x62>
			LCD_Write_Data (eight[49-i][78-j]);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f1c3 0231 	rsb	r2, r3, #49	; 0x31
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f1c3 014e 	rsb	r1, r3, #78	; 0x4e
 8001954:	480e      	ldr	r0, [pc, #56]	; (8001990 <LCD_Display8+0x80>)
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	011b      	lsls	r3, r3, #4
 800195e:	1a9b      	subs	r3, r3, r2
 8001960:	440b      	add	r3, r1
 8001962:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fb50 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 79; j++){
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	3301      	adds	r3, #1
 8001970:	60bb      	str	r3, [r7, #8]
 8001972:	68bb      	ldr	r3, [r7, #8]
 8001974:	2b4e      	cmp	r3, #78	; 0x4e
 8001976:	dde7      	ble.n	8001948 <LCD_Display8+0x38>
	for(int i = 0; i < 50; i++){
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	3301      	adds	r3, #1
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	2b31      	cmp	r3, #49	; 0x31
 8001982:	ddde      	ble.n	8001942 <LCD_Display8+0x32>
		}
	}
}
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	080144f4 	.word	0x080144f4

08001994 <LCD_Display9>:

void LCD_Display9(int n){
 8001994:	b580      	push	{r7, lr}
 8001996:	b084      	sub	sp, #16
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
	LCD_OpenWindow(90, 175-n*65, 79, 50);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	b29b      	uxth	r3, r3
 80019a0:	461a      	mov	r2, r3
 80019a2:	0292      	lsls	r2, r2, #10
 80019a4:	1ad2      	subs	r2, r2, r3
 80019a6:	0192      	lsls	r2, r2, #6
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	33af      	adds	r3, #175	; 0xaf
 80019ae:	b299      	uxth	r1, r3
 80019b0:	2332      	movs	r3, #50	; 0x32
 80019b2:	224f      	movs	r2, #79	; 0x4f
 80019b4:	205a      	movs	r0, #90	; 0x5a
 80019b6:	f7ff fc53 	bl	8001260 <LCD_OpenWindow>
	LCD_Write_Cmd ( CMD_SetPixel );
 80019ba:	202c      	movs	r0, #44	; 0x2c
 80019bc:	f7ff fb18 	bl	8000ff0 <LCD_Write_Cmd>
	for(int i = 0; i < 50; i++){
 80019c0:	2300      	movs	r3, #0
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	e01d      	b.n	8001a02 <LCD_Display9+0x6e>
		for(int j = 0; j < 79; j++){
 80019c6:	2300      	movs	r3, #0
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	e014      	b.n	80019f6 <LCD_Display9+0x62>
			LCD_Write_Data (nine[49-i][78-j]);
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f1c3 0231 	rsb	r2, r3, #49	; 0x31
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	f1c3 014e 	rsb	r1, r3, #78	; 0x4e
 80019d8:	480e      	ldr	r0, [pc, #56]	; (8001a14 <LCD_Display9+0x80>)
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	1a9b      	subs	r3, r3, r2
 80019e4:	440b      	add	r3, r1
 80019e6:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fb0e 	bl	800100c <LCD_Write_Data>
		for(int j = 0; j < 79; j++){
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	3301      	adds	r3, #1
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	2b4e      	cmp	r3, #78	; 0x4e
 80019fa:	dde7      	ble.n	80019cc <LCD_Display9+0x38>
	for(int i = 0; i < 50; i++){
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	3301      	adds	r3, #1
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2b31      	cmp	r3, #49	; 0x31
 8001a06:	ddde      	ble.n	80019c6 <LCD_Display9+0x32>
		}
	}
}
 8001a08:	bf00      	nop
 8001a0a:	bf00      	nop
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	080163d0 	.word	0x080163d0

08001a18 <LCD_DisplayNum>:

void LCD_DisplayNum(int num){
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af02      	add	r7, sp, #8
 8001a1e:	6078      	str	r0, [r7, #4]
	LCD_Clear (90, 110, 79, 120, BACKGROUND);
 8001a20:	2300      	movs	r3, #0
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	2378      	movs	r3, #120	; 0x78
 8001a26:	224f      	movs	r2, #79	; 0x4f
 8001a28:	216e      	movs	r1, #110	; 0x6e
 8001a2a:	205a      	movs	r0, #90	; 0x5a
 8001a2c:	f7ff fc8f 	bl	800134e <LCD_Clear>
	switch(num/10){
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a4c      	ldr	r2, [pc, #304]	; (8001b64 <LCD_DisplayNum+0x14c>)
 8001a34:	fb82 1203 	smull	r1, r2, r2, r3
 8001a38:	1092      	asrs	r2, r2, #2
 8001a3a:	17db      	asrs	r3, r3, #31
 8001a3c:	1ad3      	subs	r3, r2, r3
 8001a3e:	2b09      	cmp	r3, #9
 8001a40:	d83e      	bhi.n	8001ac0 <LCD_DisplayNum+0xa8>
 8001a42:	a201      	add	r2, pc, #4	; (adr r2, 8001a48 <LCD_DisplayNum+0x30>)
 8001a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a48:	08001a71 	.word	0x08001a71
 8001a4c:	08001a79 	.word	0x08001a79
 8001a50:	08001a81 	.word	0x08001a81
 8001a54:	08001a89 	.word	0x08001a89
 8001a58:	08001a91 	.word	0x08001a91
 8001a5c:	08001a99 	.word	0x08001a99
 8001a60:	08001aa1 	.word	0x08001aa1
 8001a64:	08001aa9 	.word	0x08001aa9
 8001a68:	08001ab1 	.word	0x08001ab1
 8001a6c:	08001ab9 	.word	0x08001ab9
		case 0:
			LCD_Display0(1);
 8001a70:	2001      	movs	r0, #1
 8001a72:	f7ff fd47 	bl	8001504 <LCD_Display0>
			break;
 8001a76:	e023      	b.n	8001ac0 <LCD_DisplayNum+0xa8>
		case 1:
			LCD_Display1(1);
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7ff fd85 	bl	8001588 <LCD_Display1>
			break;
 8001a7e:	e01f      	b.n	8001ac0 <LCD_DisplayNum+0xa8>
		case 2:
			LCD_Display2(1);
 8001a80:	2001      	movs	r0, #1
 8001a82:	f7ff fdc1 	bl	8001608 <LCD_Display2>
			break;
 8001a86:	e01b      	b.n	8001ac0 <LCD_DisplayNum+0xa8>
		case 3:
			LCD_Display3(1);
 8001a88:	2001      	movs	r0, #1
 8001a8a:	f7ff fdfd 	bl	8001688 <LCD_Display3>
			break;
 8001a8e:	e017      	b.n	8001ac0 <LCD_DisplayNum+0xa8>
		case 4:
			LCD_Display4(1);
 8001a90:	2001      	movs	r0, #1
 8001a92:	f7ff fe3b 	bl	800170c <LCD_Display4>
			break;
 8001a96:	e013      	b.n	8001ac0 <LCD_DisplayNum+0xa8>
		case 5:
			LCD_Display5(1);
 8001a98:	2001      	movs	r0, #1
 8001a9a:	f7ff fe77 	bl	800178c <LCD_Display5>
			break;
 8001a9e:	e00f      	b.n	8001ac0 <LCD_DisplayNum+0xa8>
		case 6:
			LCD_Display6(1);
 8001aa0:	2001      	movs	r0, #1
 8001aa2:	f7ff feb3 	bl	800180c <LCD_Display6>
			break;
 8001aa6:	e00b      	b.n	8001ac0 <LCD_DisplayNum+0xa8>
		case 7:
			LCD_Display7(1);
 8001aa8:	2001      	movs	r0, #1
 8001aaa:	f7ff fef1 	bl	8001890 <LCD_Display7>
			break;
 8001aae:	e007      	b.n	8001ac0 <LCD_DisplayNum+0xa8>
		case 8:
			LCD_Display8(1);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f7ff ff2d 	bl	8001910 <LCD_Display8>
			break;
 8001ab6:	e003      	b.n	8001ac0 <LCD_DisplayNum+0xa8>
		case 9:
			LCD_Display9(1);
 8001ab8:	2001      	movs	r0, #1
 8001aba:	f7ff ff6b 	bl	8001994 <LCD_Display9>
			break;
 8001abe:	bf00      	nop
	}
	switch(num%10){
 8001ac0:	6879      	ldr	r1, [r7, #4]
 8001ac2:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <LCD_DisplayNum+0x14c>)
 8001ac4:	fb83 2301 	smull	r2, r3, r3, r1
 8001ac8:	109a      	asrs	r2, r3, #2
 8001aca:	17cb      	asrs	r3, r1, #31
 8001acc:	1ad2      	subs	r2, r2, r3
 8001ace:	4613      	mov	r3, r2
 8001ad0:	009b      	lsls	r3, r3, #2
 8001ad2:	4413      	add	r3, r2
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	1aca      	subs	r2, r1, r3
 8001ad8:	2a09      	cmp	r2, #9
 8001ada:	d83f      	bhi.n	8001b5c <LCD_DisplayNum+0x144>
 8001adc:	a301      	add	r3, pc, #4	; (adr r3, 8001ae4 <LCD_DisplayNum+0xcc>)
 8001ade:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
 8001ae2:	bf00      	nop
 8001ae4:	08001b0d 	.word	0x08001b0d
 8001ae8:	08001b15 	.word	0x08001b15
 8001aec:	08001b1d 	.word	0x08001b1d
 8001af0:	08001b25 	.word	0x08001b25
 8001af4:	08001b2d 	.word	0x08001b2d
 8001af8:	08001b35 	.word	0x08001b35
 8001afc:	08001b3d 	.word	0x08001b3d
 8001b00:	08001b45 	.word	0x08001b45
 8001b04:	08001b4d 	.word	0x08001b4d
 8001b08:	08001b55 	.word	0x08001b55

		case 0:
			LCD_Display0(0);
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff fcf9 	bl	8001504 <LCD_Display0>
			break;
 8001b12:	e023      	b.n	8001b5c <LCD_DisplayNum+0x144>
		case 1:
			LCD_Display1(0);
 8001b14:	2000      	movs	r0, #0
 8001b16:	f7ff fd37 	bl	8001588 <LCD_Display1>
			break;
 8001b1a:	e01f      	b.n	8001b5c <LCD_DisplayNum+0x144>
		case 2:
			LCD_Display2(0);
 8001b1c:	2000      	movs	r0, #0
 8001b1e:	f7ff fd73 	bl	8001608 <LCD_Display2>
			break;
 8001b22:	e01b      	b.n	8001b5c <LCD_DisplayNum+0x144>
		case 3:
			LCD_Display3(0);
 8001b24:	2000      	movs	r0, #0
 8001b26:	f7ff fdaf 	bl	8001688 <LCD_Display3>
			break;
 8001b2a:	e017      	b.n	8001b5c <LCD_DisplayNum+0x144>
		case 4:
			LCD_Display4(0);
 8001b2c:	2000      	movs	r0, #0
 8001b2e:	f7ff fded 	bl	800170c <LCD_Display4>
			break;
 8001b32:	e013      	b.n	8001b5c <LCD_DisplayNum+0x144>
		case 5:
			LCD_Display5(0);
 8001b34:	2000      	movs	r0, #0
 8001b36:	f7ff fe29 	bl	800178c <LCD_Display5>
			break;
 8001b3a:	e00f      	b.n	8001b5c <LCD_DisplayNum+0x144>
		case 6:
			LCD_Display6(0);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff fe65 	bl	800180c <LCD_Display6>
			break;
 8001b42:	e00b      	b.n	8001b5c <LCD_DisplayNum+0x144>
		case 7:
			LCD_Display7(0);
 8001b44:	2000      	movs	r0, #0
 8001b46:	f7ff fea3 	bl	8001890 <LCD_Display7>
			break;
 8001b4a:	e007      	b.n	8001b5c <LCD_DisplayNum+0x144>
		case 8:
			LCD_Display8(0);
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f7ff fedf 	bl	8001910 <LCD_Display8>
			break;
 8001b52:	e003      	b.n	8001b5c <LCD_DisplayNum+0x144>
		case 9:
			LCD_Display9(0);
 8001b54:	2000      	movs	r0, #0
 8001b56:	f7ff ff1d 	bl	8001994 <LCD_Display9>
			break;
 8001b5a:	bf00      	nop
	}
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	66666667 	.word	0x66666667

08001b68 <led_blink>:
#define ECHO_PORT GPIOA
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void led_blink(){
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2120      	movs	r1, #32
 8001b70:	4817      	ldr	r0, [pc, #92]	; (8001bd0 <led_blink+0x68>)
 8001b72:	f002 f8a6 	bl	8003cc2 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001b76:	2064      	movs	r0, #100	; 0x64
 8001b78:	f001 fdc6 	bl	8003708 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	2120      	movs	r1, #32
 8001b80:	4813      	ldr	r0, [pc, #76]	; (8001bd0 <led_blink+0x68>)
 8001b82:	f002 f89e 	bl	8003cc2 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001b86:	2032      	movs	r0, #50	; 0x32
 8001b88:	f001 fdbe 	bl	8003708 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	2120      	movs	r1, #32
 8001b90:	480f      	ldr	r0, [pc, #60]	; (8001bd0 <led_blink+0x68>)
 8001b92:	f002 f896 	bl	8003cc2 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001b96:	2064      	movs	r0, #100	; 0x64
 8001b98:	f001 fdb6 	bl	8003708 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	480b      	ldr	r0, [pc, #44]	; (8001bd0 <led_blink+0x68>)
 8001ba2:	f002 f88e 	bl	8003cc2 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001ba6:	2032      	movs	r0, #50	; 0x32
 8001ba8:	f001 fdae 	bl	8003708 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bac:	2200      	movs	r2, #0
 8001bae:	2120      	movs	r1, #32
 8001bb0:	4807      	ldr	r0, [pc, #28]	; (8001bd0 <led_blink+0x68>)
 8001bb2:	f002 f886 	bl	8003cc2 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8001bb6:	2064      	movs	r0, #100	; 0x64
 8001bb8:	f001 fda6 	bl	8003708 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001bbc:	2201      	movs	r2, #1
 8001bbe:	2120      	movs	r1, #32
 8001bc0:	4803      	ldr	r0, [pc, #12]	; (8001bd0 <led_blink+0x68>)
 8001bc2:	f002 f87e 	bl	8003cc2 <HAL_GPIO_WritePin>
	  HAL_Delay(50);
 8001bc6:	2032      	movs	r0, #50	; 0x32
 8001bc8:	f001 fd9e 	bl	8003708 <HAL_Delay>
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	40010c00 	.word	0x40010c00

08001bd4 <stepper_up>:

void stepper_up(){
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8001bd8:	2201      	movs	r2, #1
 8001bda:	2120      	movs	r1, #32
 8001bdc:	4808      	ldr	r0, [pc, #32]	; (8001c00 <stepper_up+0x2c>)
 8001bde:	f002 f870 	bl	8003cc2 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8001be2:	2201      	movs	r2, #1
 8001be4:	2140      	movs	r1, #64	; 0x40
 8001be6:	4806      	ldr	r0, [pc, #24]	; (8001c00 <stepper_up+0x2c>)
 8001be8:	f002 f86b 	bl	8003cc2 <HAL_GPIO_WritePin>
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <stepper_up+0x30>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1);
 8001bf4:	4b03      	ldr	r3, [pc, #12]	; (8001c04 <stepper_up+0x30>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001bfc:	bf00      	nop
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40011800 	.word	0x40011800
 8001c04:	200001f0 	.word	0x200001f0

08001c08 <stepper_stop>:

void stepper_stop(){
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8001c0c:	4b05      	ldr	r3, [pc, #20]	; (8001c24 <stepper_stop+0x1c>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2200      	movs	r2, #0
 8001c12:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 8001c14:	4b03      	ldr	r3, [pc, #12]	; (8001c24 <stepper_stop+0x1c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	bc80      	pop	{r7}
 8001c22:	4770      	bx	lr
 8001c24:	200001f0 	.word	0x200001f0

08001c28 <fan>:

int fanspeed = 0;
int fan_speed_arr[4] = {0, 399, 699, 999};
int fan_mode = 0;
void fan(){
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fan_speed_arr[3]);
 8001c2c:	4b2a      	ldr	r3, [pc, #168]	; (8001cd8 <fan+0xb0>)
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <fan+0xb4>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	635a      	str	r2, [r3, #52]	; 0x34
	HAL_Delay(100);
 8001c36:	2064      	movs	r0, #100	; 0x64
 8001c38:	f001 fd66 	bl	8003708 <HAL_Delay>
	if(fanspeed == 0){
 8001c3c:	4b28      	ldr	r3, [pc, #160]	; (8001ce0 <fan+0xb8>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d109      	bne.n	8001c58 <fan+0x30>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8001c44:	2200      	movs	r2, #0
 8001c46:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c4a:	4826      	ldr	r0, [pc, #152]	; (8001ce4 <fan+0xbc>)
 8001c4c:	f002 f839 	bl	8003cc2 <HAL_GPIO_WritePin>
		fanspeed = 1;
 8001c50:	4b23      	ldr	r3, [pc, #140]	; (8001ce0 <fan+0xb8>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	e034      	b.n	8001cc2 <fan+0x9a>
	}
	else if(fanspeed == 1){
 8001c58:	4b21      	ldr	r3, [pc, #132]	; (8001ce0 <fan+0xb8>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d109      	bne.n	8001c74 <fan+0x4c>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8001c60:	2200      	movs	r2, #0
 8001c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c66:	481f      	ldr	r0, [pc, #124]	; (8001ce4 <fan+0xbc>)
 8001c68:	f002 f82b 	bl	8003cc2 <HAL_GPIO_WritePin>
		fanspeed = 2;
 8001c6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ce0 <fan+0xb8>)
 8001c6e:	2202      	movs	r2, #2
 8001c70:	601a      	str	r2, [r3, #0]
 8001c72:	e026      	b.n	8001cc2 <fan+0x9a>
	}
	else if(fanspeed == 2){
 8001c74:	4b1a      	ldr	r3, [pc, #104]	; (8001ce0 <fan+0xb8>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d109      	bne.n	8001c90 <fan+0x68>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c82:	4818      	ldr	r0, [pc, #96]	; (8001ce4 <fan+0xbc>)
 8001c84:	f002 f81d 	bl	8003cc2 <HAL_GPIO_WritePin>
		fanspeed = 3;
 8001c88:	4b15      	ldr	r3, [pc, #84]	; (8001ce0 <fan+0xb8>)
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	e018      	b.n	8001cc2 <fan+0x9a>
	}
	else if(fanspeed == 3){
 8001c90:	4b13      	ldr	r3, [pc, #76]	; (8001ce0 <fan+0xb8>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b03      	cmp	r3, #3
 8001c96:	d114      	bne.n	8001cc2 <fan+0x9a>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001c9e:	4811      	ldr	r0, [pc, #68]	; (8001ce4 <fan+0xbc>)
 8001ca0:	f002 f80f 	bl	8003cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001caa:	480e      	ldr	r0, [pc, #56]	; (8001ce4 <fan+0xbc>)
 8001cac:	f002 f809 	bl	8003cc2 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cb6:	480b      	ldr	r0, [pc, #44]	; (8001ce4 <fan+0xbc>)
 8001cb8:	f002 f803 	bl	8003cc2 <HAL_GPIO_WritePin>
		fanspeed = 0;
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <fan+0xb8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	601a      	str	r2, [r3, #0]
	}
	__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_1, fan_speed_arr[fanspeed]);
 8001cc2:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <fan+0xb8>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a04      	ldr	r2, [pc, #16]	; (8001cd8 <fan+0xb0>)
 8001cc8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <fan+0xb4>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cd2:	bf00      	nop
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	2000009c 	.word	0x2000009c
 8001cdc:	20000238 	.word	0x20000238
 8001ce0:	20000310 	.word	0x20000310
 8001ce4:	40011000 	.word	0x40011000

08001ce8 <take_photo>:
uint8_t str2[]="\nStop";
uint16_t Distance  = 0;
uint32_t pMillis;
uint32_t Value1 = 0;
uint32_t Value2 = 0;
int take_photo () {
 8001ce8:	b590      	push	{r4, r7, lr}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0

		LCD_DisplayInterface1();
 8001cee:	f7ff fb8b 	bl	8001408 <LCD_DisplayInterface1>
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_SET);
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cf8:	48a1      	ldr	r0, [pc, #644]	; (8001f80 <take_photo+0x298>)
 8001cfa:	f001 ffe2 	bl	8003cc2 <HAL_GPIO_WritePin>
		__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001cfe:	4ba1      	ldr	r3, [pc, #644]	; (8001f84 <take_photo+0x29c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	; 0x24
		while (__HAL_TIM_GET_COUNTER (&htim1) < 10);
 8001d06:	bf00      	nop
 8001d08:	4b9e      	ldr	r3, [pc, #632]	; (8001f84 <take_photo+0x29c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d0e:	2b09      	cmp	r3, #9
 8001d10:	d9fa      	bls.n	8001d08 <take_photo+0x20>
		HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 8001d12:	2200      	movs	r2, #0
 8001d14:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d18:	4899      	ldr	r0, [pc, #612]	; (8001f80 <take_photo+0x298>)
 8001d1a:	f001 ffd2 	bl	8003cc2 <HAL_GPIO_WritePin>

		pMillis = HAL_GetTick();
 8001d1e:	f001 fce9 	bl	80036f4 <HAL_GetTick>
 8001d22:	4603      	mov	r3, r0
 8001d24:	4a98      	ldr	r2, [pc, #608]	; (8001f88 <take_photo+0x2a0>)
 8001d26:	6013      	str	r3, [r2, #0]

		while (!(HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 10 >  HAL_GetTick());
 8001d28:	bf00      	nop
 8001d2a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d2e:	4894      	ldr	r0, [pc, #592]	; (8001f80 <take_photo+0x298>)
 8001d30:	f001 ffb0 	bl	8003c94 <HAL_GPIO_ReadPin>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d108      	bne.n	8001d4c <take_photo+0x64>
 8001d3a:	4b93      	ldr	r3, [pc, #588]	; (8001f88 <take_photo+0x2a0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f103 040a 	add.w	r4, r3, #10
 8001d42:	f001 fcd7 	bl	80036f4 <HAL_GetTick>
 8001d46:	4603      	mov	r3, r0
 8001d48:	429c      	cmp	r4, r3
 8001d4a:	d8ee      	bhi.n	8001d2a <take_photo+0x42>
		Value1 = __HAL_TIM_GET_COUNTER (&htim1);
 8001d4c:	4b8d      	ldr	r3, [pc, #564]	; (8001f84 <take_photo+0x29c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d52:	4a8e      	ldr	r2, [pc, #568]	; (8001f8c <take_photo+0x2a4>)
 8001d54:	6013      	str	r3, [r2, #0]

		pMillis = HAL_GetTick();
 8001d56:	f001 fccd 	bl	80036f4 <HAL_GetTick>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4a8a      	ldr	r2, [pc, #552]	; (8001f88 <take_photo+0x2a0>)
 8001d5e:	6013      	str	r3, [r2, #0]

		while ((HAL_GPIO_ReadPin (ECHO_PORT, ECHO_PIN)) && pMillis + 50 > HAL_GetTick());
 8001d60:	bf00      	nop
 8001d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001d66:	4886      	ldr	r0, [pc, #536]	; (8001f80 <take_photo+0x298>)
 8001d68:	f001 ff94 	bl	8003c94 <HAL_GPIO_ReadPin>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d008      	beq.n	8001d84 <take_photo+0x9c>
 8001d72:	4b85      	ldr	r3, [pc, #532]	; (8001f88 <take_photo+0x2a0>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f103 0432 	add.w	r4, r3, #50	; 0x32
 8001d7a:	f001 fcbb 	bl	80036f4 <HAL_GetTick>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	429c      	cmp	r4, r3
 8001d82:	d8ee      	bhi.n	8001d62 <take_photo+0x7a>
		Value2 = __HAL_TIM_GET_COUNTER (&htim1);
 8001d84:	4b7f      	ldr	r3, [pc, #508]	; (8001f84 <take_photo+0x29c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8a:	4a81      	ldr	r2, [pc, #516]	; (8001f90 <take_photo+0x2a8>)
 8001d8c:	6013      	str	r3, [r2, #0]

		Distance = (Value2-Value1)* 0.034/2;
 8001d8e:	4b80      	ldr	r3, [pc, #512]	; (8001f90 <take_photo+0x2a8>)
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	4b7e      	ldr	r3, [pc, #504]	; (8001f8c <take_photo+0x2a4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	1ad3      	subs	r3, r2, r3
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fb8f 	bl	80004bc <__aeabi_ui2d>
 8001d9e:	a376      	add	r3, pc, #472	; (adr r3, 8001f78 <take_photo+0x290>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc04 	bl	80005b0 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f04f 0200 	mov.w	r2, #0
 8001db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001db8:	f7fe fd24 	bl	8000804 <__aeabi_ddiv>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4610      	mov	r0, r2
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	f7fe feb6 	bl	8000b34 <__aeabi_d2uiz>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	4b71      	ldr	r3, [pc, #452]	; (8001f94 <take_photo+0x2ac>)
 8001dce:	801a      	strh	r2, [r3, #0]
		HAL_Delay(50);
 8001dd0:	2032      	movs	r0, #50	; 0x32
 8001dd2:	f001 fc99 	bl	8003708 <HAL_Delay>
		uint8_t Rxstr[4] = "";
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
		int pixel_data = 0;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	603b      	str	r3, [r7, #0]
		int Calcu_data = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(&huart1,strK1,sizeof(strK1)-1,100);
 8001de2:	2364      	movs	r3, #100	; 0x64
 8001de4:	2208      	movs	r2, #8
 8001de6:	496c      	ldr	r1, [pc, #432]	; (8001f98 <take_photo+0x2b0>)
 8001de8:	486c      	ldr	r0, [pc, #432]	; (8001f9c <take_photo+0x2b4>)
 8001dea:	f003 fb18 	bl	800541e <HAL_UART_Transmit>
		if (Ov7725_vsync == 2)
 8001dee:	4b6c      	ldr	r3, [pc, #432]	; (8001fa0 <take_photo+0x2b8>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	f040 80b9 	bne.w	8001f6c <take_photo+0x284>
		{
			FIFO_PREPARE;
 8001dfa:	4b61      	ldr	r3, [pc, #388]	; (8001f80 <take_photo+0x298>)
 8001dfc:	2204      	movs	r2, #4
 8001dfe:	615a      	str	r2, [r3, #20]
 8001e00:	4b68      	ldr	r3, [pc, #416]	; (8001fa4 <take_photo+0x2bc>)
 8001e02:	2220      	movs	r2, #32
 8001e04:	615a      	str	r2, [r3, #20]
 8001e06:	4b67      	ldr	r3, [pc, #412]	; (8001fa4 <take_photo+0x2bc>)
 8001e08:	2220      	movs	r2, #32
 8001e0a:	611a      	str	r2, [r3, #16]
 8001e0c:	4b5c      	ldr	r3, [pc, #368]	; (8001f80 <take_photo+0x298>)
 8001e0e:	2204      	movs	r2, #4
 8001e10:	611a      	str	r2, [r3, #16]
 8001e12:	4b64      	ldr	r3, [pc, #400]	; (8001fa4 <take_photo+0x2bc>)
 8001e14:	2220      	movs	r2, #32
 8001e16:	615a      	str	r2, [r3, #20]
 8001e18:	4b62      	ldr	r3, [pc, #392]	; (8001fa4 <take_photo+0x2bc>)
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	611a      	str	r2, [r3, #16]
			for(i = 0; i < 240; i++)
 8001e1e:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <take_photo+0x2c0>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	801a      	strh	r2, [r3, #0]
 8001e24:	e050      	b.n	8001ec8 <take_photo+0x1e0>
			{
				for(j = 0; j < 320; j++)
 8001e26:	4b61      	ldr	r3, [pc, #388]	; (8001fac <take_photo+0x2c4>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	801a      	strh	r2, [r3, #0]
 8001e2c:	e041      	b.n	8001eb2 <take_photo+0x1ca>
				{
					READ_FIFO_PIXEL(Camera_Data);
 8001e2e:	4b60      	ldr	r3, [pc, #384]	; (8001fb0 <take_photo+0x2c8>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	801a      	strh	r2, [r3, #0]
 8001e34:	4b5b      	ldr	r3, [pc, #364]	; (8001fa4 <take_photo+0x2bc>)
 8001e36:	2220      	movs	r2, #32
 8001e38:	615a      	str	r2, [r3, #20]
 8001e3a:	4b5e      	ldr	r3, [pc, #376]	; (8001fb4 <take_photo+0x2cc>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	b29b      	uxth	r3, r3
 8001e40:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001e44:	b29a      	uxth	r2, r3
 8001e46:	4b5a      	ldr	r3, [pc, #360]	; (8001fb0 <take_photo+0x2c8>)
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <take_photo+0x2bc>)
 8001e4c:	2220      	movs	r2, #32
 8001e4e:	611a      	str	r2, [r3, #16]
 8001e50:	4b54      	ldr	r3, [pc, #336]	; (8001fa4 <take_photo+0x2bc>)
 8001e52:	2220      	movs	r2, #32
 8001e54:	615a      	str	r2, [r3, #20]
 8001e56:	4b57      	ldr	r3, [pc, #348]	; (8001fb4 <take_photo+0x2cc>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	4b53      	ldr	r3, [pc, #332]	; (8001fb0 <take_photo+0x2c8>)
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	b29a      	uxth	r2, r3
 8001e68:	4b51      	ldr	r3, [pc, #324]	; (8001fb0 <take_photo+0x2c8>)
 8001e6a:	801a      	strh	r2, [r3, #0]
 8001e6c:	4b4d      	ldr	r3, [pc, #308]	; (8001fa4 <take_photo+0x2bc>)
 8001e6e:	2220      	movs	r2, #32
 8001e70:	611a      	str	r2, [r3, #16]
					color1 = (uint8_t) (Camera_Data);
 8001e72:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <take_photo+0x2c8>)
 8001e74:	881b      	ldrh	r3, [r3, #0]
 8001e76:	b2da      	uxtb	r2, r3
 8001e78:	4b4f      	ldr	r3, [pc, #316]	; (8001fb8 <take_photo+0x2d0>)
 8001e7a:	701a      	strb	r2, [r3, #0]
					color2 = (uint8_t) (Camera_Data>>8);
 8001e7c:	4b4c      	ldr	r3, [pc, #304]	; (8001fb0 <take_photo+0x2c8>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	0a1b      	lsrs	r3, r3, #8
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	4b4d      	ldr	r3, [pc, #308]	; (8001fbc <take_photo+0x2d4>)
 8001e88:	701a      	strb	r2, [r3, #0]
					message[0] = color1;
 8001e8a:	4b4b      	ldr	r3, [pc, #300]	; (8001fb8 <take_photo+0x2d0>)
 8001e8c:	781a      	ldrb	r2, [r3, #0]
 8001e8e:	4b4c      	ldr	r3, [pc, #304]	; (8001fc0 <take_photo+0x2d8>)
 8001e90:	701a      	strb	r2, [r3, #0]
					message[1] = color2;
 8001e92:	4b4a      	ldr	r3, [pc, #296]	; (8001fbc <take_photo+0x2d4>)
 8001e94:	781a      	ldrb	r2, [r3, #0]
 8001e96:	4b4a      	ldr	r3, [pc, #296]	; (8001fc0 <take_photo+0x2d8>)
 8001e98:	705a      	strb	r2, [r3, #1]
					HAL_UART_Transmit(&huart1,message,2,100);
 8001e9a:	2364      	movs	r3, #100	; 0x64
 8001e9c:	2202      	movs	r2, #2
 8001e9e:	4948      	ldr	r1, [pc, #288]	; (8001fc0 <take_photo+0x2d8>)
 8001ea0:	483e      	ldr	r0, [pc, #248]	; (8001f9c <take_photo+0x2b4>)
 8001ea2:	f003 fabc 	bl	800541e <HAL_UART_Transmit>
				for(j = 0; j < 320; j++)
 8001ea6:	4b41      	ldr	r3, [pc, #260]	; (8001fac <take_photo+0x2c4>)
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	3301      	adds	r3, #1
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b3f      	ldr	r3, [pc, #252]	; (8001fac <take_photo+0x2c4>)
 8001eb0:	801a      	strh	r2, [r3, #0]
 8001eb2:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <take_photo+0x2c4>)
 8001eb4:	881b      	ldrh	r3, [r3, #0]
 8001eb6:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001eba:	d3b8      	bcc.n	8001e2e <take_photo+0x146>
			for(i = 0; i < 240; i++)
 8001ebc:	4b3a      	ldr	r3, [pc, #232]	; (8001fa8 <take_photo+0x2c0>)
 8001ebe:	881b      	ldrh	r3, [r3, #0]
 8001ec0:	3301      	adds	r3, #1
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	4b38      	ldr	r3, [pc, #224]	; (8001fa8 <take_photo+0x2c0>)
 8001ec6:	801a      	strh	r2, [r3, #0]
 8001ec8:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <take_photo+0x2c0>)
 8001eca:	881b      	ldrh	r3, [r3, #0]
 8001ecc:	2bef      	cmp	r3, #239	; 0xef
 8001ece:	d9aa      	bls.n	8001e26 <take_photo+0x13e>
				}
			}
			HAL_UART_Transmit(&huart1,str2,sizeof(str2)-1,100);
 8001ed0:	2364      	movs	r3, #100	; 0x64
 8001ed2:	2205      	movs	r2, #5
 8001ed4:	493b      	ldr	r1, [pc, #236]	; (8001fc4 <take_photo+0x2dc>)
 8001ed6:	4831      	ldr	r0, [pc, #196]	; (8001f9c <take_photo+0x2b4>)
 8001ed8:	f003 faa1 	bl	800541e <HAL_UART_Transmit>
			HAL_Delay(50);
 8001edc:	2032      	movs	r0, #50	; 0x32
 8001ede:	f001 fc13 	bl	8003708 <HAL_Delay>
			Ov7725_vsync = 0;
 8001ee2:	4b2f      	ldr	r3, [pc, #188]	; (8001fa0 <take_photo+0x2b8>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
			int temp_time = HAL_GetTick();
 8001ee8:	f001 fc04 	bl	80036f4 <HAL_GetTick>
 8001eec:	4603      	mov	r3, r0
 8001eee:	60bb      	str	r3, [r7, #8]
			while (HAL_UART_Receive(&huart1,Rxstr,2,100) != HAL_OK && Check_mainsrc_touchkey() == 0);
 8001ef0:	bf00      	nop
 8001ef2:	1d39      	adds	r1, r7, #4
 8001ef4:	2364      	movs	r3, #100	; 0x64
 8001ef6:	2202      	movs	r2, #2
 8001ef8:	4828      	ldr	r0, [pc, #160]	; (8001f9c <take_photo+0x2b4>)
 8001efa:	f003 fb22 	bl	8005542 <HAL_UART_Receive>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d004      	beq.n	8001f0e <take_photo+0x226>
 8001f04:	f001 faec 	bl	80034e0 <Check_mainsrc_touchkey>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d0f1      	beq.n	8001ef2 <take_photo+0x20a>
			LCD_DisplayInterface2();
 8001f0e:	f7ff fab9 	bl	8001484 <LCD_DisplayInterface2>
			sscanf(Rxstr, "%d", &pixel_data);
 8001f12:	463a      	mov	r2, r7
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	492c      	ldr	r1, [pc, #176]	; (8001fc8 <take_photo+0x2e0>)
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f003 fd95 	bl	8005a48 <siscanf>
			if (pixel_data == 0) {LCD_DisplayInterface(); return 0;}
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d103      	bne.n	8001f2c <take_photo+0x244>
 8001f24:	f7ff fa36 	bl	8001394 <LCD_DisplayInterface>
 8001f28:	2300      	movs	r3, #0
 8001f2a:	e020      	b.n	8001f6e <take_photo+0x286>
			Calcu_data = pixel_data + ((int)(Distance)-30)*2/40;
 8001f2c:	4b19      	ldr	r3, [pc, #100]	; (8001f94 <take_photo+0x2ac>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	3b1e      	subs	r3, #30
 8001f32:	4a26      	ldr	r2, [pc, #152]	; (8001fcc <take_photo+0x2e4>)
 8001f34:	fb82 1203 	smull	r1, r2, r2, r3
 8001f38:	10d2      	asrs	r2, r2, #3
 8001f3a:	17db      	asrs	r3, r3, #31
 8001f3c:	1ad2      	subs	r2, r2, r3
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	4413      	add	r3, r2
 8001f42:	60fb      	str	r3, [r7, #12]
			if (Calcu_data > 25) {Calcu_data = 25;}
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2b19      	cmp	r3, #25
 8001f48:	dd02      	ble.n	8001f50 <take_photo+0x268>
 8001f4a:	2319      	movs	r3, #25
 8001f4c:	60fb      	str	r3, [r7, #12]
 8001f4e:	e004      	b.n	8001f5a <take_photo+0x272>
			else if (Calcu_data < 15) {Calcu_data = 15;}
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	2b0e      	cmp	r3, #14
 8001f54:	dc01      	bgt.n	8001f5a <take_photo+0x272>
 8001f56:	230f      	movs	r3, #15
 8001f58:	60fb      	str	r3, [r7, #12]
			LCD_DisplayNum(Calcu_data);
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	f7ff fd5c 	bl	8001a18 <LCD_DisplayNum>
			HAL_Delay(4000);
 8001f60:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 8001f64:	f001 fbd0 	bl	8003708 <HAL_Delay>
			LCD_DisplayInterface();
 8001f68:	f7ff fa14 	bl	8001394 <LCD_DisplayInterface>

		}
		return Calcu_data;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3714      	adds	r7, #20
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}
 8001f76:	bf00      	nop
 8001f78:	b020c49c 	.word	0xb020c49c
 8001f7c:	3fa16872 	.word	0x3fa16872
 8001f80:	40010800 	.word	0x40010800
 8001f84:	200001a8 	.word	0x200001a8
 8001f88:	20000320 	.word	0x20000320
 8001f8c:	20000324 	.word	0x20000324
 8001f90:	20000328 	.word	0x20000328
 8001f94:	2000031e 	.word	0x2000031e
 8001f98:	200000ac 	.word	0x200000ac
 8001f9c:	20000280 	.word	0x20000280
 8001fa0:	2000030c 	.word	0x2000030c
 8001fa4:	40011000 	.word	0x40011000
 8001fa8:	20000314 	.word	0x20000314
 8001fac:	20000316 	.word	0x20000316
 8001fb0:	20000318 	.word	0x20000318
 8001fb4:	40010c00 	.word	0x40010c00
 8001fb8:	2000031a 	.word	0x2000031a
 8001fbc:	2000031b 	.word	0x2000031b
 8001fc0:	2000031c 	.word	0x2000031c
 8001fc4:	200000b8 	.word	0x200000b8
 8001fc8:	08006664 	.word	0x08006664
 8001fcc:	66666667 	.word	0x66666667

08001fd0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fd0:	b5b0      	push	{r4, r5, r7, lr}
 8001fd2:	b08c      	sub	sp, #48	; 0x30
 8001fd4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fd6:	f001 fb35 	bl	8003644 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fda:	f000 f9ff 	bl	80023dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fde:	f000 fbbd 	bl	800275c <MX_GPIO_Init>
  MX_FSMC_Init();
 8001fe2:	f000 fd43 	bl	8002a6c <MX_FSMC_Init>
  MX_TIM3_Init();
 8001fe6:	f000 fa95 	bl	8002514 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001fea:	f000 fb15 	bl	8002618 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001fee:	f000 fa41 	bl	8002474 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001ff2:	f000 fb89 	bl	8002708 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //LCD
  LCD_INIT();
 8001ff6:	f7fe ffb1 	bl	8000f5c <LCD_INIT>
  LCD_DisplayInterface();
 8001ffa:	f7ff f9cb 	bl	8001394 <LCD_DisplayInterface>
  //timer
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ffe:	2100      	movs	r1, #0
 8002000:	480a      	ldr	r0, [pc, #40]	; (800202c <main+0x5c>)
 8002002:	f002 fc37 	bl	8004874 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8002006:	2104      	movs	r1, #4
 8002008:	4808      	ldr	r0, [pc, #32]	; (800202c <main+0x5c>)
 800200a:	f002 fc33 	bl	8004874 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800200e:	2100      	movs	r1, #0
 8002010:	4807      	ldr	r0, [pc, #28]	; (8002030 <main+0x60>)
 8002012:	f002 fc2f 	bl	8004874 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1);
 8002016:	4807      	ldr	r0, [pc, #28]	; (8002034 <main+0x64>)
 8002018:	f002 fb7c 	bl	8004714 <HAL_TIM_Base_Start>
  HAL_GPIO_WritePin(TRIG_PORT, TRIG_PIN, GPIO_PIN_RESET);
 800201c:	2200      	movs	r2, #0
 800201e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002022:	4805      	ldr	r0, [pc, #20]	; (8002038 <main+0x68>)
 8002024:	f001 fe4d 	bl	8003cc2 <HAL_GPIO_WritePin>

  // camera
  while(Ov7725_Init() != SUCCESS){HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);}
 8002028:	e00d      	b.n	8002046 <main+0x76>
 800202a:	bf00      	nop
 800202c:	200001f0 	.word	0x200001f0
 8002030:	20000238 	.word	0x20000238
 8002034:	200001a8 	.word	0x200001a8
 8002038:	40010800 	.word	0x40010800
 800203c:	2200      	movs	r2, #0
 800203e:	2120      	movs	r1, #32
 8002040:	48a7      	ldr	r0, [pc, #668]	; (80022e0 <main+0x310>)
 8002042:	f001 fe3e 	bl	8003cc2 <HAL_GPIO_WritePin>
 8002046:	f7fe fd95 	bl	8000b74 <Ov7725_Init>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1f5      	bne.n	800203c <main+0x6c>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002050:	2201      	movs	r2, #1
 8002052:	2120      	movs	r1, #32
 8002054:	48a2      	ldr	r0, [pc, #648]	; (80022e0 <main+0x310>)
 8002056:	f001 fe34 	bl	8003cc2 <HAL_GPIO_WritePin>
  Ov7725_vsync = 0;
 800205a:	4ba2      	ldr	r3, [pc, #648]	; (80022e4 <main+0x314>)
 800205c:	2200      	movs	r2, #0
 800205e:	701a      	strb	r2, [r3, #0]

  //touch screeen
  int touch_received;

  //stepper
  int stepper_dir = 0;
 8002060:	2300      	movs	r3, #0
 8002062:	62fb      	str	r3, [r7, #44]	; 0x2c
  double current_height = 26;
 8002064:	f04f 0200 	mov.w	r2, #0
 8002068:	4b9f      	ldr	r3, [pc, #636]	; (80022e8 <main+0x318>)
 800206a:	e9c7 2308 	strd	r2, r3, [r7, #32]
  LCD_DisplayNum(current_height-1);
 800206e:	f04f 0200 	mov.w	r2, #0
 8002072:	4b9e      	ldr	r3, [pc, #632]	; (80022ec <main+0x31c>)
 8002074:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002078:	f7fe f8e2 	bl	8000240 <__aeabi_dsub>
 800207c:	4602      	mov	r2, r0
 800207e:	460b      	mov	r3, r1
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	f7fe fd2e 	bl	8000ae4 <__aeabi_d2iz>
 8002088:	4603      	mov	r3, r0
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fcc4 	bl	8001a18 <LCD_DisplayNum>
  current_height = 25.1;
 8002090:	a38f      	add	r3, pc, #572	; (adr r3, 80022d0 <main+0x300>)
 8002092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002096:	e9c7 2308 	strd	r2, r3, [r7, #32]
  uint32_t timer_temp;
  int temp_height = current_height;
 800209a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800209e:	f7fe fd21 	bl	8000ae4 <__aeabi_d2iz>
 80020a2:	4603      	mov	r3, r0
 80020a4:	61bb      	str	r3, [r7, #24]
  int haveTarget = 0;
 80020a6:	2300      	movs	r3, #0
 80020a8:	617b      	str	r3, [r7, #20]
  int Calcu_Data = 0;
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  touch_received = Check_mainsrc_touchkey();
 80020ae:	f001 fa17 	bl	80034e0 <Check_mainsrc_touchkey>
 80020b2:	60f8      	str	r0, [r7, #12]

	  //If stepper is moving, get the time update. If time change by 2, update height by 1.
	  if(stepper_dir != 0){
 80020b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 80cb 	beq.w	8002252 <main+0x282>
		  //adjust the last no. to get better range. Max: 2000
		  current_height += stepper_dir*(double)(HAL_GetTick()-timer_temp)/1950.0;
 80020bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80020be:	f7fe fa0d 	bl	80004dc <__aeabi_i2d>
 80020c2:	4604      	mov	r4, r0
 80020c4:	460d      	mov	r5, r1
 80020c6:	f001 fb15 	bl	80036f4 <HAL_GetTick>
 80020ca:	4602      	mov	r2, r0
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	1ad3      	subs	r3, r2, r3
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f9f3 	bl	80004bc <__aeabi_ui2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4620      	mov	r0, r4
 80020dc:	4629      	mov	r1, r5
 80020de:	f7fe fa67 	bl	80005b0 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4610      	mov	r0, r2
 80020e8:	4619      	mov	r1, r3
 80020ea:	a37b      	add	r3, pc, #492	; (adr r3, 80022d8 <main+0x308>)
 80020ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f0:	f7fe fb88 	bl	8000804 <__aeabi_ddiv>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80020fc:	f7fe f8a2 	bl	8000244 <__adddf3>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	e9c7 2308 	strd	r2, r3, [r7, #32]
		  timer_temp = HAL_GetTick();
 8002108:	f001 faf4 	bl	80036f4 <HAL_GetTick>
 800210c:	61f8      	str	r0, [r7, #28]

		  if(current_height >= 25 && stepper_dir == 1){
 800210e:	f04f 0200 	mov.w	r2, #0
 8002112:	4b77      	ldr	r3, [pc, #476]	; (80022f0 <main+0x320>)
 8002114:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002118:	f7fe fcd0 	bl	8000abc <__aeabi_dcmpge>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d013      	beq.n	800214a <main+0x17a>
 8002122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002124:	2b01      	cmp	r3, #1
 8002126:	d110      	bne.n	800214a <main+0x17a>
			  current_height = 25;
 8002128:	f04f 0200 	mov.w	r2, #0
 800212c:	4b70      	ldr	r3, [pc, #448]	; (80022f0 <main+0x320>)
 800212e:	e9c7 2308 	strd	r2, r3, [r7, #32]
			  stepper_dir = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002136:	4b6f      	ldr	r3, [pc, #444]	; (80022f4 <main+0x324>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	2200      	movs	r2, #0
 800213c:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800213e:	4b6d      	ldr	r3, [pc, #436]	; (80022f4 <main+0x324>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2200      	movs	r2, #0
 8002144:	639a      	str	r2, [r3, #56]	; 0x38
			  led_blink();
 8002146:	f7ff fd0f 	bl	8001b68 <led_blink>
		  }

		  if(current_height <= 15 && stepper_dir == -1){
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	4b6a      	ldr	r3, [pc, #424]	; (80022f8 <main+0x328>)
 8002150:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002154:	f7fe fca8 	bl	8000aa8 <__aeabi_dcmple>
 8002158:	4603      	mov	r3, r0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d014      	beq.n	8002188 <main+0x1b8>
 800215e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d110      	bne.n	8002188 <main+0x1b8>
			  current_height = 15;
 8002166:	f04f 0200 	mov.w	r2, #0
 800216a:	4b63      	ldr	r3, [pc, #396]	; (80022f8 <main+0x328>)
 800216c:	e9c7 2308 	strd	r2, r3, [r7, #32]
			  stepper_dir = 0;
 8002170:	2300      	movs	r3, #0
 8002172:	62fb      	str	r3, [r7, #44]	; 0x2c

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002174:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <main+0x324>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	2200      	movs	r2, #0
 800217a:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800217c:	4b5d      	ldr	r3, [pc, #372]	; (80022f4 <main+0x324>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2200      	movs	r2, #0
 8002182:	639a      	str	r2, [r3, #56]	; 0x38
			  led_blink();
 8002184:	f7ff fcf0 	bl	8001b68 <led_blink>
		  }


		  //have target
		  if(current_height >= Calcu_Data && stepper_dir == 1 && haveTarget){
 8002188:	6938      	ldr	r0, [r7, #16]
 800218a:	f7fe f9a7 	bl	80004dc <__aeabi_i2d>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002196:	f7fe fc91 	bl	8000abc <__aeabi_dcmpge>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d01a      	beq.n	80021d6 <main+0x206>
 80021a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a2:	2b01      	cmp	r3, #1
 80021a4:	d117      	bne.n	80021d6 <main+0x206>
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d014      	beq.n	80021d6 <main+0x206>
			  current_height = Calcu_Data;
 80021ac:	6938      	ldr	r0, [r7, #16]
 80021ae:	f7fe f995 	bl	80004dc <__aeabi_i2d>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	e9c7 2308 	strd	r2, r3, [r7, #32]
			  stepper_dir = 0;
 80021ba:	2300      	movs	r3, #0
 80021bc:	62fb      	str	r3, [r7, #44]	; 0x2c
			  haveTarget = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80021c2:	4b4c      	ldr	r3, [pc, #304]	; (80022f4 <main+0x324>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2200      	movs	r2, #0
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80021ca:	4b4a      	ldr	r3, [pc, #296]	; (80022f4 <main+0x324>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2200      	movs	r2, #0
 80021d0:	639a      	str	r2, [r3, #56]	; 0x38
			  led_blink();
 80021d2:	f7ff fcc9 	bl	8001b68 <led_blink>
		  }

		  if(current_height <= Calcu_Data && stepper_dir == -1 && haveTarget){
 80021d6:	6938      	ldr	r0, [r7, #16]
 80021d8:	f7fe f980 	bl	80004dc <__aeabi_i2d>
 80021dc:	4602      	mov	r2, r0
 80021de:	460b      	mov	r3, r1
 80021e0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80021e4:	f7fe fc60 	bl	8000aa8 <__aeabi_dcmple>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d01b      	beq.n	8002226 <main+0x256>
 80021ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021f4:	d117      	bne.n	8002226 <main+0x256>
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d014      	beq.n	8002226 <main+0x256>
			  current_height = Calcu_Data;
 80021fc:	6938      	ldr	r0, [r7, #16]
 80021fe:	f7fe f96d 	bl	80004dc <__aeabi_i2d>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	e9c7 2308 	strd	r2, r3, [r7, #32]
			  stepper_dir = 0;
 800220a:	2300      	movs	r3, #0
 800220c:	62fb      	str	r3, [r7, #44]	; 0x2c
			  haveTarget = 0;
 800220e:	2300      	movs	r3, #0
 8002210:	617b      	str	r3, [r7, #20]

			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 8002212:	4b38      	ldr	r3, [pc, #224]	; (80022f4 <main+0x324>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	2200      	movs	r2, #0
 8002218:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 800221a:	4b36      	ldr	r3, [pc, #216]	; (80022f4 <main+0x324>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	2200      	movs	r2, #0
 8002220:	639a      	str	r2, [r3, #56]	; 0x38
			  led_blink();
 8002222:	f7ff fca1 	bl	8001b68 <led_blink>
		  }


		 //update display
		  if((int)current_height != temp_height){
 8002226:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800222a:	f7fe fc5b 	bl	8000ae4 <__aeabi_d2iz>
 800222e:	4602      	mov	r2, r0
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	4293      	cmp	r3, r2
 8002234:	d00d      	beq.n	8002252 <main+0x282>
			  temp_height = current_height;
 8002236:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800223a:	f7fe fc53 	bl	8000ae4 <__aeabi_d2iz>
 800223e:	4603      	mov	r3, r0
 8002240:	61bb      	str	r3, [r7, #24]
			  LCD_DisplayNum((int)current_height);
 8002242:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002246:	f7fe fc4d 	bl	8000ae4 <__aeabi_d2iz>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fbe3 	bl	8001a18 <LCD_DisplayNum>



	  //stepper up down
	  //reset button
	  if(touch_received == 1){
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d101      	bne.n	800225c <main+0x28c>
		  fan();
 8002258:	f7ff fce6 	bl	8001c28 <fan>
	  }
	  // auto button
	  if(touch_received == 2){
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d171      	bne.n	8002346 <main+0x376>
		  Calcu_Data = take_photo();
 8002262:	f7ff fd41 	bl	8001ce8 <take_photo>
 8002266:	6138      	str	r0, [r7, #16]
		  LCD_DisplayNum(current_height);
 8002268:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800226c:	f7fe fc3a 	bl	8000ae4 <__aeabi_d2iz>
 8002270:	4603      	mov	r3, r0
 8002272:	4618      	mov	r0, r3
 8002274:	f7ff fbd0 	bl	8001a18 <LCD_DisplayNum>
		  if(Calcu_Data != 0){
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d063      	beq.n	8002346 <main+0x376>
			  haveTarget = 1;
 800227e:	2301      	movs	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
			  if (Calcu_Data < current_height) {
 8002282:	6938      	ldr	r0, [r7, #16]
 8002284:	f7fe f92a 	bl	80004dc <__aeabi_i2d>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002290:	f7fe fc1e 	bl	8000ad0 <__aeabi_dcmpgt>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d032      	beq.n	8002300 <main+0x330>
				  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 800229a:	2200      	movs	r2, #0
 800229c:	2120      	movs	r1, #32
 800229e:	4817      	ldr	r0, [pc, #92]	; (80022fc <main+0x32c>)
 80022a0:	f001 fd0f 	bl	8003cc2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 80022a4:	2200      	movs	r2, #0
 80022a6:	2140      	movs	r1, #64	; 0x40
 80022a8:	4814      	ldr	r0, [pc, #80]	; (80022fc <main+0x32c>)
 80022aa:	f001 fd0a 	bl	8003cc2 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);
 80022ae:	4b11      	ldr	r3, [pc, #68]	; (80022f4 <main+0x324>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2201      	movs	r2, #1
 80022b4:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1);
 80022b6:	4b0f      	ldr	r3, [pc, #60]	; (80022f4 <main+0x324>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2201      	movs	r2, #1
 80022bc:	639a      	str	r2, [r3, #56]	; 0x38
				  stepper_dir = -1;
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	62fb      	str	r3, [r7, #44]	; 0x2c
				  timer_temp = HAL_GetTick();
 80022c4:	f001 fa16 	bl	80036f4 <HAL_GetTick>
 80022c8:	61f8      	str	r0, [r7, #28]
 80022ca:	e03c      	b.n	8002346 <main+0x376>
 80022cc:	f3af 8000 	nop.w
 80022d0:	9999999a 	.word	0x9999999a
 80022d4:	40391999 	.word	0x40391999
 80022d8:	00000000 	.word	0x00000000
 80022dc:	409e7800 	.word	0x409e7800
 80022e0:	40010c00 	.word	0x40010c00
 80022e4:	2000030c 	.word	0x2000030c
 80022e8:	403a0000 	.word	0x403a0000
 80022ec:	3ff00000 	.word	0x3ff00000
 80022f0:	40390000 	.word	0x40390000
 80022f4:	200001f0 	.word	0x200001f0
 80022f8:	402e0000 	.word	0x402e0000
 80022fc:	40011800 	.word	0x40011800
			  } else if (Calcu_Data > current_height) {
 8002300:	6938      	ldr	r0, [r7, #16]
 8002302:	f7fe f8eb 	bl	80004dc <__aeabi_i2d>
 8002306:	4602      	mov	r2, r0
 8002308:	460b      	mov	r3, r1
 800230a:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800230e:	f7fe fbc1 	bl	8000a94 <__aeabi_dcmplt>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d016      	beq.n	8002346 <main+0x376>
				  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 8002318:	2201      	movs	r2, #1
 800231a:	2120      	movs	r1, #32
 800231c:	482d      	ldr	r0, [pc, #180]	; (80023d4 <main+0x404>)
 800231e:	f001 fcd0 	bl	8003cc2 <HAL_GPIO_WritePin>
				  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8002322:	2201      	movs	r2, #1
 8002324:	2140      	movs	r1, #64	; 0x40
 8002326:	482b      	ldr	r0, [pc, #172]	; (80023d4 <main+0x404>)
 8002328:	f001 fccb 	bl	8003cc2 <HAL_GPIO_WritePin>
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);
 800232c:	4b2a      	ldr	r3, [pc, #168]	; (80023d8 <main+0x408>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2201      	movs	r2, #1
 8002332:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1);
 8002334:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <main+0x408>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	2201      	movs	r2, #1
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
				  stepper_dir = 1;
 800233c:	2301      	movs	r3, #1
 800233e:	62fb      	str	r3, [r7, #44]	; 0x2c
				  timer_temp = HAL_GetTick();
 8002340:	f001 f9d8 	bl	80036f4 <HAL_GetTick>
 8002344:	61f8      	str	r0, [r7, #28]
			  }
		  }

	  }
	  //up button
	  if(touch_received == 3){
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2b03      	cmp	r3, #3
 800234a:	d116      	bne.n	800237a <main+0x3aa>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_SET);
 800234c:	2201      	movs	r2, #1
 800234e:	2120      	movs	r1, #32
 8002350:	4820      	ldr	r0, [pc, #128]	; (80023d4 <main+0x404>)
 8002352:	f001 fcb6 	bl	8003cc2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_SET);
 8002356:	2201      	movs	r2, #1
 8002358:	2140      	movs	r1, #64	; 0x40
 800235a:	481e      	ldr	r0, [pc, #120]	; (80023d4 <main+0x404>)
 800235c:	f001 fcb1 	bl	8003cc2 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <main+0x408>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2201      	movs	r2, #1
 8002366:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1);
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <main+0x408>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2201      	movs	r2, #1
 800236e:	639a      	str	r2, [r3, #56]	; 0x38
		  stepper_dir = 1;
 8002370:	2301      	movs	r3, #1
 8002372:	62fb      	str	r3, [r7, #44]	; 0x2c
		  timer_temp = HAL_GetTick();
 8002374:	f001 f9be 	bl	80036f4 <HAL_GetTick>
 8002378:	61f8      	str	r0, [r7, #28]
	  }
	  //down button
	  if(touch_received == 4){
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2b04      	cmp	r3, #4
 800237e:	d117      	bne.n	80023b0 <main+0x3e0>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
 8002380:	2200      	movs	r2, #0
 8002382:	2120      	movs	r1, #32
 8002384:	4813      	ldr	r0, [pc, #76]	; (80023d4 <main+0x404>)
 8002386:	f001 fc9c 	bl	8003cc2 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_6, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	2140      	movs	r1, #64	; 0x40
 800238e:	4811      	ldr	r0, [pc, #68]	; (80023d4 <main+0x404>)
 8002390:	f001 fc97 	bl	8003cc2 <HAL_GPIO_WritePin>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 1);
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <main+0x408>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2201      	movs	r2, #1
 800239a:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 1);
 800239c:	4b0e      	ldr	r3, [pc, #56]	; (80023d8 <main+0x408>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	2201      	movs	r2, #1
 80023a2:	639a      	str	r2, [r3, #56]	; 0x38
		  stepper_dir = -1;
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		  timer_temp = HAL_GetTick();
 80023aa:	f001 f9a3 	bl	80036f4 <HAL_GetTick>
 80023ae:	61f8      	str	r0, [r7, #28]
	  }
	  //pause button
	  if(touch_received == 5){
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2b05      	cmp	r3, #5
 80023b4:	f47f ae7b 	bne.w	80020ae <main+0xde>
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 0);
 80023b8:	4b07      	ldr	r3, [pc, #28]	; (80023d8 <main+0x408>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2200      	movs	r2, #0
 80023be:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 0);
 80023c0:	4b05      	ldr	r3, [pc, #20]	; (80023d8 <main+0x408>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2200      	movs	r2, #0
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
		  stepper_dir = 0;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62fb      	str	r3, [r7, #44]	; 0x2c
		  timer_temp = HAL_GetTick();
 80023cc:	f001 f992 	bl	80036f4 <HAL_GetTick>
 80023d0:	61f8      	str	r0, [r7, #28]
	  touch_received = Check_mainsrc_touchkey();
 80023d2:	e66c      	b.n	80020ae <main+0xde>
 80023d4:	40011800 	.word	0x40011800
 80023d8:	200001f0 	.word	0x200001f0

080023dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b090      	sub	sp, #64	; 0x40
 80023e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023e2:	f107 0318 	add.w	r3, r7, #24
 80023e6:	2228      	movs	r2, #40	; 0x28
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 fb24 	bl	8005a38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023f0:	1d3b      	adds	r3, r7, #4
 80023f2:	2200      	movs	r2, #0
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	605a      	str	r2, [r3, #4]
 80023f8:	609a      	str	r2, [r3, #8]
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80023fe:	2301      	movs	r3, #1
 8002400:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002402:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002406:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002408:	2300      	movs	r3, #0
 800240a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800240c:	2301      	movs	r3, #1
 800240e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002410:	2302      	movs	r3, #2
 8002412:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002414:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002418:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800241a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800241e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002420:	f107 0318 	add.w	r3, r7, #24
 8002424:	4618      	mov	r0, r3
 8002426:	f001 fc87 	bl	8003d38 <HAL_RCC_OscConfig>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d001      	beq.n	8002434 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8002430:	f000 fb80 	bl	8002b34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002434:	230f      	movs	r3, #15
 8002436:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002438:	2302      	movs	r3, #2
 800243a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800243c:	2300      	movs	r3, #0
 800243e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002440:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002444:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002446:	2300      	movs	r3, #0
 8002448:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800244a:	1d3b      	adds	r3, r7, #4
 800244c:	2102      	movs	r1, #2
 800244e:	4618      	mov	r0, r3
 8002450:	f001 fef4 	bl	800423c <HAL_RCC_ClockConfig>
 8002454:	4603      	mov	r3, r0
 8002456:	2b00      	cmp	r3, #0
 8002458:	d001      	beq.n	800245e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800245a:	f000 fb6b 	bl	8002b34 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_PLLCLK, RCC_MCODIV_1);
 800245e:	2200      	movs	r2, #0
 8002460:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8002464:	2000      	movs	r0, #0
 8002466:	f001 ffd3 	bl	8004410 <HAL_RCC_MCOConfig>
}
 800246a:	bf00      	nop
 800246c:	3740      	adds	r7, #64	; 0x40
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800247a:	f107 0308 	add.w	r3, r7, #8
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]
 8002482:	605a      	str	r2, [r3, #4]
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002488:	463b      	mov	r3, r7
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
 800248e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002490:	4b1e      	ldr	r3, [pc, #120]	; (800250c <MX_TIM1_Init+0x98>)
 8002492:	4a1f      	ldr	r2, [pc, #124]	; (8002510 <MX_TIM1_Init+0x9c>)
 8002494:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8002496:	4b1d      	ldr	r3, [pc, #116]	; (800250c <MX_TIM1_Init+0x98>)
 8002498:	2247      	movs	r2, #71	; 0x47
 800249a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800249c:	4b1b      	ldr	r3, [pc, #108]	; (800250c <MX_TIM1_Init+0x98>)
 800249e:	2200      	movs	r2, #0
 80024a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80024a2:	4b1a      	ldr	r3, [pc, #104]	; (800250c <MX_TIM1_Init+0x98>)
 80024a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024aa:	4b18      	ldr	r3, [pc, #96]	; (800250c <MX_TIM1_Init+0x98>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80024b0:	4b16      	ldr	r3, [pc, #88]	; (800250c <MX_TIM1_Init+0x98>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024b6:	4b15      	ldr	r3, [pc, #84]	; (800250c <MX_TIM1_Init+0x98>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80024bc:	4813      	ldr	r0, [pc, #76]	; (800250c <MX_TIM1_Init+0x98>)
 80024be:	f002 f8da 	bl	8004676 <HAL_TIM_Base_Init>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d001      	beq.n	80024cc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80024c8:	f000 fb34 	bl	8002b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024d0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80024d2:	f107 0308 	add.w	r3, r7, #8
 80024d6:	4619      	mov	r1, r3
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <MX_TIM1_Init+0x98>)
 80024da:	f002 fb43 	bl	8004b64 <HAL_TIM_ConfigClockSource>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80024e4:	f000 fb26 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024e8:	2300      	movs	r3, #0
 80024ea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80024f0:	463b      	mov	r3, r7
 80024f2:	4619      	mov	r1, r3
 80024f4:	4805      	ldr	r0, [pc, #20]	; (800250c <MX_TIM1_Init+0x98>)
 80024f6:	f002 fed9 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002500:	f000 fb18 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002504:	bf00      	nop
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	200001a8 	.word	0x200001a8
 8002510:	40012c00 	.word	0x40012c00

08002514 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b08e      	sub	sp, #56	; 0x38
 8002518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800251a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800251e:	2200      	movs	r2, #0
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	605a      	str	r2, [r3, #4]
 8002524:	609a      	str	r2, [r3, #8]
 8002526:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002528:	f107 0320 	add.w	r3, r7, #32
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]
 8002530:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002532:	1d3b      	adds	r3, r7, #4
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
 8002540:	615a      	str	r2, [r3, #20]
 8002542:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002544:	4b32      	ldr	r3, [pc, #200]	; (8002610 <MX_TIM3_Init+0xfc>)
 8002546:	4a33      	ldr	r2, [pc, #204]	; (8002614 <MX_TIM3_Init+0x100>)
 8002548:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 800254a:	4b31      	ldr	r3, [pc, #196]	; (8002610 <MX_TIM3_Init+0xfc>)
 800254c:	f240 22cf 	movw	r2, #719	; 0x2cf
 8002550:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002552:	4b2f      	ldr	r3, [pc, #188]	; (8002610 <MX_TIM3_Init+0xfc>)
 8002554:	2200      	movs	r2, #0
 8002556:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 49;
 8002558:	4b2d      	ldr	r3, [pc, #180]	; (8002610 <MX_TIM3_Init+0xfc>)
 800255a:	2231      	movs	r2, #49	; 0x31
 800255c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255e:	4b2c      	ldr	r3, [pc, #176]	; (8002610 <MX_TIM3_Init+0xfc>)
 8002560:	2200      	movs	r2, #0
 8002562:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002564:	4b2a      	ldr	r3, [pc, #168]	; (8002610 <MX_TIM3_Init+0xfc>)
 8002566:	2200      	movs	r2, #0
 8002568:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800256a:	4829      	ldr	r0, [pc, #164]	; (8002610 <MX_TIM3_Init+0xfc>)
 800256c:	f002 f883 	bl	8004676 <HAL_TIM_Base_Init>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8002576:	f000 fadd 	bl	8002b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800257a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800257e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002580:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002584:	4619      	mov	r1, r3
 8002586:	4822      	ldr	r0, [pc, #136]	; (8002610 <MX_TIM3_Init+0xfc>)
 8002588:	f002 faec 	bl	8004b64 <HAL_TIM_ConfigClockSource>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d001      	beq.n	8002596 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002592:	f000 facf 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002596:	481e      	ldr	r0, [pc, #120]	; (8002610 <MX_TIM3_Init+0xfc>)
 8002598:	f002 f914 	bl	80047c4 <HAL_TIM_PWM_Init>
 800259c:	4603      	mov	r3, r0
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d001      	beq.n	80025a6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80025a2:	f000 fac7 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a6:	2300      	movs	r3, #0
 80025a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80025aa:	2380      	movs	r3, #128	; 0x80
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80025ae:	f107 0320 	add.w	r3, r7, #32
 80025b2:	4619      	mov	r1, r3
 80025b4:	4816      	ldr	r0, [pc, #88]	; (8002610 <MX_TIM3_Init+0xfc>)
 80025b6:	f002 fe79 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 80025ba:	4603      	mov	r3, r0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d001      	beq.n	80025c4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80025c0:	f000 fab8 	bl	8002b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c4:	2360      	movs	r3, #96	; 0x60
 80025c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025c8:	2300      	movs	r3, #0
 80025ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025d0:	2300      	movs	r3, #0
 80025d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	2200      	movs	r2, #0
 80025d8:	4619      	mov	r1, r3
 80025da:	480d      	ldr	r0, [pc, #52]	; (8002610 <MX_TIM3_Init+0xfc>)
 80025dc:	f002 fa04 	bl	80049e8 <HAL_TIM_PWM_ConfigChannel>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80025e6:	f000 faa5 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025ea:	1d3b      	adds	r3, r7, #4
 80025ec:	2204      	movs	r2, #4
 80025ee:	4619      	mov	r1, r3
 80025f0:	4807      	ldr	r0, [pc, #28]	; (8002610 <MX_TIM3_Init+0xfc>)
 80025f2:	f002 f9f9 	bl	80049e8 <HAL_TIM_PWM_ConfigChannel>
 80025f6:	4603      	mov	r3, r0
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d001      	beq.n	8002600 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80025fc:	f000 fa9a 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002600:	4803      	ldr	r0, [pc, #12]	; (8002610 <MX_TIM3_Init+0xfc>)
 8002602:	f000 fb17 	bl	8002c34 <HAL_TIM_MspPostInit>

}
 8002606:	bf00      	nop
 8002608:	3738      	adds	r7, #56	; 0x38
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	200001f0 	.word	0x200001f0
 8002614:	40000400 	.word	0x40000400

08002618 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08e      	sub	sp, #56	; 0x38
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262c:	f107 0320 	add.w	r3, r7, #32
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002636:	1d3b      	adds	r3, r7, #4
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
 8002644:	615a      	str	r2, [r3, #20]
 8002646:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002648:	4b2d      	ldr	r3, [pc, #180]	; (8002700 <MX_TIM4_Init+0xe8>)
 800264a:	4a2e      	ldr	r2, [pc, #184]	; (8002704 <MX_TIM4_Init+0xec>)
 800264c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 7199;
 800264e:	4b2c      	ldr	r3, [pc, #176]	; (8002700 <MX_TIM4_Init+0xe8>)
 8002650:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8002654:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <MX_TIM4_Init+0xe8>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800265c:	4b28      	ldr	r3, [pc, #160]	; (8002700 <MX_TIM4_Init+0xe8>)
 800265e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002662:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002664:	4b26      	ldr	r3, [pc, #152]	; (8002700 <MX_TIM4_Init+0xe8>)
 8002666:	2200      	movs	r2, #0
 8002668:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800266a:	4b25      	ldr	r3, [pc, #148]	; (8002700 <MX_TIM4_Init+0xe8>)
 800266c:	2200      	movs	r2, #0
 800266e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002670:	4823      	ldr	r0, [pc, #140]	; (8002700 <MX_TIM4_Init+0xe8>)
 8002672:	f002 f800 	bl	8004676 <HAL_TIM_Base_Init>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d001      	beq.n	8002680 <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 800267c:	f000 fa5a 	bl	8002b34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002686:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800268a:	4619      	mov	r1, r3
 800268c:	481c      	ldr	r0, [pc, #112]	; (8002700 <MX_TIM4_Init+0xe8>)
 800268e:	f002 fa69 	bl	8004b64 <HAL_TIM_ConfigClockSource>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8002698:	f000 fa4c 	bl	8002b34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800269c:	4818      	ldr	r0, [pc, #96]	; (8002700 <MX_TIM4_Init+0xe8>)
 800269e:	f002 f891 	bl	80047c4 <HAL_TIM_PWM_Init>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d001      	beq.n	80026ac <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 80026a8:	f000 fa44 	bl	8002b34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80026ac:	2320      	movs	r3, #32
 80026ae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b0:	2300      	movs	r3, #0
 80026b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80026b4:	f107 0320 	add.w	r3, r7, #32
 80026b8:	4619      	mov	r1, r3
 80026ba:	4811      	ldr	r0, [pc, #68]	; (8002700 <MX_TIM4_Init+0xe8>)
 80026bc:	f002 fdf6 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 80026c0:	4603      	mov	r3, r0
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d001      	beq.n	80026ca <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 80026c6:	f000 fa35 	bl	8002b34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ca:	2360      	movs	r3, #96	; 0x60
 80026cc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80026ce:	2300      	movs	r3, #0
 80026d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026d2:	2300      	movs	r3, #0
 80026d4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d6:	2300      	movs	r3, #0
 80026d8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026da:	1d3b      	adds	r3, r7, #4
 80026dc:	2200      	movs	r2, #0
 80026de:	4619      	mov	r1, r3
 80026e0:	4807      	ldr	r0, [pc, #28]	; (8002700 <MX_TIM4_Init+0xe8>)
 80026e2:	f002 f981 	bl	80049e8 <HAL_TIM_PWM_ConfigChannel>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80026ec:	f000 fa22 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80026f0:	4803      	ldr	r0, [pc, #12]	; (8002700 <MX_TIM4_Init+0xe8>)
 80026f2:	f000 fa9f 	bl	8002c34 <HAL_TIM_MspPostInit>

}
 80026f6:	bf00      	nop
 80026f8:	3738      	adds	r7, #56	; 0x38
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	20000238 	.word	0x20000238
 8002704:	40000800 	.word	0x40000800

08002708 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800270c:	4b11      	ldr	r3, [pc, #68]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 800270e:	4a12      	ldr	r2, [pc, #72]	; (8002758 <MX_USART1_UART_Init+0x50>)
 8002710:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002712:	4b10      	ldr	r3, [pc, #64]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 8002714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002718:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800271a:	4b0e      	ldr	r3, [pc, #56]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 800271c:	2200      	movs	r2, #0
 800271e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002720:	4b0c      	ldr	r3, [pc, #48]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 8002722:	2200      	movs	r2, #0
 8002724:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002726:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 8002728:	2200      	movs	r2, #0
 800272a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800272c:	4b09      	ldr	r3, [pc, #36]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 800272e:	220c      	movs	r2, #12
 8002730:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002732:	4b08      	ldr	r3, [pc, #32]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 800273a:	2200      	movs	r2, #0
 800273c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800273e:	4805      	ldr	r0, [pc, #20]	; (8002754 <MX_USART1_UART_Init+0x4c>)
 8002740:	f002 fe20 	bl	8005384 <HAL_UART_Init>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d001      	beq.n	800274e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800274a:	f000 f9f3 	bl	8002b34 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800274e:	bf00      	nop
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	20000280 	.word	0x20000280
 8002758:	40013800 	.word	0x40013800

0800275c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002762:	f107 0318 	add.w	r3, r7, #24
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]
 800276a:	605a      	str	r2, [r3, #4]
 800276c:	609a      	str	r2, [r3, #8]
 800276e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002770:	4bb6      	ldr	r3, [pc, #728]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4ab5      	ldr	r2, [pc, #724]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 8002776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4bb3      	ldr	r3, [pc, #716]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002784:	617b      	str	r3, [r7, #20]
 8002786:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002788:	4bb0      	ldr	r3, [pc, #704]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 800278a:	699b      	ldr	r3, [r3, #24]
 800278c:	4aaf      	ldr	r2, [pc, #700]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 800278e:	f043 0310 	orr.w	r3, r3, #16
 8002792:	6193      	str	r3, [r2, #24]
 8002794:	4bad      	ldr	r3, [pc, #692]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 8002796:	699b      	ldr	r3, [r3, #24]
 8002798:	f003 0310 	and.w	r3, r3, #16
 800279c:	613b      	str	r3, [r7, #16]
 800279e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80027a0:	4baa      	ldr	r3, [pc, #680]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 80027a2:	699b      	ldr	r3, [r3, #24]
 80027a4:	4aa9      	ldr	r2, [pc, #676]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 80027a6:	f043 0304 	orr.w	r3, r3, #4
 80027aa:	6193      	str	r3, [r2, #24]
 80027ac:	4ba7      	ldr	r3, [pc, #668]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 80027ae:	699b      	ldr	r3, [r3, #24]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	60fb      	str	r3, [r7, #12]
 80027b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b8:	4ba4      	ldr	r3, [pc, #656]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	4aa3      	ldr	r2, [pc, #652]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 80027be:	f043 0308 	orr.w	r3, r3, #8
 80027c2:	6193      	str	r3, [r2, #24]
 80027c4:	4ba1      	ldr	r3, [pc, #644]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	f003 0308 	and.w	r3, r3, #8
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80027d0:	4b9e      	ldr	r3, [pc, #632]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	4a9d      	ldr	r2, [pc, #628]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 80027d6:	f043 0320 	orr.w	r3, r3, #32
 80027da:	6193      	str	r3, [r2, #24]
 80027dc:	4b9b      	ldr	r3, [pc, #620]	; (8002a4c <MX_GPIO_Init+0x2f0>)
 80027de:	699b      	ldr	r3, [r3, #24]
 80027e0:	f003 0320 	and.w	r3, r3, #32
 80027e4:	607b      	str	r3, [r7, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_TP_Pin|dir1_Pin|dir2_Pin|LCD_TPE0_Pin
 80027e8:	2200      	movs	r2, #0
 80027ea:	2167      	movs	r1, #103	; 0x67
 80027ec:	4898      	ldr	r0, [pc, #608]	; (8002a50 <MX_GPIO_Init+0x2f4>)
 80027ee:	f001 fa68 	bl	8003cc2 <HAL_GPIO_WritePin>
                          |LCD_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_12, GPIO_PIN_RESET);
 80027f2:	2200      	movs	r2, #0
 80027f4:	f241 010c 	movw	r1, #4108	; 0x100c
 80027f8:	4896      	ldr	r0, [pc, #600]	; (8002a54 <MX_GPIO_Init+0x2f8>)
 80027fa:	f001 fa62 	bl	8003cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 80027fe:	2200      	movs	r2, #0
 8002800:	21f0      	movs	r1, #240	; 0xf0
 8002802:	4895      	ldr	r0, [pc, #596]	; (8002a58 <MX_GPIO_Init+0x2fc>)
 8002804:	f001 fa5d 	bl	8003cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, onboard_led_Pin|onboard_ledB1_Pin|onboard_ledB5_Pin, GPIO_PIN_SET);
 8002808:	2201      	movs	r2, #1
 800280a:	2123      	movs	r1, #35	; 0x23
 800280c:	4893      	ldr	r0, [pc, #588]	; (8002a5c <MX_GPIO_Init+0x300>)
 800280e:	f001 fa58 	bl	8003cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_BL_Pin|LCD_TPD13_Pin|GPIO_PIN_3, GPIO_PIN_RESET);
 8002812:	2200      	movs	r2, #0
 8002814:	f243 0108 	movw	r1, #12296	; 0x3008
 8002818:	4891      	ldr	r0, [pc, #580]	; (8002a60 <MX_GPIO_Init+0x304>)
 800281a:	f001 fa52 	bl	8003cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, fan_state_Pin|fan_stateC10_Pin|fan_stateC11_Pin, GPIO_PIN_SET);
 800281e:	2201      	movs	r2, #1
 8002820:	f44f 6160 	mov.w	r1, #3584	; 0xe00
 8002824:	488c      	ldr	r0, [pc, #560]	; (8002a58 <MX_GPIO_Init+0x2fc>)
 8002826:	f001 fa4c 	bl	8003cc2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_TP_Pin dir1_Pin dir2_Pin LCD_TPE0_Pin
                           LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_TP_Pin|dir1_Pin|dir2_Pin|LCD_TPE0_Pin
 800282a:	2367      	movs	r3, #103	; 0x67
 800282c:	61bb      	str	r3, [r7, #24]
                          |LCD_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800282e:	2301      	movs	r3, #1
 8002830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002832:	2300      	movs	r3, #0
 8002834:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002836:	2303      	movs	r3, #3
 8002838:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800283a:	f107 0318 	add.w	r3, r7, #24
 800283e:	4619      	mov	r1, r3
 8002840:	4883      	ldr	r0, [pc, #524]	; (8002a50 <MX_GPIO_Init+0x2f4>)
 8002842:	f001 f893 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TPE3_Pin */
  GPIO_InitStruct.Pin = LCD_TPE3_Pin;
 8002846:	2308      	movs	r3, #8
 8002848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284e:	2301      	movs	r3, #1
 8002850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_TPE3_GPIO_Port, &GPIO_InitStruct);
 8002852:	f107 0318 	add.w	r3, r7, #24
 8002856:	4619      	mov	r1, r3
 8002858:	487d      	ldr	r0, [pc, #500]	; (8002a50 <MX_GPIO_Init+0x2f4>)
 800285a:	f001 f887 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_TP_EXT14_Pin */
  GPIO_InitStruct.Pin = LCD_TP_EXT14_Pin;
 800285e:	2310      	movs	r3, #16
 8002860:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002862:	4b80      	ldr	r3, [pc, #512]	; (8002a64 <MX_GPIO_Init+0x308>)
 8002864:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002866:	2301      	movs	r3, #1
 8002868:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_TP_EXT14_GPIO_Port, &GPIO_InitStruct);
 800286a:	f107 0318 	add.w	r3, r7, #24
 800286e:	4619      	mov	r1, r3
 8002870:	4877      	ldr	r0, [pc, #476]	; (8002a50 <MX_GPIO_Init+0x2f4>)
 8002872:	f001 f87b 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : key2_Pin */
  GPIO_InitStruct.Pin = key2_Pin;
 8002876:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800287a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800287c:	4b7a      	ldr	r3, [pc, #488]	; (8002a68 <MX_GPIO_Init+0x30c>)
 800287e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002880:	2300      	movs	r3, #0
 8002882:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key2_GPIO_Port, &GPIO_InitStruct);
 8002884:	f107 0318 	add.w	r3, r7, #24
 8002888:	4619      	mov	r1, r3
 800288a:	4873      	ldr	r0, [pc, #460]	; (8002a58 <MX_GPIO_Init+0x2fc>)
 800288c:	f001 f86e 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002890:	2308      	movs	r3, #8
 8002892:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002894:	4b73      	ldr	r3, [pc, #460]	; (8002a64 <MX_GPIO_Init+0x308>)
 8002896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002898:	2300      	movs	r3, #0
 800289a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800289c:	f107 0318 	add.w	r3, r7, #24
 80028a0:	4619      	mov	r1, r3
 80028a2:	486d      	ldr	r0, [pc, #436]	; (8002a58 <MX_GPIO_Init+0x2fc>)
 80028a4:	f001 f862 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : key1_Pin */
  GPIO_InitStruct.Pin = key1_Pin;
 80028a8:	2301      	movs	r3, #1
 80028aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80028ac:	4b6e      	ldr	r3, [pc, #440]	; (8002a68 <MX_GPIO_Init+0x30c>)
 80028ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(key1_GPIO_Port, &GPIO_InitStruct);
 80028b4:	f107 0318 	add.w	r3, r7, #24
 80028b8:	4619      	mov	r1, r3
 80028ba:	4866      	ldr	r0, [pc, #408]	; (8002a54 <MX_GPIO_Init+0x2f8>)
 80028bc:	f001 f856 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028c0:	230c      	movs	r3, #12
 80028c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c4:	2301      	movs	r3, #1
 80028c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c8:	2300      	movs	r3, #0
 80028ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028cc:	2303      	movs	r3, #3
 80028ce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028d0:	f107 0318 	add.w	r3, r7, #24
 80028d4:	4619      	mov	r1, r3
 80028d6:	485f      	ldr	r0, [pc, #380]	; (8002a54 <MX_GPIO_Init+0x2f8>)
 80028d8:	f001 f848 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80028dc:	2330      	movs	r3, #48	; 0x30
 80028de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028e0:	2301      	movs	r3, #1
 80028e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e4:	2300      	movs	r3, #0
 80028e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028e8:	2303      	movs	r3, #3
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ec:	f107 0318 	add.w	r3, r7, #24
 80028f0:	4619      	mov	r1, r3
 80028f2:	4859      	ldr	r0, [pc, #356]	; (8002a58 <MX_GPIO_Init+0x2fc>)
 80028f4:	f001 f83a 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : onboard_led_Pin onboard_ledB1_Pin onboard_ledB5_Pin */
  GPIO_InitStruct.Pin = onboard_led_Pin|onboard_ledB1_Pin|onboard_ledB5_Pin;
 80028f8:	2323      	movs	r3, #35	; 0x23
 80028fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028fc:	2301      	movs	r3, #1
 80028fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002900:	2300      	movs	r3, #0
 8002902:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002904:	2303      	movs	r3, #3
 8002906:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002908:	f107 0318 	add.w	r3, r7, #24
 800290c:	4619      	mov	r1, r3
 800290e:	4853      	ldr	r0, [pc, #332]	; (8002a5c <MX_GPIO_Init+0x300>)
 8002910:	f001 f82c 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB12 PB13
                           PB14 PB15 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8002914:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8002918:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800291a:	2300      	movs	r3, #0
 800291c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291e:	2300      	movs	r3, #0
 8002920:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002922:	f107 0318 	add.w	r3, r7, #24
 8002926:	4619      	mov	r1, r3
 8002928:	484c      	ldr	r0, [pc, #304]	; (8002a5c <MX_GPIO_Init+0x300>)
 800292a:	f001 f81f 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin LCD_TPD13_Pin PD3 */
  GPIO_InitStruct.Pin = LCD_BL_Pin|LCD_TPD13_Pin|GPIO_PIN_3;
 800292e:	f243 0308 	movw	r3, #12296	; 0x3008
 8002932:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002934:	2301      	movs	r3, #1
 8002936:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800293c:	2303      	movs	r3, #3
 800293e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002940:	f107 0318 	add.w	r3, r7, #24
 8002944:	4619      	mov	r1, r3
 8002946:	4846      	ldr	r0, [pc, #280]	; (8002a60 <MX_GPIO_Init+0x304>)
 8002948:	f001 f810 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800294c:	23c0      	movs	r3, #192	; 0xc0
 800294e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8002950:	2311      	movs	r3, #17
 8002952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002954:	2300      	movs	r3, #0
 8002956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002958:	2303      	movs	r3, #3
 800295a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800295c:	f107 0318 	add.w	r3, r7, #24
 8002960:	4619      	mov	r1, r3
 8002962:	483d      	ldr	r0, [pc, #244]	; (8002a58 <MX_GPIO_Init+0x2fc>)
 8002964:	f001 f802 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : btn_Pin */
  GPIO_InitStruct.Pin = btn_Pin;
 8002968:	f44f 7380 	mov.w	r3, #256	; 0x100
 800296c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800296e:	4b3d      	ldr	r3, [pc, #244]	; (8002a64 <MX_GPIO_Init+0x308>)
 8002970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002972:	2301      	movs	r3, #1
 8002974:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(btn_GPIO_Port, &GPIO_InitStruct);
 8002976:	f107 0318 	add.w	r3, r7, #24
 800297a:	4619      	mov	r1, r3
 800297c:	4836      	ldr	r0, [pc, #216]	; (8002a58 <MX_GPIO_Init+0x2fc>)
 800297e:	f000 fff5 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pins : fan_state_Pin fan_stateC10_Pin fan_stateC11_Pin */
  GPIO_InitStruct.Pin = fan_state_Pin|fan_stateC10_Pin|fan_stateC11_Pin;
 8002982:	f44f 6360 	mov.w	r3, #3584	; 0xe00
 8002986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002988:	2301      	movs	r3, #1
 800298a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298c:	2300      	movs	r3, #0
 800298e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002990:	2302      	movs	r3, #2
 8002992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002994:	f107 0318 	add.w	r3, r7, #24
 8002998:	4619      	mov	r1, r3
 800299a:	482f      	ldr	r0, [pc, #188]	; (8002a58 <MX_GPIO_Init+0x2fc>)
 800299c:	f000 ffe6 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a6:	2302      	movs	r3, #2
 80029a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80029aa:	2303      	movs	r3, #3
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ae:	f107 0318 	add.w	r3, r7, #24
 80029b2:	4619      	mov	r1, r3
 80029b4:	4827      	ldr	r0, [pc, #156]	; (8002a54 <MX_GPIO_Init+0x2f8>)
 80029b6:	f000 ffd9 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80029ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80029be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80029c0:	2300      	movs	r3, #0
 80029c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c4:	2300      	movs	r3, #0
 80029c6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029c8:	f107 0318 	add.w	r3, r7, #24
 80029cc:	4619      	mov	r1, r3
 80029ce:	4821      	ldr	r0, [pc, #132]	; (8002a54 <MX_GPIO_Init+0x2f8>)
 80029d0:	f000 ffcc 	bl	800396c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80029d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029da:	2301      	movs	r3, #1
 80029dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029e2:	2302      	movs	r3, #2
 80029e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e6:	f107 0318 	add.w	r3, r7, #24
 80029ea:	4619      	mov	r1, r3
 80029ec:	4819      	ldr	r0, [pc, #100]	; (8002a54 <MX_GPIO_Init+0x2f8>)
 80029ee:	f000 ffbd 	bl	800396c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2101      	movs	r1, #1
 80029f6:	2006      	movs	r0, #6
 80029f8:	f000 ff81 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80029fc:	2006      	movs	r0, #6
 80029fe:	f000 ff9a 	bl	8003936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2101      	movs	r1, #1
 8002a06:	2009      	movs	r0, #9
 8002a08:	f000 ff79 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002a0c:	2009      	movs	r0, #9
 8002a0e:	f000 ff92 	bl	8003936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 1, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2101      	movs	r1, #1
 8002a16:	200a      	movs	r0, #10
 8002a18:	f000 ff71 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002a1c:	200a      	movs	r0, #10
 8002a1e:	f000 ff8a 	bl	8003936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2101      	movs	r1, #1
 8002a26:	2017      	movs	r0, #23
 8002a28:	f000 ff69 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002a2c:	2017      	movs	r0, #23
 8002a2e:	f000 ff82 	bl	8003936 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2101      	movs	r1, #1
 8002a36:	2028      	movs	r0, #40	; 0x28
 8002a38:	f000 ff61 	bl	80038fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a3c:	2028      	movs	r0, #40	; 0x28
 8002a3e:	f000 ff7a 	bl	8003936 <HAL_NVIC_EnableIRQ>

}
 8002a42:	bf00      	nop
 8002a44:	3728      	adds	r7, #40	; 0x28
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	40011800 	.word	0x40011800
 8002a54:	40010800 	.word	0x40010800
 8002a58:	40011000 	.word	0x40011000
 8002a5c:	40010c00 	.word	0x40010c00
 8002a60:	40011400 	.word	0x40011400
 8002a64:	10210000 	.word	0x10210000
 8002a68:	10110000 	.word	0x10110000

08002a6c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b088      	sub	sp, #32
 8002a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002a72:	1d3b      	adds	r3, r7, #4
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	611a      	str	r2, [r3, #16]
 8002a80:	615a      	str	r2, [r3, #20]
 8002a82:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002a84:	4b28      	ldr	r3, [pc, #160]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002a86:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8002a8a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002a8c:	4b26      	ldr	r3, [pc, #152]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002a8e:	4a27      	ldr	r2, [pc, #156]	; (8002b2c <MX_FSMC_Init+0xc0>)
 8002a90:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002a92:	4b25      	ldr	r3, [pc, #148]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002a98:	4b23      	ldr	r3, [pc, #140]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8002a9e:	4b22      	ldr	r3, [pc, #136]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002aa4:	4b20      	ldr	r3, [pc, #128]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002aa6:	2210      	movs	r2, #16
 8002aa8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002aaa:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002aac:	2200      	movs	r2, #0
 8002aae:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002ab0:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002ab6:	4b1c      	ldr	r3, [pc, #112]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002ab8:	2200      	movs	r2, #0
 8002aba:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002abc:	4b1a      	ldr	r3, [pc, #104]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002abe:	2200      	movs	r2, #0
 8002ac0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8002ac2:	4b19      	ldr	r3, [pc, #100]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002ac4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002ac8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002aca:	4b17      	ldr	r3, [pc, #92]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002acc:	2200      	movs	r2, #0
 8002ace:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002ad6:	4b14      	ldr	r3, [pc, #80]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002ad8:	2200      	movs	r2, #0
 8002ada:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002adc:	4b12      	ldr	r3, [pc, #72]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002ade:	2200      	movs	r2, #0
 8002ae0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Timing */
  Timing.AddressSetupTime = 15;
 8002ae2:	230f      	movs	r3, #15
 8002ae4:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002ae6:	230f      	movs	r3, #15
 8002ae8:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 8002aea:	23ff      	movs	r3, #255	; 0xff
 8002aec:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8002aee:	230f      	movs	r3, #15
 8002af0:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002af2:	2310      	movs	r3, #16
 8002af4:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002af6:	2311      	movs	r3, #17
 8002af8:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	2200      	movs	r2, #0
 8002b02:	4619      	mov	r1, r3
 8002b04:	4808      	ldr	r0, [pc, #32]	; (8002b28 <MX_FSMC_Init+0xbc>)
 8002b06:	f001 fd69 	bl	80045dc <HAL_SRAM_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_FSMC_Init+0xa8>
  {
    Error_Handler( );
 8002b10:	f000 f810 	bl	8002b34 <Error_Handler>
  }

  /** Disconnect NADV
  */

  __HAL_AFIO_FSMCNADV_DISCONNECTED();
 8002b14:	4b06      	ldr	r3, [pc, #24]	; (8002b30 <MX_FSMC_Init+0xc4>)
 8002b16:	69db      	ldr	r3, [r3, #28]
 8002b18:	4a05      	ldr	r2, [pc, #20]	; (8002b30 <MX_FSMC_Init+0xc4>)
 8002b1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b1e:	61d3      	str	r3, [r2, #28]

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002b20:	bf00      	nop
 8002b22:	3720      	adds	r7, #32
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	200002c4 	.word	0x200002c4
 8002b2c:	a0000104 	.word	0xa0000104
 8002b30:	40010000 	.word	0x40010000

08002b34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002b34:	b480      	push	{r7}
 8002b36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b38:	b672      	cpsid	i
}
 8002b3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  /* USER CODE END Error_Handler_Debug */
}
 8002b3c:	bf00      	nop
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b085      	sub	sp, #20
 8002b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002b4a:	4b15      	ldr	r3, [pc, #84]	; (8002ba0 <HAL_MspInit+0x5c>)
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	4a14      	ldr	r2, [pc, #80]	; (8002ba0 <HAL_MspInit+0x5c>)
 8002b50:	f043 0301 	orr.w	r3, r3, #1
 8002b54:	6193      	str	r3, [r2, #24]
 8002b56:	4b12      	ldr	r3, [pc, #72]	; (8002ba0 <HAL_MspInit+0x5c>)
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f003 0301 	and.w	r3, r3, #1
 8002b5e:	60bb      	str	r3, [r7, #8]
 8002b60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b62:	4b0f      	ldr	r3, [pc, #60]	; (8002ba0 <HAL_MspInit+0x5c>)
 8002b64:	69db      	ldr	r3, [r3, #28]
 8002b66:	4a0e      	ldr	r2, [pc, #56]	; (8002ba0 <HAL_MspInit+0x5c>)
 8002b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b6c:	61d3      	str	r3, [r2, #28]
 8002b6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <HAL_MspInit+0x5c>)
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b76:	607b      	str	r3, [r7, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002b7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ba4 <HAL_MspInit+0x60>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	4a04      	ldr	r2, [pc, #16]	; (8002ba4 <HAL_MspInit+0x60>)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b96:	bf00      	nop
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr
 8002ba0:	40021000 	.word	0x40021000
 8002ba4:	40010000 	.word	0x40010000

08002ba8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1b      	ldr	r2, [pc, #108]	; (8002c24 <HAL_TIM_Base_MspInit+0x7c>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d10c      	bne.n	8002bd4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002bba:	4b1b      	ldr	r3, [pc, #108]	; (8002c28 <HAL_TIM_Base_MspInit+0x80>)
 8002bbc:	699b      	ldr	r3, [r3, #24]
 8002bbe:	4a1a      	ldr	r2, [pc, #104]	; (8002c28 <HAL_TIM_Base_MspInit+0x80>)
 8002bc0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002bc4:	6193      	str	r3, [r2, #24]
 8002bc6:	4b18      	ldr	r3, [pc, #96]	; (8002c28 <HAL_TIM_Base_MspInit+0x80>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bce:	617b      	str	r3, [r7, #20]
 8002bd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002bd2:	e022      	b.n	8002c1a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a14      	ldr	r2, [pc, #80]	; (8002c2c <HAL_TIM_Base_MspInit+0x84>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bde:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_TIM_Base_MspInit+0x80>)
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_TIM_Base_MspInit+0x80>)
 8002be4:	f043 0302 	orr.w	r3, r3, #2
 8002be8:	61d3      	str	r3, [r2, #28]
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_TIM_Base_MspInit+0x80>)
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	f003 0302 	and.w	r3, r3, #2
 8002bf2:	613b      	str	r3, [r7, #16]
 8002bf4:	693b      	ldr	r3, [r7, #16]
}
 8002bf6:	e010      	b.n	8002c1a <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM4)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0c      	ldr	r2, [pc, #48]	; (8002c30 <HAL_TIM_Base_MspInit+0x88>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d10b      	bne.n	8002c1a <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_TIM_Base_MspInit+0x80>)
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <HAL_TIM_Base_MspInit+0x80>)
 8002c08:	f043 0304 	orr.w	r3, r3, #4
 8002c0c:	61d3      	str	r3, [r2, #28]
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_TIM_Base_MspInit+0x80>)
 8002c10:	69db      	ldr	r3, [r3, #28]
 8002c12:	f003 0304 	and.w	r3, r3, #4
 8002c16:	60fb      	str	r3, [r7, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
}
 8002c1a:	bf00      	nop
 8002c1c:	371c      	adds	r7, #28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bc80      	pop	{r7}
 8002c22:	4770      	bx	lr
 8002c24:	40012c00 	.word	0x40012c00
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40000400 	.word	0x40000400
 8002c30:	40000800 	.word	0x40000800

08002c34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b088      	sub	sp, #32
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0310 	add.w	r3, r7, #16
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	; (8002cc8 <HAL_TIM_MspPostInit+0x94>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d118      	bne.n	8002c86 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c54:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <HAL_TIM_MspPostInit+0x98>)
 8002c56:	699b      	ldr	r3, [r3, #24]
 8002c58:	4a1c      	ldr	r2, [pc, #112]	; (8002ccc <HAL_TIM_MspPostInit+0x98>)
 8002c5a:	f043 0304 	orr.w	r3, r3, #4
 8002c5e:	6193      	str	r3, [r2, #24]
 8002c60:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <HAL_TIM_MspPostInit+0x98>)
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
 8002c6a:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = step1_Pin|step2_Pin;
 8002c6c:	23c0      	movs	r3, #192	; 0xc0
 8002c6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c70:	2302      	movs	r3, #2
 8002c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c74:	2303      	movs	r3, #3
 8002c76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 0310 	add.w	r3, r7, #16
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4814      	ldr	r0, [pc, #80]	; (8002cd0 <HAL_TIM_MspPostInit+0x9c>)
 8002c80:	f000 fe74 	bl	800396c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002c84:	e01c      	b.n	8002cc0 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM4)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <HAL_TIM_MspPostInit+0xa0>)
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d117      	bne.n	8002cc0 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c90:	4b0e      	ldr	r3, [pc, #56]	; (8002ccc <HAL_TIM_MspPostInit+0x98>)
 8002c92:	699b      	ldr	r3, [r3, #24]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	; (8002ccc <HAL_TIM_MspPostInit+0x98>)
 8002c96:	f043 0308 	orr.w	r3, r3, #8
 8002c9a:	6193      	str	r3, [r2, #24]
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	; (8002ccc <HAL_TIM_MspPostInit+0x98>)
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f003 0308 	and.w	r3, r3, #8
 8002ca4:	60bb      	str	r3, [r7, #8]
 8002ca6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FAN_Pin;
 8002ca8:	2340      	movs	r3, #64	; 0x40
 8002caa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002cb0:	2303      	movs	r3, #3
 8002cb2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(FAN_GPIO_Port, &GPIO_InitStruct);
 8002cb4:	f107 0310 	add.w	r3, r7, #16
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4807      	ldr	r0, [pc, #28]	; (8002cd8 <HAL_TIM_MspPostInit+0xa4>)
 8002cbc:	f000 fe56 	bl	800396c <HAL_GPIO_Init>
}
 8002cc0:	bf00      	nop
 8002cc2:	3720      	adds	r7, #32
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	40000400 	.word	0x40000400
 8002ccc:	40021000 	.word	0x40021000
 8002cd0:	40010800 	.word	0x40010800
 8002cd4:	40000800 	.word	0x40000800
 8002cd8:	40010c00 	.word	0x40010c00

08002cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b088      	sub	sp, #32
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ce4:	f107 0310 	add.w	r3, r7, #16
 8002ce8:	2200      	movs	r2, #0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	605a      	str	r2, [r3, #4]
 8002cee:	609a      	str	r2, [r3, #8]
 8002cf0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a1c      	ldr	r2, [pc, #112]	; (8002d68 <HAL_UART_MspInit+0x8c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d131      	bne.n	8002d60 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002cfc:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002cfe:	699b      	ldr	r3, [r3, #24]
 8002d00:	4a1a      	ldr	r2, [pc, #104]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002d02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d06:	6193      	str	r3, [r2, #24]
 8002d08:	4b18      	ldr	r3, [pc, #96]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002d0a:	699b      	ldr	r3, [r3, #24]
 8002d0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d10:	60fb      	str	r3, [r7, #12]
 8002d12:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d14:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002d16:	699b      	ldr	r3, [r3, #24]
 8002d18:	4a14      	ldr	r2, [pc, #80]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002d1a:	f043 0304 	orr.w	r3, r3, #4
 8002d1e:	6193      	str	r3, [r2, #24]
 8002d20:	4b12      	ldr	r3, [pc, #72]	; (8002d6c <HAL_UART_MspInit+0x90>)
 8002d22:	699b      	ldr	r3, [r3, #24]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002d2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002d30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d32:	2302      	movs	r3, #2
 8002d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002d36:	2303      	movs	r3, #3
 8002d38:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3a:	f107 0310 	add.w	r3, r7, #16
 8002d3e:	4619      	mov	r1, r3
 8002d40:	480b      	ldr	r0, [pc, #44]	; (8002d70 <HAL_UART_MspInit+0x94>)
 8002d42:	f000 fe13 	bl	800396c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002d46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d4a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d54:	f107 0310 	add.w	r3, r7, #16
 8002d58:	4619      	mov	r1, r3
 8002d5a:	4805      	ldr	r0, [pc, #20]	; (8002d70 <HAL_UART_MspInit+0x94>)
 8002d5c:	f000 fe06 	bl	800396c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002d60:	bf00      	nop
 8002d62:	3720      	adds	r7, #32
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40013800 	.word	0x40013800
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	40010800 	.word	0x40010800

08002d74 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002d7a:	f107 0308 	add.w	r3, r7, #8
 8002d7e:	2200      	movs	r2, #0
 8002d80:	601a      	str	r2, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	60da      	str	r2, [r3, #12]
  if (FSMC_Initialized) {
 8002d88:	4b18      	ldr	r3, [pc, #96]	; (8002dec <HAL_FSMC_MspInit+0x78>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d129      	bne.n	8002de4 <HAL_FSMC_MspInit+0x70>
    return;
  }
  FSMC_Initialized = 1;
 8002d90:	4b16      	ldr	r3, [pc, #88]	; (8002dec <HAL_FSMC_MspInit+0x78>)
 8002d92:	2201      	movs	r2, #1
 8002d94:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002d96:	4b16      	ldr	r3, [pc, #88]	; (8002df0 <HAL_FSMC_MspInit+0x7c>)
 8002d98:	695b      	ldr	r3, [r3, #20]
 8002d9a:	4a15      	ldr	r2, [pc, #84]	; (8002df0 <HAL_FSMC_MspInit+0x7c>)
 8002d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002da0:	6153      	str	r3, [r2, #20]
 8002da2:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <HAL_FSMC_MspInit+0x7c>)
 8002da4:	695b      	ldr	r3, [r3, #20]
 8002da6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002daa:	607b      	str	r3, [r7, #4]
 8002dac:	687b      	ldr	r3, [r7, #4]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002dae:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002db2:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002db4:	2302      	movs	r3, #2
 8002db6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002db8:	2303      	movs	r3, #3
 8002dba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002dbc:	f107 0308 	add.w	r3, r7, #8
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	480c      	ldr	r0, [pc, #48]	; (8002df4 <HAL_FSMC_MspInit+0x80>)
 8002dc4:	f000 fdd2 	bl	800396c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8002dc8:	f64c 73b3 	movw	r3, #53171	; 0xcfb3
 8002dcc:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002dd6:	f107 0308 	add.w	r3, r7, #8
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4806      	ldr	r0, [pc, #24]	; (8002df8 <HAL_FSMC_MspInit+0x84>)
 8002dde:	f000 fdc5 	bl	800396c <HAL_GPIO_Init>
 8002de2:	e000      	b.n	8002de6 <HAL_FSMC_MspInit+0x72>
    return;
 8002de4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002de6:	3718      	adds	r7, #24
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	2000032c 	.word	0x2000032c
 8002df0:	40021000 	.word	0x40021000
 8002df4:	40011800 	.word	0x40011800
 8002df8:	40011400 	.word	0x40011400

08002dfc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002e04:	f7ff ffb6 	bl	8002d74 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002e08:	bf00      	nop
 8002e0a:	3708      	adds	r7, #8
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}

08002e10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002e14:	e7fe      	b.n	8002e14 <NMI_Handler+0x4>

08002e16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002e16:	b480      	push	{r7}
 8002e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002e1a:	e7fe      	b.n	8002e1a <HardFault_Handler+0x4>

08002e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002e20:	e7fe      	b.n	8002e20 <MemManage_Handler+0x4>

08002e22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002e22:	b480      	push	{r7}
 8002e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002e26:	e7fe      	b.n	8002e26 <BusFault_Handler+0x4>

08002e28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002e2c:	e7fe      	b.n	8002e2c <UsageFault_Handler+0x4>

08002e2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002e32:	bf00      	nop
 8002e34:	46bd      	mov	sp, r7
 8002e36:	bc80      	pop	{r7}
 8002e38:	4770      	bx	lr

08002e3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002e3a:	b480      	push	{r7}
 8002e3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002e3e:	bf00      	nop
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bc80      	pop	{r7}
 8002e44:	4770      	bx	lr

08002e46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002e46:	b480      	push	{r7}
 8002e48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002e4a:	bf00      	nop
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bc80      	pop	{r7}
 8002e50:	4770      	bx	lr

08002e52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002e52:	b580      	push	{r7, lr}
 8002e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002e56:	f000 fc3b 	bl	80036d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002e5a:	bf00      	nop
 8002e5c:	bd80      	pop	{r7, pc}
	...

08002e60 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_0) != RESET)
 8002e64:	4b09      	ldr	r3, [pc, #36]	; (8002e8c <EXTI0_IRQHandler+0x2c>)
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0301 	and.w	r3, r3, #1
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d007      	beq.n	8002e80 <EXTI0_IRQHandler+0x20>
	{
		stepper_up();
 8002e70:	f7fe feb0 	bl	8001bd4 <stepper_up>

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_0);
 8002e74:	4b05      	ldr	r3, [pc, #20]	; (8002e8c <EXTI0_IRQHandler+0x2c>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_0);
 8002e7a:	2001      	movs	r0, #1
 8002e7c:	f000 ff52 	bl	8003d24 <HAL_GPIO_EXTI_Callback>
	}
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(key1_Pin);
 8002e80:	2001      	movs	r0, #1
 8002e82:	f000 ff37 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	40010400 	.word	0x40010400

08002e90 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_3) != RESET)
 8002e94:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <EXTI3_IRQHandler+0x64>)
 8002e96:	695b      	ldr	r3, [r3, #20]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d023      	beq.n	8002ee8 <EXTI3_IRQHandler+0x58>
  {
		if( Ov7725_vsync == 0 )
 8002ea0:	4b15      	ldr	r3, [pc, #84]	; (8002ef8 <EXTI3_IRQHandler+0x68>)
 8002ea2:	781b      	ldrb	r3, [r3, #0]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d10f      	bne.n	8002ec8 <EXTI3_IRQHandler+0x38>
    {
				FIFO_WRST_L();
 8002ea8:	4b14      	ldr	r3, [pc, #80]	; (8002efc <EXTI3_IRQHandler+0x6c>)
 8002eaa:	2210      	movs	r2, #16
 8002eac:	615a      	str	r2, [r3, #20]
        FIFO_WE_H();
 8002eae:	4b14      	ldr	r3, [pc, #80]	; (8002f00 <EXTI3_IRQHandler+0x70>)
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	611a      	str	r2, [r3, #16]

        Ov7725_vsync = 1;
 8002eb4:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <EXTI3_IRQHandler+0x68>)
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	701a      	strb	r2, [r3, #0]
        FIFO_WE_H();
 8002eba:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <EXTI3_IRQHandler+0x70>)
 8002ebc:	2208      	movs	r2, #8
 8002ebe:	611a      	str	r2, [r3, #16]
        FIFO_WRST_H();
 8002ec0:	4b0e      	ldr	r3, [pc, #56]	; (8002efc <EXTI3_IRQHandler+0x6c>)
 8002ec2:	2210      	movs	r2, #16
 8002ec4:	611a      	str	r2, [r3, #16]
 8002ec6:	e009      	b.n	8002edc <EXTI3_IRQHandler+0x4c>
    }
    else if( Ov7725_vsync == 1 )
 8002ec8:	4b0b      	ldr	r3, [pc, #44]	; (8002ef8 <EXTI3_IRQHandler+0x68>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d105      	bne.n	8002edc <EXTI3_IRQHandler+0x4c>
    {
        FIFO_WE_L();
 8002ed0:	4b0b      	ldr	r3, [pc, #44]	; (8002f00 <EXTI3_IRQHandler+0x70>)
 8002ed2:	2208      	movs	r2, #8
 8002ed4:	615a      	str	r2, [r3, #20]
        Ov7725_vsync = 2;
 8002ed6:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <EXTI3_IRQHandler+0x68>)
 8002ed8:	2202      	movs	r2, #2
 8002eda:	701a      	strb	r2, [r3, #0]
    }


    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_3);
 8002edc:	4b05      	ldr	r3, [pc, #20]	; (8002ef4 <EXTI3_IRQHandler+0x64>)
 8002ede:	2208      	movs	r2, #8
 8002ee0:	615a      	str	r2, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_PIN_3);
 8002ee2:	2008      	movs	r0, #8
 8002ee4:	f000 ff1e 	bl	8003d24 <HAL_GPIO_EXTI_Callback>
  }

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002ee8:	2008      	movs	r0, #8
 8002eea:	f000 ff03 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002eee:	bf00      	nop
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40010400 	.word	0x40010400
 8002ef8:	2000030c 	.word	0x2000030c
 8002efc:	40011000 	.word	0x40011000
 8002f00:	40011400 	.word	0x40011400

08002f04 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_4) != RESET)
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <EXTI4_IRQHandler+0x28>)
 8002f0a:	695b      	ldr	r3, [r3, #20]
 8002f0c:	f003 0310 	and.w	r3, r3, #16
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <EXTI4_IRQHandler+0x1c>
	  {
//			  ucXPT2046_TouchFlag = 1;
//			  Check_touchkey();

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_4);
 8002f14:	4b05      	ldr	r3, [pc, #20]	; (8002f2c <EXTI4_IRQHandler+0x28>)
 8002f16:	2210      	movs	r2, #16
 8002f18:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_4);
 8002f1a:	2010      	movs	r0, #16
 8002f1c:	f000 ff02 	bl	8003d24 <HAL_GPIO_EXTI_Callback>
	  }
  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LCD_TP_EXT14_Pin);
 8002f20:	2010      	movs	r0, #16
 8002f22:	f000 fee7 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002f26:	bf00      	nop
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40010400 	.word	0x40010400

08002f30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */
	HAL_Delay(200);
 8002f34:	20c8      	movs	r0, #200	; 0xc8
 8002f36:	f000 fbe7 	bl	8003708 <HAL_Delay>
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_8) != SET)
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <EXTI9_5_IRQHandler+0x34>)
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d007      	beq.n	8002f56 <EXTI9_5_IRQHandler+0x26>
	{
		//fan();

		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_8);
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <EXTI9_5_IRQHandler+0x34>)
 8002f48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f4c:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_8);
 8002f4e:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f52:	f000 fee7 	bl	8003d24 <HAL_GPIO_EXTI_Callback>

	}

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(btn_Pin);
 8002f56:	f44f 7080 	mov.w	r0, #256	; 0x100
 8002f5a:	f000 fecb 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f5e:	bf00      	nop
 8002f60:	bd80      	pop	{r7, pc}
 8002f62:	bf00      	nop
 8002f64:	40010400 	.word	0x40010400

08002f68 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	if (__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_13) != RESET)
 8002f6c:	4b0a      	ldr	r3, [pc, #40]	; (8002f98 <EXTI15_10_IRQHandler+0x30>)
 8002f6e:	695b      	ldr	r3, [r3, #20]
 8002f70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d009      	beq.n	8002f8c <EXTI15_10_IRQHandler+0x24>
	{
		stepper_stop();
 8002f78:	f7fe fe46 	bl	8001c08 <stepper_stop>
		//fan();


		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);
 8002f7c:	4b06      	ldr	r3, [pc, #24]	; (8002f98 <EXTI15_10_IRQHandler+0x30>)
 8002f7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002f82:	615a      	str	r2, [r3, #20]
		HAL_GPIO_EXTI_Callback(GPIO_PIN_13);
 8002f84:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f88:	f000 fecc 	bl	8003d24 <HAL_GPIO_EXTI_Callback>

	}
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(key2_Pin);
 8002f8c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002f90:	f000 feb0 	bl	8003cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	bd80      	pop	{r7, pc}
 8002f98:	40010400 	.word	0x40010400

08002f9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b086      	sub	sp, #24
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002fa4:	4a14      	ldr	r2, [pc, #80]	; (8002ff8 <_sbrk+0x5c>)
 8002fa6:	4b15      	ldr	r3, [pc, #84]	; (8002ffc <_sbrk+0x60>)
 8002fa8:	1ad3      	subs	r3, r2, r3
 8002faa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fb0:	4b13      	ldr	r3, [pc, #76]	; (8003000 <_sbrk+0x64>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d102      	bne.n	8002fbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb8:	4b11      	ldr	r3, [pc, #68]	; (8003000 <_sbrk+0x64>)
 8002fba:	4a12      	ldr	r2, [pc, #72]	; (8003004 <_sbrk+0x68>)
 8002fbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fbe:	4b10      	ldr	r3, [pc, #64]	; (8003000 <_sbrk+0x64>)
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d207      	bcs.n	8002fdc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fcc:	f002 fd0a 	bl	80059e4 <__errno>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	220c      	movs	r2, #12
 8002fd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fd6:	f04f 33ff 	mov.w	r3, #4294967295
 8002fda:	e009      	b.n	8002ff0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fdc:	4b08      	ldr	r3, [pc, #32]	; (8003000 <_sbrk+0x64>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fe2:	4b07      	ldr	r3, [pc, #28]	; (8003000 <_sbrk+0x64>)
 8002fe4:	681a      	ldr	r2, [r3, #0]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4413      	add	r3, r2
 8002fea:	4a05      	ldr	r2, [pc, #20]	; (8003000 <_sbrk+0x64>)
 8002fec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fee:	68fb      	ldr	r3, [r7, #12]
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3718      	adds	r7, #24
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20010000 	.word	0x20010000
 8002ffc:	00000400 	.word	0x00000400
 8003000:	20000330 	.word	0x20000330
 8003004:	20000350 	.word	0x20000350

08003008 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003008:	b480      	push	{r7}
 800300a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800300c:	bf00      	nop
 800300e:	46bd      	mov	sp, r7
 8003010:	bc80      	pop	{r7}
 8003012:	4770      	bx	lr

08003014 <XPT2046_DelayUS>:



	
static void XPT2046_DelayUS ( __IO uint32_t ulCount )
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
	uint32_t i;


	for ( i = 0; i < ulCount; i ++ )
 800301c:	2300      	movs	r3, #0
 800301e:	60fb      	str	r3, [r7, #12]
 8003020:	e00a      	b.n	8003038 <XPT2046_DelayUS+0x24>
	{
		uint8_t uc = 12;     
 8003022:	230c      	movs	r3, #12
 8003024:	72fb      	strb	r3, [r7, #11]
	      
		while ( uc -- );     
 8003026:	bf00      	nop
 8003028:	7afb      	ldrb	r3, [r7, #11]
 800302a:	1e5a      	subs	r2, r3, #1
 800302c:	72fa      	strb	r2, [r7, #11]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1fa      	bne.n	8003028 <XPT2046_DelayUS+0x14>
	for ( i = 0; i < ulCount; i ++ )
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	3301      	adds	r3, #1
 8003036:	60fb      	str	r3, [r7, #12]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	429a      	cmp	r2, r3
 800303e:	d3f0      	bcc.n	8003022 <XPT2046_DelayUS+0xe>

	}
	
}
 8003040:	bf00      	nop
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	bc80      	pop	{r7}
 800304a:	4770      	bx	lr

0800304c <XPT2046_WriteCMD>:


static void XPT2046_WriteCMD ( uint8_t ucCmd ) 
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	4603      	mov	r3, r0
 8003054:	71fb      	strb	r3, [r7, #7]
	uint8_t i;


	macXPT2046_MOSI_0();
 8003056:	2200      	movs	r2, #0
 8003058:	2104      	movs	r1, #4
 800305a:	481d      	ldr	r0, [pc, #116]	; (80030d0 <XPT2046_WriteCMD+0x84>)
 800305c:	f000 fe31 	bl	8003cc2 <HAL_GPIO_WritePin>
	
	macXPT2046_CLK_LOW();
 8003060:	2200      	movs	r2, #0
 8003062:	2101      	movs	r1, #1
 8003064:	481a      	ldr	r0, [pc, #104]	; (80030d0 <XPT2046_WriteCMD+0x84>)
 8003066:	f000 fe2c 	bl	8003cc2 <HAL_GPIO_WritePin>

	for ( i = 0; i < 8; i ++ ) 
 800306a:	2300      	movs	r3, #0
 800306c:	73fb      	strb	r3, [r7, #15]
 800306e:	e027      	b.n	80030c0 <XPT2046_WriteCMD+0x74>
	{
		( ( ucCmd >> ( 7 - i ) ) & 0x01 ) ? macXPT2046_MOSI_1() : macXPT2046_MOSI_0();
 8003070:	79fa      	ldrb	r2, [r7, #7]
 8003072:	7bfb      	ldrb	r3, [r7, #15]
 8003074:	f1c3 0307 	rsb	r3, r3, #7
 8003078:	fa42 f303 	asr.w	r3, r2, r3
 800307c:	f003 0301 	and.w	r3, r3, #1
 8003080:	2b00      	cmp	r3, #0
 8003082:	d005      	beq.n	8003090 <XPT2046_WriteCMD+0x44>
 8003084:	2201      	movs	r2, #1
 8003086:	2104      	movs	r1, #4
 8003088:	4811      	ldr	r0, [pc, #68]	; (80030d0 <XPT2046_WriteCMD+0x84>)
 800308a:	f000 fe1a 	bl	8003cc2 <HAL_GPIO_WritePin>
 800308e:	e004      	b.n	800309a <XPT2046_WriteCMD+0x4e>
 8003090:	2200      	movs	r2, #0
 8003092:	2104      	movs	r1, #4
 8003094:	480e      	ldr	r0, [pc, #56]	; (80030d0 <XPT2046_WriteCMD+0x84>)
 8003096:	f000 fe14 	bl	8003cc2 <HAL_GPIO_WritePin>
		
	  XPT2046_DelayUS ( 5 );
 800309a:	2005      	movs	r0, #5
 800309c:	f7ff ffba 	bl	8003014 <XPT2046_DelayUS>
		
		macXPT2046_CLK_HIGH();
 80030a0:	2201      	movs	r2, #1
 80030a2:	2101      	movs	r1, #1
 80030a4:	480a      	ldr	r0, [pc, #40]	; (80030d0 <XPT2046_WriteCMD+0x84>)
 80030a6:	f000 fe0c 	bl	8003cc2 <HAL_GPIO_WritePin>

	  XPT2046_DelayUS ( 5 );
 80030aa:	2005      	movs	r0, #5
 80030ac:	f7ff ffb2 	bl	8003014 <XPT2046_DelayUS>

		macXPT2046_CLK_LOW();
 80030b0:	2200      	movs	r2, #0
 80030b2:	2101      	movs	r1, #1
 80030b4:	4806      	ldr	r0, [pc, #24]	; (80030d0 <XPT2046_WriteCMD+0x84>)
 80030b6:	f000 fe04 	bl	8003cc2 <HAL_GPIO_WritePin>
	for ( i = 0; i < 8; i ++ ) 
 80030ba:	7bfb      	ldrb	r3, [r7, #15]
 80030bc:	3301      	adds	r3, #1
 80030be:	73fb      	strb	r3, [r7, #15]
 80030c0:	7bfb      	ldrb	r3, [r7, #15]
 80030c2:	2b07      	cmp	r3, #7
 80030c4:	d9d4      	bls.n	8003070 <XPT2046_WriteCMD+0x24>
	}
	
}
 80030c6:	bf00      	nop
 80030c8:	bf00      	nop
 80030ca:	3710      	adds	r7, #16
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	40011800 	.word	0x40011800

080030d4 <XPT2046_ReadCMD>:


static uint16_t XPT2046_ReadCMD ( void ) 
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
	uint8_t i;
	uint16_t usBuf=0, usTemp;
 80030da:	2300      	movs	r3, #0
 80030dc:	80bb      	strh	r3, [r7, #4]
	


	macXPT2046_MOSI_0();
 80030de:	2200      	movs	r2, #0
 80030e0:	2104      	movs	r1, #4
 80030e2:	4819      	ldr	r0, [pc, #100]	; (8003148 <XPT2046_ReadCMD+0x74>)
 80030e4:	f000 fded 	bl	8003cc2 <HAL_GPIO_WritePin>

	macXPT2046_CLK_HIGH();
 80030e8:	2201      	movs	r2, #1
 80030ea:	2101      	movs	r1, #1
 80030ec:	4816      	ldr	r0, [pc, #88]	; (8003148 <XPT2046_ReadCMD+0x74>)
 80030ee:	f000 fde8 	bl	8003cc2 <HAL_GPIO_WritePin>

	for ( i=0;i<12;i++ ) 
 80030f2:	2300      	movs	r3, #0
 80030f4:	71fb      	strb	r3, [r7, #7]
 80030f6:	e01e      	b.n	8003136 <XPT2046_ReadCMD+0x62>
	{
		macXPT2046_CLK_LOW();    
 80030f8:	2200      	movs	r2, #0
 80030fa:	2101      	movs	r1, #1
 80030fc:	4812      	ldr	r0, [pc, #72]	; (8003148 <XPT2046_ReadCMD+0x74>)
 80030fe:	f000 fde0 	bl	8003cc2 <HAL_GPIO_WritePin>
	
		usTemp = macXPT2046_MISO();
 8003102:	2108      	movs	r1, #8
 8003104:	4810      	ldr	r0, [pc, #64]	; (8003148 <XPT2046_ReadCMD+0x74>)
 8003106:	f000 fdc5 	bl	8003c94 <HAL_GPIO_ReadPin>
 800310a:	4603      	mov	r3, r0
 800310c:	807b      	strh	r3, [r7, #2]
		
		usBuf |= usTemp << ( 11 - i );
 800310e:	887a      	ldrh	r2, [r7, #2]
 8003110:	79fb      	ldrb	r3, [r7, #7]
 8003112:	f1c3 030b 	rsb	r3, r3, #11
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	b21a      	sxth	r2, r3
 800311c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8003120:	4313      	orrs	r3, r2
 8003122:	b21b      	sxth	r3, r3
 8003124:	80bb      	strh	r3, [r7, #4]
	
		macXPT2046_CLK_HIGH();
 8003126:	2201      	movs	r2, #1
 8003128:	2101      	movs	r1, #1
 800312a:	4807      	ldr	r0, [pc, #28]	; (8003148 <XPT2046_ReadCMD+0x74>)
 800312c:	f000 fdc9 	bl	8003cc2 <HAL_GPIO_WritePin>
	for ( i=0;i<12;i++ ) 
 8003130:	79fb      	ldrb	r3, [r7, #7]
 8003132:	3301      	adds	r3, #1
 8003134:	71fb      	strb	r3, [r7, #7]
 8003136:	79fb      	ldrb	r3, [r7, #7]
 8003138:	2b0b      	cmp	r3, #11
 800313a:	d9dd      	bls.n	80030f8 <XPT2046_ReadCMD+0x24>
		
	}
	
	return usBuf;
 800313c:	88bb      	ldrh	r3, [r7, #4]

}
 800313e:	4618      	mov	r0, r3
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40011800 	.word	0x40011800

0800314c <XPT2046_ReadAdc>:


static uint16_t XPT2046_ReadAdc ( uint8_t ucChannel )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	71fb      	strb	r3, [r7, #7]
	XPT2046_WriteCMD ( ucChannel );
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	4618      	mov	r0, r3
 800315a:	f7ff ff77 	bl	800304c <XPT2046_WriteCMD>

  return 	XPT2046_ReadCMD ();
 800315e:	f7ff ffb9 	bl	80030d4 <XPT2046_ReadCMD>
 8003162:	4603      	mov	r3, r0
	
}
 8003164:	4618      	mov	r0, r3
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}

0800316c <XPT2046_ReadAdc_XY>:


static void XPT2046_ReadAdc_XY ( int16_t * sX_Ad, int16_t * sY_Ad )  
{ 
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
 8003174:	6039      	str	r1, [r7, #0]
	int16_t sX_Ad_Temp, sY_Ad_Temp; 

	
	
	sX_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_X );
 8003176:	2090      	movs	r0, #144	; 0x90
 8003178:	f7ff ffe8 	bl	800314c <XPT2046_ReadAdc>
 800317c:	4603      	mov	r3, r0
 800317e:	81fb      	strh	r3, [r7, #14]

	XPT2046_DelayUS ( 1 ); 
 8003180:	2001      	movs	r0, #1
 8003182:	f7ff ff47 	bl	8003014 <XPT2046_DelayUS>

	sY_Ad_Temp = XPT2046_ReadAdc ( macXPT2046_CHANNEL_Y ); 
 8003186:	20d0      	movs	r0, #208	; 0xd0
 8003188:	f7ff ffe0 	bl	800314c <XPT2046_ReadAdc>
 800318c:	4603      	mov	r3, r0
 800318e:	81bb      	strh	r3, [r7, #12]
	
	
	* sX_Ad = sX_Ad_Temp; 
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	89fa      	ldrh	r2, [r7, #14]
 8003194:	801a      	strh	r2, [r3, #0]
	* sY_Ad = sY_Ad_Temp; 
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	89ba      	ldrh	r2, [r7, #12]
 800319a:	801a      	strh	r2, [r3, #0]
	
	
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <XPT2046_ReadAdc_Smooth_XY>:


static uint8_t XPT2046_ReadAdc_Smooth_XY ( strType_XPT2046_Coordinate * pScreenCoordinate )
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b092      	sub	sp, #72	; 0x48
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
	uint8_t ucCount = 0, i;
 80031ac:	2300      	movs	r3, #0
 80031ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	
	int16_t sAD_X, sAD_Y;
	int16_t sBufferArray [ 2 ] [ 10 ] = { { 0 },{ 0 } };  
 80031b2:	f107 0308 	add.w	r3, r7, #8
 80031b6:	2228      	movs	r2, #40	; 0x28
 80031b8:	2100      	movs	r1, #0
 80031ba:	4618      	mov	r0, r3
 80031bc:	f002 fc3c 	bl	8005a38 <memset>
	int32_t lX_Min, lX_Max, lY_Min, lY_Max;


	do					       				
	{		  
		XPT2046_ReadAdc_XY ( & sAD_X, & sAD_Y );  
 80031c0:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80031c4:	f107 0332 	add.w	r3, r7, #50	; 0x32
 80031c8:	4611      	mov	r1, r2
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7ff ffce 	bl	800316c <XPT2046_ReadAdc_XY>
		
		sBufferArray [ 0 ] [ ucCount ] = sAD_X;  
 80031d0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031d4:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	3348      	adds	r3, #72	; 0x48
 80031dc:	443b      	add	r3, r7
 80031de:	f823 2c40 	strh.w	r2, [r3, #-64]
		sBufferArray [ 1 ] [ ucCount ] = sAD_Y;
 80031e2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031e6:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 80031ea:	330a      	adds	r3, #10
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	3348      	adds	r3, #72	; 0x48
 80031f0:	443b      	add	r3, r7
 80031f2:	f823 2c40 	strh.w	r2, [r3, #-64]
		
		ucCount ++;  
 80031f6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80031fa:	3301      	adds	r3, #1
 80031fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
		
	}	while ( ( macXPT2046_EXTI_Read() == macXPT2046_EXTI_ActiveLevel ) && ( ucCount < 10 ) );
 8003200:	2110      	movs	r1, #16
 8003202:	4871      	ldr	r0, [pc, #452]	; (80033c8 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 8003204:	f000 fd46 	bl	8003c94 <HAL_GPIO_ReadPin>
 8003208:	4603      	mov	r3, r0
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <XPT2046_ReadAdc_Smooth_XY+0x72>
 800320e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8003212:	2b09      	cmp	r3, #9
 8003214:	d9d4      	bls.n	80031c0 <XPT2046_ReadAdc_Smooth_XY+0x1c>
	

	if ( macXPT2046_EXTI_Read() != macXPT2046_EXTI_ActiveLevel )
 8003216:	2110      	movs	r1, #16
 8003218:	486b      	ldr	r0, [pc, #428]	; (80033c8 <XPT2046_ReadAdc_Smooth_XY+0x224>)
 800321a:	f000 fd3b 	bl	8003c94 <HAL_GPIO_ReadPin>
 800321e:	4603      	mov	r3, r0
 8003220:	2b00      	cmp	r3, #0
 8003222:	d002      	beq.n	800322a <XPT2046_ReadAdc_Smooth_XY+0x86>
		ucXPT2046_TouchFlag = 0;			
 8003224:	4b69      	ldr	r3, [pc, #420]	; (80033cc <XPT2046_ReadAdc_Smooth_XY+0x228>)
 8003226:	2200      	movs	r2, #0
 8003228:	701a      	strb	r2, [r3, #0]


	if ( ucCount ==10 )		 					
 800322a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800322e:	2b0a      	cmp	r3, #10
 8003230:	f040 80c4 	bne.w	80033bc <XPT2046_ReadAdc_Smooth_XY+0x218>
	{
		lX_Max = lX_Min = sBufferArray [ 0 ] [ 0 ];
 8003234:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003238:	643b      	str	r3, [r7, #64]	; 0x40
 800323a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800323c:	63fb      	str	r3, [r7, #60]	; 0x3c
		lY_Max = lY_Min = sBufferArray [ 1 ] [ 0 ];       
 800323e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003242:	63bb      	str	r3, [r7, #56]	; 0x38
 8003244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003246:	637b      	str	r3, [r7, #52]	; 0x34
		
		for ( i = 1; i < 10; i ++ )
 8003248:	2301      	movs	r3, #1
 800324a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 800324e:	e02b      	b.n	80032a8 <XPT2046_ReadAdc_Smooth_XY+0x104>
		{
			if ( sBufferArray [ 0 ] [ i ] < lX_Min )
 8003250:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	3348      	adds	r3, #72	; 0x48
 8003258:	443b      	add	r3, r7
 800325a:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800325e:	461a      	mov	r2, r3
 8003260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003262:	4293      	cmp	r3, r2
 8003264:	dd08      	ble.n	8003278 <XPT2046_ReadAdc_Smooth_XY+0xd4>
				lX_Min = sBufferArray [ 0 ] [ i ];
 8003266:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800326a:	005b      	lsls	r3, r3, #1
 800326c:	3348      	adds	r3, #72	; 0x48
 800326e:	443b      	add	r3, r7
 8003270:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003274:	643b      	str	r3, [r7, #64]	; 0x40
 8003276:	e012      	b.n	800329e <XPT2046_ReadAdc_Smooth_XY+0xfa>
			
			else if ( sBufferArray [ 0 ] [ i ] > lX_Max )
 8003278:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	3348      	adds	r3, #72	; 0x48
 8003280:	443b      	add	r3, r7
 8003282:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 8003286:	461a      	mov	r2, r3
 8003288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800328a:	4293      	cmp	r3, r2
 800328c:	da07      	bge.n	800329e <XPT2046_ReadAdc_Smooth_XY+0xfa>
				lX_Max = sBufferArray [ 0 ] [ i ];
 800328e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003292:	005b      	lsls	r3, r3, #1
 8003294:	3348      	adds	r3, #72	; 0x48
 8003296:	443b      	add	r3, r7
 8003298:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800329c:	63fb      	str	r3, [r7, #60]	; 0x3c
		for ( i = 1; i < 10; i ++ )
 800329e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80032a2:	3301      	adds	r3, #1
 80032a4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80032a8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80032ac:	2b09      	cmp	r3, #9
 80032ae:	d9cf      	bls.n	8003250 <XPT2046_ReadAdc_Smooth_XY+0xac>

		}
		
		for ( i = 1; i < 10; i ++ )
 80032b0:	2301      	movs	r3, #1
 80032b2:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 80032b6:	e02f      	b.n	8003318 <XPT2046_ReadAdc_Smooth_XY+0x174>
		{
			if ( sBufferArray [ 1 ] [ i ] < lY_Min )
 80032b8:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80032bc:	330a      	adds	r3, #10
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	3348      	adds	r3, #72	; 0x48
 80032c2:	443b      	add	r3, r7
 80032c4:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80032c8:	461a      	mov	r2, r3
 80032ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032cc:	4293      	cmp	r3, r2
 80032ce:	dd09      	ble.n	80032e4 <XPT2046_ReadAdc_Smooth_XY+0x140>
				lY_Min = sBufferArray [ 1 ] [ i ];
 80032d0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80032d4:	330a      	adds	r3, #10
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	3348      	adds	r3, #72	; 0x48
 80032da:	443b      	add	r3, r7
 80032dc:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80032e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80032e2:	e014      	b.n	800330e <XPT2046_ReadAdc_Smooth_XY+0x16a>
			
			else if ( sBufferArray [ 1 ] [ i ] > lY_Max )
 80032e4:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80032e8:	330a      	adds	r3, #10
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	3348      	adds	r3, #72	; 0x48
 80032ee:	443b      	add	r3, r7
 80032f0:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 80032f4:	461a      	mov	r2, r3
 80032f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f8:	4293      	cmp	r3, r2
 80032fa:	da08      	bge.n	800330e <XPT2046_ReadAdc_Smooth_XY+0x16a>
				lY_Max = sBufferArray [ 1 ] [ i ];
 80032fc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003300:	330a      	adds	r3, #10
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	3348      	adds	r3, #72	; 0x48
 8003306:	443b      	add	r3, r7
 8003308:	f933 3c40 	ldrsh.w	r3, [r3, #-64]
 800330c:	637b      	str	r3, [r7, #52]	; 0x34
		for ( i = 1; i < 10; i ++ )
 800330e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8003312:	3301      	adds	r3, #1
 8003314:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
 8003318:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 800331c:	2b09      	cmp	r3, #9
 800331e:	d9cb      	bls.n	80032b8 <XPT2046_ReadAdc_Smooth_XY+0x114>

		}
		

		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003320:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003324:	461a      	mov	r2, r3
 8003326:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800332a:	4413      	add	r3, r2
 800332c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8003330:	4413      	add	r3, r2
 8003332:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8003336:	4413      	add	r3, r2
 8003338:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800333c:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 800333e:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003342:	4413      	add	r3, r2
		                           sBufferArray [ 0 ] [ 5 ] + sBufferArray [ 0 ] [ 6 ] + sBufferArray [ 0 ] [ 7 ] + sBufferArray [ 0 ] [ 8 ] + sBufferArray [ 0 ] [ 9 ] - lX_Min-lX_Max ) >> 3;
 8003344:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8003348:	4413      	add	r3, r2
 800334a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800334e:	4413      	add	r3, r2
 8003350:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003354:	4413      	add	r3, r2
 8003356:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800335a:	441a      	add	r2, r3
 800335c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800335e:	1ad2      	subs	r2, r2, r3
 8003360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->x =  ( sBufferArray [ 0 ] [ 0 ] + sBufferArray [ 0 ] [ 1 ] + sBufferArray [ 0 ] [ 2 ] + sBufferArray [ 0 ] [ 3 ] + sBufferArray [ 0 ] [ 4 ] + 
 8003366:	b29a      	uxth	r2, r3
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	801a      	strh	r2, [r3, #0]
		
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 800336c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8003370:	461a      	mov	r2, r3
 8003372:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003376:	4413      	add	r3, r2
 8003378:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800337c:	4413      	add	r3, r2
 800337e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003382:	4413      	add	r3, r2
 8003384:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8003388:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 800338a:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 800338e:	4413      	add	r3, r2
		                           sBufferArray [ 1 ] [ 5 ] + sBufferArray [ 1 ] [ 6 ] + sBufferArray [ 1 ] [ 7 ] + sBufferArray [ 1 ] [ 8 ] + sBufferArray [ 1 ] [ 9 ] - lY_Min-lY_Max ) >> 3; 
 8003390:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8003394:	4413      	add	r3, r2
 8003396:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	; 0x2a
 800339a:	4413      	add	r3, r2
 800339c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	; 0x2c
 80033a0:	4413      	add	r3, r2
 80033a2:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 80033a6:	441a      	add	r2, r3
 80033a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033aa:	1ad2      	subs	r2, r2, r3
 80033ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	10db      	asrs	r3, r3, #3
		pScreenCoordinate ->y =  ( sBufferArray [ 1 ] [ 0 ] + sBufferArray [ 1 ] [ 1 ] + sBufferArray [ 1 ] [ 2 ] + sBufferArray [ 1 ] [ 3 ] + sBufferArray [ 1 ] [ 4 ] + 
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	805a      	strh	r2, [r3, #2]
		
		
		return 1;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e000      	b.n	80033be <XPT2046_ReadAdc_Smooth_XY+0x21a>
		

	}   
	
	
	return 0;    
 80033bc:	2300      	movs	r3, #0
	
	
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3748      	adds	r7, #72	; 0x48
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40011800 	.word	0x40011800
 80033cc:	20000334 	.word	0x20000334

080033d0 <XPT2046_Get_TouchedPoint>:



uint8_t XPT2046_Get_TouchedPoint ( strType_XPT2046_Coordinate * pDisplayCoordinate, strType_XPT2046_TouchPara * pTouchPara )
{
 80033d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
	uint8_t ucRet = 1;           
 80033dc:	2301      	movs	r3, #1
 80033de:	73fb      	strb	r3, [r7, #15]
	
	strType_XPT2046_Coordinate strScreenCoordinate; 
	

  if ( XPT2046_ReadAdc_Smooth_XY ( & strScreenCoordinate ) )
 80033e0:	f107 0308 	add.w	r3, r7, #8
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7ff fedd 	bl	80031a4 <XPT2046_ReadAdc_Smooth_XY>
 80033ea:	4603      	mov	r3, r0
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d06e      	beq.n	80034ce <XPT2046_Get_TouchedPoint+0xfe>
  {    
		pDisplayCoordinate ->x = ( ( pTouchPara ->dX_X * strScreenCoordinate .x ) + ( pTouchPara ->dX_Y * strScreenCoordinate .y ) + pTouchPara ->dX );        
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	e9d3 4500 	ldrd	r4, r5, [r3]
 80033f6:	893b      	ldrh	r3, [r7, #8]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f7fd f86f 	bl	80004dc <__aeabi_i2d>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4620      	mov	r0, r4
 8003404:	4629      	mov	r1, r5
 8003406:	f7fd f8d3 	bl	80005b0 <__aeabi_dmul>
 800340a:	4602      	mov	r2, r0
 800340c:	460b      	mov	r3, r1
 800340e:	4690      	mov	r8, r2
 8003410:	4699      	mov	r9, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	e9d3 4502 	ldrd	r4, r5, [r3, #8]
 8003418:	897b      	ldrh	r3, [r7, #10]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fd f85e 	bl	80004dc <__aeabi_i2d>
 8003420:	4602      	mov	r2, r0
 8003422:	460b      	mov	r3, r1
 8003424:	4620      	mov	r0, r4
 8003426:	4629      	mov	r1, r5
 8003428:	f7fd f8c2 	bl	80005b0 <__aeabi_dmul>
 800342c:	4602      	mov	r2, r0
 800342e:	460b      	mov	r3, r1
 8003430:	4640      	mov	r0, r8
 8003432:	4649      	mov	r1, r9
 8003434:	f7fc ff06 	bl	8000244 <__adddf3>
 8003438:	4602      	mov	r2, r0
 800343a:	460b      	mov	r3, r1
 800343c:	4610      	mov	r0, r2
 800343e:	4619      	mov	r1, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003446:	f7fc fefd 	bl	8000244 <__adddf3>
 800344a:	4602      	mov	r2, r0
 800344c:	460b      	mov	r3, r1
 800344e:	4610      	mov	r0, r2
 8003450:	4619      	mov	r1, r3
 8003452:	f7fd fb6f 	bl	8000b34 <__aeabi_d2uiz>
 8003456:	4603      	mov	r3, r0
 8003458:	b29a      	uxth	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	801a      	strh	r2, [r3, #0]
		pDisplayCoordinate ->y = ( ( pTouchPara ->dY_X * strScreenCoordinate .x ) + ( pTouchPara ->dY_Y * strScreenCoordinate .y ) + pTouchPara ->dY );
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003464:	893b      	ldrh	r3, [r7, #8]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd f838 	bl	80004dc <__aeabi_i2d>
 800346c:	4602      	mov	r2, r0
 800346e:	460b      	mov	r3, r1
 8003470:	4620      	mov	r0, r4
 8003472:	4629      	mov	r1, r5
 8003474:	f7fd f89c 	bl	80005b0 <__aeabi_dmul>
 8003478:	4602      	mov	r2, r0
 800347a:	460b      	mov	r3, r1
 800347c:	4690      	mov	r8, r2
 800347e:	4699      	mov	r9, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003486:	897b      	ldrh	r3, [r7, #10]
 8003488:	4618      	mov	r0, r3
 800348a:	f7fd f827 	bl	80004dc <__aeabi_i2d>
 800348e:	4602      	mov	r2, r0
 8003490:	460b      	mov	r3, r1
 8003492:	4620      	mov	r0, r4
 8003494:	4629      	mov	r1, r5
 8003496:	f7fd f88b 	bl	80005b0 <__aeabi_dmul>
 800349a:	4602      	mov	r2, r0
 800349c:	460b      	mov	r3, r1
 800349e:	4640      	mov	r0, r8
 80034a0:	4649      	mov	r1, r9
 80034a2:	f7fc fecf 	bl	8000244 <__adddf3>
 80034a6:	4602      	mov	r2, r0
 80034a8:	460b      	mov	r3, r1
 80034aa:	4610      	mov	r0, r2
 80034ac:	4619      	mov	r1, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80034b4:	f7fc fec6 	bl	8000244 <__adddf3>
 80034b8:	4602      	mov	r2, r0
 80034ba:	460b      	mov	r3, r1
 80034bc:	4610      	mov	r0, r2
 80034be:	4619      	mov	r1, r3
 80034c0:	f7fd fb38 	bl	8000b34 <__aeabi_d2uiz>
 80034c4:	4603      	mov	r3, r0
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	805a      	strh	r2, [r3, #2]
 80034cc:	e001      	b.n	80034d2 <XPT2046_Get_TouchedPoint+0x102>

  }
	 
	else ucRet = 0;            
 80034ce:	2300      	movs	r3, #0
 80034d0:	73fb      	strb	r3, [r7, #15]
	
	return ucRet;
 80034d2:	7bfb      	ldrb	r3, [r7, #15]
	
	
} 
 80034d4:	4618      	mov	r0, r3
 80034d6:	3710      	adds	r7, #16
 80034d8:	46bd      	mov	sp, r7
 80034da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080034e0 <Check_mainsrc_touchkey>:
ButtonCoordinates PauseButton = { { 90, 145 }, { 30, 85 } };
ButtonCoordinates DownButton = { { 90, 65 }, { 30, 10 } };


int Check_mainsrc_touchkey()
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b082      	sub	sp, #8
 80034e4:	af00      	add	r7, sp, #0
	//int temp = 0;

	strType_XPT2046_Coordinate strDisplayCoordinate;
	
	if ( XPT2046_Get_TouchedPoint ( & strDisplayCoordinate, & strXPT2046_TouchPara ) )
 80034e6:	1d3b      	adds	r3, r7, #4
 80034e8:	493d      	ldr	r1, [pc, #244]	; (80035e0 <Check_mainsrc_touchkey+0x100>)
 80034ea:	4618      	mov	r0, r3
 80034ec:	f7ff ff70 	bl	80033d0 <XPT2046_Get_TouchedPoint>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d06d      	beq.n	80035d2 <Check_mainsrc_touchkey+0xf2>
	{

		if( (strDisplayCoordinate.x <= ResetButton.Top_Left.x && strDisplayCoordinate.x >= ResetButton.Bottom_Right.x)  &&
 80034f6:	88ba      	ldrh	r2, [r7, #4]
 80034f8:	4b3a      	ldr	r3, [pc, #232]	; (80035e4 <Check_mainsrc_touchkey+0x104>)
 80034fa:	881b      	ldrh	r3, [r3, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d810      	bhi.n	8003522 <Check_mainsrc_touchkey+0x42>
 8003500:	88ba      	ldrh	r2, [r7, #4]
 8003502:	4b38      	ldr	r3, [pc, #224]	; (80035e4 <Check_mainsrc_touchkey+0x104>)
 8003504:	889b      	ldrh	r3, [r3, #4]
 8003506:	429a      	cmp	r2, r3
 8003508:	d30b      	bcc.n	8003522 <Check_mainsrc_touchkey+0x42>
			(strDisplayCoordinate.y <= ResetButton.Top_Left.y && strDisplayCoordinate.y >= ResetButton.Bottom_Right.y)){
 800350a:	88fa      	ldrh	r2, [r7, #6]
 800350c:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <Check_mainsrc_touchkey+0x104>)
 800350e:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x <= ResetButton.Top_Left.x && strDisplayCoordinate.x >= ResetButton.Bottom_Right.x)  &&
 8003510:	429a      	cmp	r2, r3
 8003512:	d806      	bhi.n	8003522 <Check_mainsrc_touchkey+0x42>
			(strDisplayCoordinate.y <= ResetButton.Top_Left.y && strDisplayCoordinate.y >= ResetButton.Bottom_Right.y)){
 8003514:	88fa      	ldrh	r2, [r7, #6]
 8003516:	4b33      	ldr	r3, [pc, #204]	; (80035e4 <Check_mainsrc_touchkey+0x104>)
 8003518:	88db      	ldrh	r3, [r3, #6]
 800351a:	429a      	cmp	r2, r3
 800351c:	d301      	bcc.n	8003522 <Check_mainsrc_touchkey+0x42>
			//temp = 1;
				return 1;
 800351e:	2301      	movs	r3, #1
 8003520:	e059      	b.n	80035d6 <Check_mainsrc_touchkey+0xf6>
			}

		if( (strDisplayCoordinate.x <= AutoButton.Top_Left.x && strDisplayCoordinate.x >= AutoButton.Bottom_Right.x)  &&
 8003522:	88ba      	ldrh	r2, [r7, #4]
 8003524:	4b30      	ldr	r3, [pc, #192]	; (80035e8 <Check_mainsrc_touchkey+0x108>)
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	429a      	cmp	r2, r3
 800352a:	d810      	bhi.n	800354e <Check_mainsrc_touchkey+0x6e>
 800352c:	88ba      	ldrh	r2, [r7, #4]
 800352e:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <Check_mainsrc_touchkey+0x108>)
 8003530:	889b      	ldrh	r3, [r3, #4]
 8003532:	429a      	cmp	r2, r3
 8003534:	d30b      	bcc.n	800354e <Check_mainsrc_touchkey+0x6e>
			(strDisplayCoordinate.y <= AutoButton.Top_Left.y && strDisplayCoordinate.y >= AutoButton.Bottom_Right.y)){
 8003536:	88fa      	ldrh	r2, [r7, #6]
 8003538:	4b2b      	ldr	r3, [pc, #172]	; (80035e8 <Check_mainsrc_touchkey+0x108>)
 800353a:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x <= AutoButton.Top_Left.x && strDisplayCoordinate.x >= AutoButton.Bottom_Right.x)  &&
 800353c:	429a      	cmp	r2, r3
 800353e:	d806      	bhi.n	800354e <Check_mainsrc_touchkey+0x6e>
			(strDisplayCoordinate.y <= AutoButton.Top_Left.y && strDisplayCoordinate.y >= AutoButton.Bottom_Right.y)){
 8003540:	88fa      	ldrh	r2, [r7, #6]
 8003542:	4b29      	ldr	r3, [pc, #164]	; (80035e8 <Check_mainsrc_touchkey+0x108>)
 8003544:	88db      	ldrh	r3, [r3, #6]
 8003546:	429a      	cmp	r2, r3
 8003548:	d301      	bcc.n	800354e <Check_mainsrc_touchkey+0x6e>
			//temp = 2;
				return 2;
 800354a:	2302      	movs	r3, #2
 800354c:	e043      	b.n	80035d6 <Check_mainsrc_touchkey+0xf6>
			}

		if( (strDisplayCoordinate.x <= UpButton.Top_Left.x && strDisplayCoordinate.x >= UpButton.Bottom_Right.x)  &&
 800354e:	88ba      	ldrh	r2, [r7, #4]
 8003550:	4b26      	ldr	r3, [pc, #152]	; (80035ec <Check_mainsrc_touchkey+0x10c>)
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	429a      	cmp	r2, r3
 8003556:	d810      	bhi.n	800357a <Check_mainsrc_touchkey+0x9a>
 8003558:	88ba      	ldrh	r2, [r7, #4]
 800355a:	4b24      	ldr	r3, [pc, #144]	; (80035ec <Check_mainsrc_touchkey+0x10c>)
 800355c:	889b      	ldrh	r3, [r3, #4]
 800355e:	429a      	cmp	r2, r3
 8003560:	d30b      	bcc.n	800357a <Check_mainsrc_touchkey+0x9a>
			(strDisplayCoordinate.y <= UpButton.Top_Left.y && strDisplayCoordinate.y >= UpButton.Bottom_Right.y)){
 8003562:	88fa      	ldrh	r2, [r7, #6]
 8003564:	4b21      	ldr	r3, [pc, #132]	; (80035ec <Check_mainsrc_touchkey+0x10c>)
 8003566:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x <= UpButton.Top_Left.x && strDisplayCoordinate.x >= UpButton.Bottom_Right.x)  &&
 8003568:	429a      	cmp	r2, r3
 800356a:	d806      	bhi.n	800357a <Check_mainsrc_touchkey+0x9a>
			(strDisplayCoordinate.y <= UpButton.Top_Left.y && strDisplayCoordinate.y >= UpButton.Bottom_Right.y)){
 800356c:	88fa      	ldrh	r2, [r7, #6]
 800356e:	4b1f      	ldr	r3, [pc, #124]	; (80035ec <Check_mainsrc_touchkey+0x10c>)
 8003570:	88db      	ldrh	r3, [r3, #6]
 8003572:	429a      	cmp	r2, r3
 8003574:	d301      	bcc.n	800357a <Check_mainsrc_touchkey+0x9a>
			//temp = 3;
				return 3;
 8003576:	2303      	movs	r3, #3
 8003578:	e02d      	b.n	80035d6 <Check_mainsrc_touchkey+0xf6>
			}

		if( (strDisplayCoordinate.x <= DownButton.Top_Left.x && strDisplayCoordinate.x >= DownButton.Bottom_Right.x)  &&
 800357a:	88ba      	ldrh	r2, [r7, #4]
 800357c:	4b1c      	ldr	r3, [pc, #112]	; (80035f0 <Check_mainsrc_touchkey+0x110>)
 800357e:	881b      	ldrh	r3, [r3, #0]
 8003580:	429a      	cmp	r2, r3
 8003582:	d810      	bhi.n	80035a6 <Check_mainsrc_touchkey+0xc6>
 8003584:	88ba      	ldrh	r2, [r7, #4]
 8003586:	4b1a      	ldr	r3, [pc, #104]	; (80035f0 <Check_mainsrc_touchkey+0x110>)
 8003588:	889b      	ldrh	r3, [r3, #4]
 800358a:	429a      	cmp	r2, r3
 800358c:	d30b      	bcc.n	80035a6 <Check_mainsrc_touchkey+0xc6>
			(strDisplayCoordinate.y <= DownButton.Top_Left.y && strDisplayCoordinate.y >= DownButton.Bottom_Right.y)){
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	4b17      	ldr	r3, [pc, #92]	; (80035f0 <Check_mainsrc_touchkey+0x110>)
 8003592:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x <= DownButton.Top_Left.x && strDisplayCoordinate.x >= DownButton.Bottom_Right.x)  &&
 8003594:	429a      	cmp	r2, r3
 8003596:	d806      	bhi.n	80035a6 <Check_mainsrc_touchkey+0xc6>
			(strDisplayCoordinate.y <= DownButton.Top_Left.y && strDisplayCoordinate.y >= DownButton.Bottom_Right.y)){
 8003598:	88fa      	ldrh	r2, [r7, #6]
 800359a:	4b15      	ldr	r3, [pc, #84]	; (80035f0 <Check_mainsrc_touchkey+0x110>)
 800359c:	88db      	ldrh	r3, [r3, #6]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d301      	bcc.n	80035a6 <Check_mainsrc_touchkey+0xc6>
			//temp = 4;
				return 4;
 80035a2:	2304      	movs	r3, #4
 80035a4:	e017      	b.n	80035d6 <Check_mainsrc_touchkey+0xf6>
			}

		if( (strDisplayCoordinate.x <= PauseButton.Top_Left.x && strDisplayCoordinate.x >= PauseButton.Bottom_Right.x)  &&
 80035a6:	88ba      	ldrh	r2, [r7, #4]
 80035a8:	4b12      	ldr	r3, [pc, #72]	; (80035f4 <Check_mainsrc_touchkey+0x114>)
 80035aa:	881b      	ldrh	r3, [r3, #0]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d812      	bhi.n	80035d6 <Check_mainsrc_touchkey+0xf6>
 80035b0:	88ba      	ldrh	r2, [r7, #4]
 80035b2:	4b10      	ldr	r3, [pc, #64]	; (80035f4 <Check_mainsrc_touchkey+0x114>)
 80035b4:	889b      	ldrh	r3, [r3, #4]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d30d      	bcc.n	80035d6 <Check_mainsrc_touchkey+0xf6>
			(strDisplayCoordinate.y <= PauseButton.Top_Left.y && strDisplayCoordinate.y >= PauseButton.Bottom_Right.y)){
 80035ba:	88fa      	ldrh	r2, [r7, #6]
 80035bc:	4b0d      	ldr	r3, [pc, #52]	; (80035f4 <Check_mainsrc_touchkey+0x114>)
 80035be:	885b      	ldrh	r3, [r3, #2]
		if( (strDisplayCoordinate.x <= PauseButton.Top_Left.x && strDisplayCoordinate.x >= PauseButton.Bottom_Right.x)  &&
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d808      	bhi.n	80035d6 <Check_mainsrc_touchkey+0xf6>
			(strDisplayCoordinate.y <= PauseButton.Top_Left.y && strDisplayCoordinate.y >= PauseButton.Bottom_Right.y)){
 80035c4:	88fa      	ldrh	r2, [r7, #6]
 80035c6:	4b0b      	ldr	r3, [pc, #44]	; (80035f4 <Check_mainsrc_touchkey+0x114>)
 80035c8:	88db      	ldrh	r3, [r3, #6]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d303      	bcc.n	80035d6 <Check_mainsrc_touchkey+0xf6>
			//temp = 5;
				return 5;
 80035ce:	2305      	movs	r3, #5
 80035d0:	e001      	b.n	80035d6 <Check_mainsrc_touchkey+0xf6>



	}
	else{
		return 0;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e7ff      	b.n	80035d6 <Check_mainsrc_touchkey+0xf6>
	}
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	200000c8 	.word	0x200000c8
 80035e4:	200000f8 	.word	0x200000f8
 80035e8:	20000100 	.word	0x20000100
 80035ec:	20000108 	.word	0x20000108
 80035f0:	20000118 	.word	0x20000118
 80035f4:	20000110 	.word	0x20000110

080035f8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80035f8:	480c      	ldr	r0, [pc, #48]	; (800362c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80035fa:	490d      	ldr	r1, [pc, #52]	; (8003630 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80035fc:	4a0d      	ldr	r2, [pc, #52]	; (8003634 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80035fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003600:	e002      	b.n	8003608 <LoopCopyDataInit>

08003602 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003602:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003604:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003606:	3304      	adds	r3, #4

08003608 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003608:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800360a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800360c:	d3f9      	bcc.n	8003602 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800360e:	4a0a      	ldr	r2, [pc, #40]	; (8003638 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003610:	4c0a      	ldr	r4, [pc, #40]	; (800363c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003612:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003614:	e001      	b.n	800361a <LoopFillZerobss>

08003616 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003616:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003618:	3204      	adds	r2, #4

0800361a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800361a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800361c:	d3fb      	bcc.n	8003616 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800361e:	f7ff fcf3 	bl	8003008 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003622:	f002 f9e5 	bl	80059f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003626:	f7fe fcd3 	bl	8001fd0 <main>
  bx lr
 800362a:	4770      	bx	lr
  ldr r0, =_sdata
 800362c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003630:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8003634:	08043b9c 	.word	0x08043b9c
  ldr r2, =_sbss
 8003638:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 800363c:	2000034c 	.word	0x2000034c

08003640 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003640:	e7fe      	b.n	8003640 <ADC1_2_IRQHandler>
	...

08003644 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003648:	4b08      	ldr	r3, [pc, #32]	; (800366c <HAL_Init+0x28>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a07      	ldr	r2, [pc, #28]	; (800366c <HAL_Init+0x28>)
 800364e:	f043 0310 	orr.w	r3, r3, #16
 8003652:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003654:	2003      	movs	r0, #3
 8003656:	f000 f947 	bl	80038e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800365a:	2000      	movs	r0, #0
 800365c:	f000 f808 	bl	8003670 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003660:	f7ff fa70 	bl	8002b44 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40022000 	.word	0x40022000

08003670 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003678:	4b12      	ldr	r3, [pc, #72]	; (80036c4 <HAL_InitTick+0x54>)
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	4b12      	ldr	r3, [pc, #72]	; (80036c8 <HAL_InitTick+0x58>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	4619      	mov	r1, r3
 8003682:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003686:	fbb3 f3f1 	udiv	r3, r3, r1
 800368a:	fbb2 f3f3 	udiv	r3, r2, r3
 800368e:	4618      	mov	r0, r3
 8003690:	f000 f95f 	bl	8003952 <HAL_SYSTICK_Config>
 8003694:	4603      	mov	r3, r0
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e00e      	b.n	80036bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2b0f      	cmp	r3, #15
 80036a2:	d80a      	bhi.n	80036ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036a4:	2200      	movs	r2, #0
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	f04f 30ff 	mov.w	r0, #4294967295
 80036ac:	f000 f927 	bl	80038fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036b0:	4a06      	ldr	r2, [pc, #24]	; (80036cc <HAL_InitTick+0x5c>)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
 80036b8:	e000      	b.n	80036bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
}
 80036bc:	4618      	mov	r0, r3
 80036be:	3708      	adds	r7, #8
 80036c0:	46bd      	mov	sp, r7
 80036c2:	bd80      	pop	{r7, pc}
 80036c4:	200000c0 	.word	0x200000c0
 80036c8:	20000124 	.word	0x20000124
 80036cc:	20000120 	.word	0x20000120

080036d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <HAL_IncTick+0x1c>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b05      	ldr	r3, [pc, #20]	; (80036f0 <HAL_IncTick+0x20>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4413      	add	r3, r2
 80036e0:	4a03      	ldr	r2, [pc, #12]	; (80036f0 <HAL_IncTick+0x20>)
 80036e2:	6013      	str	r3, [r2, #0]
}
 80036e4:	bf00      	nop
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr
 80036ec:	20000124 	.word	0x20000124
 80036f0:	20000338 	.word	0x20000338

080036f4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80036f4:	b480      	push	{r7}
 80036f6:	af00      	add	r7, sp, #0
  return uwTick;
 80036f8:	4b02      	ldr	r3, [pc, #8]	; (8003704 <HAL_GetTick+0x10>)
 80036fa:	681b      	ldr	r3, [r3, #0]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr
 8003704:	20000338 	.word	0x20000338

08003708 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003710:	f7ff fff0 	bl	80036f4 <HAL_GetTick>
 8003714:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003720:	d005      	beq.n	800372e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003722:	4b0a      	ldr	r3, [pc, #40]	; (800374c <HAL_Delay+0x44>)
 8003724:	781b      	ldrb	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	4413      	add	r3, r2
 800372c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800372e:	bf00      	nop
 8003730:	f7ff ffe0 	bl	80036f4 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d8f7      	bhi.n	8003730 <HAL_Delay+0x28>
  {
  }
}
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	20000124 	.word	0x20000124

08003750 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003760:	4b0c      	ldr	r3, [pc, #48]	; (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800376c:	4013      	ands	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003778:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800377c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003780:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003782:	4a04      	ldr	r2, [pc, #16]	; (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	60d3      	str	r3, [r2, #12]
}
 8003788:	bf00      	nop
 800378a:	3714      	adds	r7, #20
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	e000ed00 	.word	0xe000ed00

08003798 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <__NVIC_GetPriorityGrouping+0x18>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	f003 0307 	and.w	r3, r3, #7
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bc80      	pop	{r7}
 80037ac:	4770      	bx	lr
 80037ae:	bf00      	nop
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	db0b      	blt.n	80037de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	4906      	ldr	r1, [pc, #24]	; (80037e8 <__NVIC_EnableIRQ+0x34>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2001      	movs	r0, #1
 80037d6:	fa00 f202 	lsl.w	r2, r0, r2
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bc80      	pop	{r7}
 80037e6:	4770      	bx	lr
 80037e8:	e000e100 	.word	0xe000e100

080037ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	4603      	mov	r3, r0
 80037f4:	6039      	str	r1, [r7, #0]
 80037f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	db0a      	blt.n	8003816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	b2da      	uxtb	r2, r3
 8003804:	490c      	ldr	r1, [pc, #48]	; (8003838 <__NVIC_SetPriority+0x4c>)
 8003806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380a:	0112      	lsls	r2, r2, #4
 800380c:	b2d2      	uxtb	r2, r2
 800380e:	440b      	add	r3, r1
 8003810:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003814:	e00a      	b.n	800382c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	b2da      	uxtb	r2, r3
 800381a:	4908      	ldr	r1, [pc, #32]	; (800383c <__NVIC_SetPriority+0x50>)
 800381c:	79fb      	ldrb	r3, [r7, #7]
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	3b04      	subs	r3, #4
 8003824:	0112      	lsls	r2, r2, #4
 8003826:	b2d2      	uxtb	r2, r2
 8003828:	440b      	add	r3, r1
 800382a:	761a      	strb	r2, [r3, #24]
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	bc80      	pop	{r7}
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	e000e100 	.word	0xe000e100
 800383c:	e000ed00 	.word	0xe000ed00

08003840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	; 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f003 0307 	and.w	r3, r3, #7
 8003852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003854:	69fb      	ldr	r3, [r7, #28]
 8003856:	f1c3 0307 	rsb	r3, r3, #7
 800385a:	2b04      	cmp	r3, #4
 800385c:	bf28      	it	cs
 800385e:	2304      	movcs	r3, #4
 8003860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	3304      	adds	r3, #4
 8003866:	2b06      	cmp	r3, #6
 8003868:	d902      	bls.n	8003870 <NVIC_EncodePriority+0x30>
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	3b03      	subs	r3, #3
 800386e:	e000      	b.n	8003872 <NVIC_EncodePriority+0x32>
 8003870:	2300      	movs	r3, #0
 8003872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003874:	f04f 32ff 	mov.w	r2, #4294967295
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	fa02 f303 	lsl.w	r3, r2, r3
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	401a      	ands	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003888:	f04f 31ff 	mov.w	r1, #4294967295
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	fa01 f303 	lsl.w	r3, r1, r3
 8003892:	43d9      	mvns	r1, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003898:	4313      	orrs	r3, r2
         );
}
 800389a:	4618      	mov	r0, r3
 800389c:	3724      	adds	r7, #36	; 0x24
 800389e:	46bd      	mov	sp, r7
 80038a0:	bc80      	pop	{r7}
 80038a2:	4770      	bx	lr

080038a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038b4:	d301      	bcc.n	80038ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038b6:	2301      	movs	r3, #1
 80038b8:	e00f      	b.n	80038da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038ba:	4a0a      	ldr	r2, [pc, #40]	; (80038e4 <SysTick_Config+0x40>)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	3b01      	subs	r3, #1
 80038c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038c2:	210f      	movs	r1, #15
 80038c4:	f04f 30ff 	mov.w	r0, #4294967295
 80038c8:	f7ff ff90 	bl	80037ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <SysTick_Config+0x40>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <SysTick_Config+0x40>)
 80038d4:	2207      	movs	r2, #7
 80038d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038d8:	2300      	movs	r3, #0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	e000e010 	.word	0xe000e010

080038e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f7ff ff2d 	bl	8003750 <__NVIC_SetPriorityGrouping>
}
 80038f6:	bf00      	nop
 80038f8:	3708      	adds	r7, #8
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}

080038fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80038fe:	b580      	push	{r7, lr}
 8003900:	b086      	sub	sp, #24
 8003902:	af00      	add	r7, sp, #0
 8003904:	4603      	mov	r3, r0
 8003906:	60b9      	str	r1, [r7, #8]
 8003908:	607a      	str	r2, [r7, #4]
 800390a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003910:	f7ff ff42 	bl	8003798 <__NVIC_GetPriorityGrouping>
 8003914:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	68b9      	ldr	r1, [r7, #8]
 800391a:	6978      	ldr	r0, [r7, #20]
 800391c:	f7ff ff90 	bl	8003840 <NVIC_EncodePriority>
 8003920:	4602      	mov	r2, r0
 8003922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003926:	4611      	mov	r1, r2
 8003928:	4618      	mov	r0, r3
 800392a:	f7ff ff5f 	bl	80037ec <__NVIC_SetPriority>
}
 800392e:	bf00      	nop
 8003930:	3718      	adds	r7, #24
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	4603      	mov	r3, r0
 800393e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003944:	4618      	mov	r0, r3
 8003946:	f7ff ff35 	bl	80037b4 <__NVIC_EnableIRQ>
}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}

08003952 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003952:	b580      	push	{r7, lr}
 8003954:	b082      	sub	sp, #8
 8003956:	af00      	add	r7, sp, #0
 8003958:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f7ff ffa2 	bl	80038a4 <SysTick_Config>
 8003960:	4603      	mov	r3, r0
}
 8003962:	4618      	mov	r0, r3
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800396c:	b480      	push	{r7}
 800396e:	b08b      	sub	sp, #44	; 0x2c
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
 8003974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003976:	2300      	movs	r3, #0
 8003978:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800397a:	2300      	movs	r3, #0
 800397c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800397e:	e179      	b.n	8003c74 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003980:	2201      	movs	r2, #1
 8003982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	69fa      	ldr	r2, [r7, #28]
 8003990:	4013      	ands	r3, r2
 8003992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	429a      	cmp	r2, r3
 800399a:	f040 8168 	bne.w	8003c6e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	4a96      	ldr	r2, [pc, #600]	; (8003bfc <HAL_GPIO_Init+0x290>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d05e      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
 80039a8:	4a94      	ldr	r2, [pc, #592]	; (8003bfc <HAL_GPIO_Init+0x290>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d875      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039ae:	4a94      	ldr	r2, [pc, #592]	; (8003c00 <HAL_GPIO_Init+0x294>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d058      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
 80039b4:	4a92      	ldr	r2, [pc, #584]	; (8003c00 <HAL_GPIO_Init+0x294>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d86f      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039ba:	4a92      	ldr	r2, [pc, #584]	; (8003c04 <HAL_GPIO_Init+0x298>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d052      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
 80039c0:	4a90      	ldr	r2, [pc, #576]	; (8003c04 <HAL_GPIO_Init+0x298>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d869      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039c6:	4a90      	ldr	r2, [pc, #576]	; (8003c08 <HAL_GPIO_Init+0x29c>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d04c      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
 80039cc:	4a8e      	ldr	r2, [pc, #568]	; (8003c08 <HAL_GPIO_Init+0x29c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d863      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039d2:	4a8e      	ldr	r2, [pc, #568]	; (8003c0c <HAL_GPIO_Init+0x2a0>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d046      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
 80039d8:	4a8c      	ldr	r2, [pc, #560]	; (8003c0c <HAL_GPIO_Init+0x2a0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d85d      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039de:	2b12      	cmp	r3, #18
 80039e0:	d82a      	bhi.n	8003a38 <HAL_GPIO_Init+0xcc>
 80039e2:	2b12      	cmp	r3, #18
 80039e4:	d859      	bhi.n	8003a9a <HAL_GPIO_Init+0x12e>
 80039e6:	a201      	add	r2, pc, #4	; (adr r2, 80039ec <HAL_GPIO_Init+0x80>)
 80039e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ec:	08003a67 	.word	0x08003a67
 80039f0:	08003a41 	.word	0x08003a41
 80039f4:	08003a53 	.word	0x08003a53
 80039f8:	08003a95 	.word	0x08003a95
 80039fc:	08003a9b 	.word	0x08003a9b
 8003a00:	08003a9b 	.word	0x08003a9b
 8003a04:	08003a9b 	.word	0x08003a9b
 8003a08:	08003a9b 	.word	0x08003a9b
 8003a0c:	08003a9b 	.word	0x08003a9b
 8003a10:	08003a9b 	.word	0x08003a9b
 8003a14:	08003a9b 	.word	0x08003a9b
 8003a18:	08003a9b 	.word	0x08003a9b
 8003a1c:	08003a9b 	.word	0x08003a9b
 8003a20:	08003a9b 	.word	0x08003a9b
 8003a24:	08003a9b 	.word	0x08003a9b
 8003a28:	08003a9b 	.word	0x08003a9b
 8003a2c:	08003a9b 	.word	0x08003a9b
 8003a30:	08003a49 	.word	0x08003a49
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	4a75      	ldr	r2, [pc, #468]	; (8003c10 <HAL_GPIO_Init+0x2a4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003a3e:	e02c      	b.n	8003a9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	623b      	str	r3, [r7, #32]
          break;
 8003a46:	e029      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	623b      	str	r3, [r7, #32]
          break;
 8003a50:	e024      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	3308      	adds	r3, #8
 8003a58:	623b      	str	r3, [r7, #32]
          break;
 8003a5a:	e01f      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	330c      	adds	r3, #12
 8003a62:	623b      	str	r3, [r7, #32]
          break;
 8003a64:	e01a      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d102      	bne.n	8003a74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003a6e:	2304      	movs	r3, #4
 8003a70:	623b      	str	r3, [r7, #32]
          break;
 8003a72:	e013      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d105      	bne.n	8003a88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a7c:	2308      	movs	r3, #8
 8003a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	611a      	str	r2, [r3, #16]
          break;
 8003a86:	e009      	b.n	8003a9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003a88:	2308      	movs	r3, #8
 8003a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	615a      	str	r2, [r3, #20]
          break;
 8003a92:	e003      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003a94:	2300      	movs	r3, #0
 8003a96:	623b      	str	r3, [r7, #32]
          break;
 8003a98:	e000      	b.n	8003a9c <HAL_GPIO_Init+0x130>
          break;
 8003a9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2bff      	cmp	r3, #255	; 0xff
 8003aa0:	d801      	bhi.n	8003aa6 <HAL_GPIO_Init+0x13a>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	e001      	b.n	8003aaa <HAL_GPIO_Init+0x13e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	3304      	adds	r3, #4
 8003aaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	2bff      	cmp	r3, #255	; 0xff
 8003ab0:	d802      	bhi.n	8003ab8 <HAL_GPIO_Init+0x14c>
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	e002      	b.n	8003abe <HAL_GPIO_Init+0x152>
 8003ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aba:	3b08      	subs	r3, #8
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	681a      	ldr	r2, [r3, #0]
 8003ac4:	210f      	movs	r1, #15
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	401a      	ands	r2, r3
 8003ad0:	6a39      	ldr	r1, [r7, #32]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ad8:	431a      	orrs	r2, r3
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	f000 80c1 	beq.w	8003c6e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003aec:	4b49      	ldr	r3, [pc, #292]	; (8003c14 <HAL_GPIO_Init+0x2a8>)
 8003aee:	699b      	ldr	r3, [r3, #24]
 8003af0:	4a48      	ldr	r2, [pc, #288]	; (8003c14 <HAL_GPIO_Init+0x2a8>)
 8003af2:	f043 0301 	orr.w	r3, r3, #1
 8003af6:	6193      	str	r3, [r2, #24]
 8003af8:	4b46      	ldr	r3, [pc, #280]	; (8003c14 <HAL_GPIO_Init+0x2a8>)
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	60bb      	str	r3, [r7, #8]
 8003b02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003b04:	4a44      	ldr	r2, [pc, #272]	; (8003c18 <HAL_GPIO_Init+0x2ac>)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b08:	089b      	lsrs	r3, r3, #2
 8003b0a:	3302      	adds	r3, #2
 8003b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	220f      	movs	r2, #15
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	43db      	mvns	r3, r3
 8003b22:	68fa      	ldr	r2, [r7, #12]
 8003b24:	4013      	ands	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a3c      	ldr	r2, [pc, #240]	; (8003c1c <HAL_GPIO_Init+0x2b0>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d01f      	beq.n	8003b70 <HAL_GPIO_Init+0x204>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	4a3b      	ldr	r2, [pc, #236]	; (8003c20 <HAL_GPIO_Init+0x2b4>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d019      	beq.n	8003b6c <HAL_GPIO_Init+0x200>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a3a      	ldr	r2, [pc, #232]	; (8003c24 <HAL_GPIO_Init+0x2b8>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d013      	beq.n	8003b68 <HAL_GPIO_Init+0x1fc>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a39      	ldr	r2, [pc, #228]	; (8003c28 <HAL_GPIO_Init+0x2bc>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d00d      	beq.n	8003b64 <HAL_GPIO_Init+0x1f8>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	4a38      	ldr	r2, [pc, #224]	; (8003c2c <HAL_GPIO_Init+0x2c0>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d007      	beq.n	8003b60 <HAL_GPIO_Init+0x1f4>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a37      	ldr	r2, [pc, #220]	; (8003c30 <HAL_GPIO_Init+0x2c4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d101      	bne.n	8003b5c <HAL_GPIO_Init+0x1f0>
 8003b58:	2305      	movs	r3, #5
 8003b5a:	e00a      	b.n	8003b72 <HAL_GPIO_Init+0x206>
 8003b5c:	2306      	movs	r3, #6
 8003b5e:	e008      	b.n	8003b72 <HAL_GPIO_Init+0x206>
 8003b60:	2304      	movs	r3, #4
 8003b62:	e006      	b.n	8003b72 <HAL_GPIO_Init+0x206>
 8003b64:	2303      	movs	r3, #3
 8003b66:	e004      	b.n	8003b72 <HAL_GPIO_Init+0x206>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e002      	b.n	8003b72 <HAL_GPIO_Init+0x206>
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	e000      	b.n	8003b72 <HAL_GPIO_Init+0x206>
 8003b70:	2300      	movs	r3, #0
 8003b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b74:	f002 0203 	and.w	r2, r2, #3
 8003b78:	0092      	lsls	r2, r2, #2
 8003b7a:	4093      	lsls	r3, r2
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003b82:	4925      	ldr	r1, [pc, #148]	; (8003c18 <HAL_GPIO_Init+0x2ac>)
 8003b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b86:	089b      	lsrs	r3, r3, #2
 8003b88:	3302      	adds	r3, #2
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d006      	beq.n	8003baa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003b9c:	4b25      	ldr	r3, [pc, #148]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	4924      	ldr	r1, [pc, #144]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	600b      	str	r3, [r1, #0]
 8003ba8:	e006      	b.n	8003bb8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003baa:	4b22      	ldr	r3, [pc, #136]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	43db      	mvns	r3, r3
 8003bb2:	4920      	ldr	r1, [pc, #128]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d006      	beq.n	8003bd2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003bc6:	685a      	ldr	r2, [r3, #4]
 8003bc8:	491a      	ldr	r1, [pc, #104]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
 8003bd0:	e006      	b.n	8003be0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003bd2:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	69bb      	ldr	r3, [r7, #24]
 8003bd8:	43db      	mvns	r3, r3
 8003bda:	4916      	ldr	r1, [pc, #88]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003bdc:	4013      	ands	r3, r2
 8003bde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d025      	beq.n	8003c38 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003bec:	4b11      	ldr	r3, [pc, #68]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	4910      	ldr	r1, [pc, #64]	; (8003c34 <HAL_GPIO_Init+0x2c8>)
 8003bf2:	69bb      	ldr	r3, [r7, #24]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	608b      	str	r3, [r1, #8]
 8003bf8:	e025      	b.n	8003c46 <HAL_GPIO_Init+0x2da>
 8003bfa:	bf00      	nop
 8003bfc:	10320000 	.word	0x10320000
 8003c00:	10310000 	.word	0x10310000
 8003c04:	10220000 	.word	0x10220000
 8003c08:	10210000 	.word	0x10210000
 8003c0c:	10120000 	.word	0x10120000
 8003c10:	10110000 	.word	0x10110000
 8003c14:	40021000 	.word	0x40021000
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40010800 	.word	0x40010800
 8003c20:	40010c00 	.word	0x40010c00
 8003c24:	40011000 	.word	0x40011000
 8003c28:	40011400 	.word	0x40011400
 8003c2c:	40011800 	.word	0x40011800
 8003c30:	40011c00 	.word	0x40011c00
 8003c34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003c38:	4b15      	ldr	r3, [pc, #84]	; (8003c90 <HAL_GPIO_Init+0x324>)
 8003c3a:	689a      	ldr	r2, [r3, #8]
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	4913      	ldr	r1, [pc, #76]	; (8003c90 <HAL_GPIO_Init+0x324>)
 8003c42:	4013      	ands	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d006      	beq.n	8003c60 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003c52:	4b0f      	ldr	r3, [pc, #60]	; (8003c90 <HAL_GPIO_Init+0x324>)
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	490e      	ldr	r1, [pc, #56]	; (8003c90 <HAL_GPIO_Init+0x324>)
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	60cb      	str	r3, [r1, #12]
 8003c5e:	e006      	b.n	8003c6e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_GPIO_Init+0x324>)
 8003c62:	68da      	ldr	r2, [r3, #12]
 8003c64:	69bb      	ldr	r3, [r7, #24]
 8003c66:	43db      	mvns	r3, r3
 8003c68:	4909      	ldr	r1, [pc, #36]	; (8003c90 <HAL_GPIO_Init+0x324>)
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	3301      	adds	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	f47f ae7e 	bne.w	8003980 <HAL_GPIO_Init+0x14>
  }
}
 8003c84:	bf00      	nop
 8003c86:	bf00      	nop
 8003c88:	372c      	adds	r7, #44	; 0x2c
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bc80      	pop	{r7}
 8003c8e:	4770      	bx	lr
 8003c90:	40010400 	.word	0x40010400

08003c94 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	689a      	ldr	r2, [r3, #8]
 8003ca4:	887b      	ldrh	r3, [r7, #2]
 8003ca6:	4013      	ands	r3, r2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d002      	beq.n	8003cb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
 8003cb0:	e001      	b.n	8003cb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3714      	adds	r7, #20
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	bc80      	pop	{r7}
 8003cc0:	4770      	bx	lr

08003cc2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cc2:	b480      	push	{r7}
 8003cc4:	b083      	sub	sp, #12
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	6078      	str	r0, [r7, #4]
 8003cca:	460b      	mov	r3, r1
 8003ccc:	807b      	strh	r3, [r7, #2]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003cd2:	787b      	ldrb	r3, [r7, #1]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cd8:	887a      	ldrh	r2, [r7, #2]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003cde:	e003      	b.n	8003ce8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003ce0:	887b      	ldrh	r3, [r7, #2]
 8003ce2:	041a      	lsls	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	611a      	str	r2, [r3, #16]
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bc80      	pop	{r7}
 8003cf0:	4770      	bx	lr
	...

08003cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003cfe:	4b08      	ldr	r3, [pc, #32]	; (8003d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d00:	695a      	ldr	r2, [r3, #20]
 8003d02:	88fb      	ldrh	r3, [r7, #6]
 8003d04:	4013      	ands	r3, r2
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d0a:	4a05      	ldr	r2, [pc, #20]	; (8003d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d0c:	88fb      	ldrh	r3, [r7, #6]
 8003d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	4618      	mov	r0, r3
 8003d14:	f000 f806 	bl	8003d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d18:	bf00      	nop
 8003d1a:	3708      	adds	r7, #8
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	40010400 	.word	0x40010400

08003d24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bc80      	pop	{r7}
 8003d36:	4770      	bx	lr

08003d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b086      	sub	sp, #24
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e272      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	f000 8087 	beq.w	8003e66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d58:	4b92      	ldr	r3, [pc, #584]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f003 030c 	and.w	r3, r3, #12
 8003d60:	2b04      	cmp	r3, #4
 8003d62:	d00c      	beq.n	8003d7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003d64:	4b8f      	ldr	r3, [pc, #572]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 030c 	and.w	r3, r3, #12
 8003d6c:	2b08      	cmp	r3, #8
 8003d6e:	d112      	bne.n	8003d96 <HAL_RCC_OscConfig+0x5e>
 8003d70:	4b8c      	ldr	r3, [pc, #560]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7c:	d10b      	bne.n	8003d96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d7e:	4b89      	ldr	r3, [pc, #548]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d06c      	beq.n	8003e64 <HAL_RCC_OscConfig+0x12c>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d168      	bne.n	8003e64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e24c      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d9e:	d106      	bne.n	8003dae <HAL_RCC_OscConfig+0x76>
 8003da0:	4b80      	ldr	r3, [pc, #512]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a7f      	ldr	r2, [pc, #508]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003da6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003daa:	6013      	str	r3, [r2, #0]
 8003dac:	e02e      	b.n	8003e0c <HAL_RCC_OscConfig+0xd4>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d10c      	bne.n	8003dd0 <HAL_RCC_OscConfig+0x98>
 8003db6:	4b7b      	ldr	r3, [pc, #492]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a7a      	ldr	r2, [pc, #488]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dc0:	6013      	str	r3, [r2, #0]
 8003dc2:	4b78      	ldr	r3, [pc, #480]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a77      	ldr	r2, [pc, #476]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003dc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dcc:	6013      	str	r3, [r2, #0]
 8003dce:	e01d      	b.n	8003e0c <HAL_RCC_OscConfig+0xd4>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003dd8:	d10c      	bne.n	8003df4 <HAL_RCC_OscConfig+0xbc>
 8003dda:	4b72      	ldr	r3, [pc, #456]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a71      	ldr	r2, [pc, #452]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003de4:	6013      	str	r3, [r2, #0]
 8003de6:	4b6f      	ldr	r3, [pc, #444]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a6e      	ldr	r2, [pc, #440]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e00b      	b.n	8003e0c <HAL_RCC_OscConfig+0xd4>
 8003df4:	4b6b      	ldr	r3, [pc, #428]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a6a      	ldr	r2, [pc, #424]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dfe:	6013      	str	r3, [r2, #0]
 8003e00:	4b68      	ldr	r3, [pc, #416]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a67      	ldr	r2, [pc, #412]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d013      	beq.n	8003e3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e14:	f7ff fc6e 	bl	80036f4 <HAL_GetTick>
 8003e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e1a:	e008      	b.n	8003e2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e1c:	f7ff fc6a 	bl	80036f4 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	2b64      	cmp	r3, #100	; 0x64
 8003e28:	d901      	bls.n	8003e2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e200      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e2e:	4b5d      	ldr	r3, [pc, #372]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d0f0      	beq.n	8003e1c <HAL_RCC_OscConfig+0xe4>
 8003e3a:	e014      	b.n	8003e66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e3c:	f7ff fc5a 	bl	80036f4 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e44:	f7ff fc56 	bl	80036f4 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b64      	cmp	r3, #100	; 0x64
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e1ec      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e56:	4b53      	ldr	r3, [pc, #332]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d1f0      	bne.n	8003e44 <HAL_RCC_OscConfig+0x10c>
 8003e62:	e000      	b.n	8003e66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f003 0302 	and.w	r3, r3, #2
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d063      	beq.n	8003f3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e72:	4b4c      	ldr	r3, [pc, #304]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f003 030c 	and.w	r3, r3, #12
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00b      	beq.n	8003e96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003e7e:	4b49      	ldr	r3, [pc, #292]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f003 030c 	and.w	r3, r3, #12
 8003e86:	2b08      	cmp	r3, #8
 8003e88:	d11c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x18c>
 8003e8a:	4b46      	ldr	r3, [pc, #280]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d116      	bne.n	8003ec4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e96:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d005      	beq.n	8003eae <HAL_RCC_OscConfig+0x176>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d001      	beq.n	8003eae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e1c0      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eae:	4b3d      	ldr	r3, [pc, #244]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	695b      	ldr	r3, [r3, #20]
 8003eba:	00db      	lsls	r3, r3, #3
 8003ebc:	4939      	ldr	r1, [pc, #228]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ec2:	e03a      	b.n	8003f3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	691b      	ldr	r3, [r3, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d020      	beq.n	8003f0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ecc:	4b36      	ldr	r3, [pc, #216]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7ff fc0f 	bl	80036f4 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eda:	f7ff fc0b 	bl	80036f4 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e1a1      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eec:	4b2d      	ldr	r3, [pc, #180]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d0f0      	beq.n	8003eda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef8:	4b2a      	ldr	r3, [pc, #168]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	695b      	ldr	r3, [r3, #20]
 8003f04:	00db      	lsls	r3, r3, #3
 8003f06:	4927      	ldr	r1, [pc, #156]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	600b      	str	r3, [r1, #0]
 8003f0c:	e015      	b.n	8003f3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f0e:	4b26      	ldr	r3, [pc, #152]	; (8003fa8 <HAL_RCC_OscConfig+0x270>)
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f14:	f7ff fbee 	bl	80036f4 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1c:	f7ff fbea 	bl	80036f4 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e180      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f2e:	4b1d      	ldr	r3, [pc, #116]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d1f0      	bne.n	8003f1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 0308 	and.w	r3, r3, #8
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d03a      	beq.n	8003fbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	699b      	ldr	r3, [r3, #24]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d019      	beq.n	8003f82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f4e:	4b17      	ldr	r3, [pc, #92]	; (8003fac <HAL_RCC_OscConfig+0x274>)
 8003f50:	2201      	movs	r2, #1
 8003f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f54:	f7ff fbce 	bl	80036f4 <HAL_GetTick>
 8003f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f5a:	e008      	b.n	8003f6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f5c:	f7ff fbca 	bl	80036f4 <HAL_GetTick>
 8003f60:	4602      	mov	r2, r0
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	1ad3      	subs	r3, r2, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d901      	bls.n	8003f6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003f6a:	2303      	movs	r3, #3
 8003f6c:	e160      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <HAL_RCC_OscConfig+0x26c>)
 8003f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f72:	f003 0302 	and.w	r3, r3, #2
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d0f0      	beq.n	8003f5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003f7a:	2001      	movs	r0, #1
 8003f7c:	f000 fb10 	bl	80045a0 <RCC_Delay>
 8003f80:	e01c      	b.n	8003fbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f82:	4b0a      	ldr	r3, [pc, #40]	; (8003fac <HAL_RCC_OscConfig+0x274>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f88:	f7ff fbb4 	bl	80036f4 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f8e:	e00f      	b.n	8003fb0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f90:	f7ff fbb0 	bl	80036f4 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d908      	bls.n	8003fb0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e146      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	42420000 	.word	0x42420000
 8003fac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fb0:	4b92      	ldr	r3, [pc, #584]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	f003 0302 	and.w	r3, r3, #2
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1e9      	bne.n	8003f90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0304 	and.w	r3, r3, #4
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 80a6 	beq.w	8004116 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fce:	4b8b      	ldr	r3, [pc, #556]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d10d      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fda:	4b88      	ldr	r3, [pc, #544]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8003fdc:	69db      	ldr	r3, [r3, #28]
 8003fde:	4a87      	ldr	r2, [pc, #540]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8003fe0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fe4:	61d3      	str	r3, [r2, #28]
 8003fe6:	4b85      	ldr	r3, [pc, #532]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fee:	60bb      	str	r3, [r7, #8]
 8003ff0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff6:	4b82      	ldr	r3, [pc, #520]	; (8004200 <HAL_RCC_OscConfig+0x4c8>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d118      	bne.n	8004034 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004002:	4b7f      	ldr	r3, [pc, #508]	; (8004200 <HAL_RCC_OscConfig+0x4c8>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a7e      	ldr	r2, [pc, #504]	; (8004200 <HAL_RCC_OscConfig+0x4c8>)
 8004008:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800400c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800400e:	f7ff fb71 	bl	80036f4 <HAL_GetTick>
 8004012:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004014:	e008      	b.n	8004028 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004016:	f7ff fb6d 	bl	80036f4 <HAL_GetTick>
 800401a:	4602      	mov	r2, r0
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	1ad3      	subs	r3, r2, r3
 8004020:	2b64      	cmp	r3, #100	; 0x64
 8004022:	d901      	bls.n	8004028 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004024:	2303      	movs	r3, #3
 8004026:	e103      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004028:	4b75      	ldr	r3, [pc, #468]	; (8004200 <HAL_RCC_OscConfig+0x4c8>)
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0f0      	beq.n	8004016 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	2b01      	cmp	r3, #1
 800403a:	d106      	bne.n	800404a <HAL_RCC_OscConfig+0x312>
 800403c:	4b6f      	ldr	r3, [pc, #444]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	4a6e      	ldr	r2, [pc, #440]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004042:	f043 0301 	orr.w	r3, r3, #1
 8004046:	6213      	str	r3, [r2, #32]
 8004048:	e02d      	b.n	80040a6 <HAL_RCC_OscConfig+0x36e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d10c      	bne.n	800406c <HAL_RCC_OscConfig+0x334>
 8004052:	4b6a      	ldr	r3, [pc, #424]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004054:	6a1b      	ldr	r3, [r3, #32]
 8004056:	4a69      	ldr	r2, [pc, #420]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004058:	f023 0301 	bic.w	r3, r3, #1
 800405c:	6213      	str	r3, [r2, #32]
 800405e:	4b67      	ldr	r3, [pc, #412]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	4a66      	ldr	r2, [pc, #408]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004064:	f023 0304 	bic.w	r3, r3, #4
 8004068:	6213      	str	r3, [r2, #32]
 800406a:	e01c      	b.n	80040a6 <HAL_RCC_OscConfig+0x36e>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	2b05      	cmp	r3, #5
 8004072:	d10c      	bne.n	800408e <HAL_RCC_OscConfig+0x356>
 8004074:	4b61      	ldr	r3, [pc, #388]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004076:	6a1b      	ldr	r3, [r3, #32]
 8004078:	4a60      	ldr	r2, [pc, #384]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800407a:	f043 0304 	orr.w	r3, r3, #4
 800407e:	6213      	str	r3, [r2, #32]
 8004080:	4b5e      	ldr	r3, [pc, #376]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4a5d      	ldr	r2, [pc, #372]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004086:	f043 0301 	orr.w	r3, r3, #1
 800408a:	6213      	str	r3, [r2, #32]
 800408c:	e00b      	b.n	80040a6 <HAL_RCC_OscConfig+0x36e>
 800408e:	4b5b      	ldr	r3, [pc, #364]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004090:	6a1b      	ldr	r3, [r3, #32]
 8004092:	4a5a      	ldr	r2, [pc, #360]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004094:	f023 0301 	bic.w	r3, r3, #1
 8004098:	6213      	str	r3, [r2, #32]
 800409a:	4b58      	ldr	r3, [pc, #352]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	4a57      	ldr	r2, [pc, #348]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	f023 0304 	bic.w	r3, r3, #4
 80040a4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d015      	beq.n	80040da <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ae:	f7ff fb21 	bl	80036f4 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040b4:	e00a      	b.n	80040cc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040b6:	f7ff fb1d 	bl	80036f4 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d901      	bls.n	80040cc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0b1      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040cc:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	f003 0302 	and.w	r3, r3, #2
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d0ee      	beq.n	80040b6 <HAL_RCC_OscConfig+0x37e>
 80040d8:	e014      	b.n	8004104 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040da:	f7ff fb0b 	bl	80036f4 <HAL_GetTick>
 80040de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040e0:	e00a      	b.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e2:	f7ff fb07 	bl	80036f4 <HAL_GetTick>
 80040e6:	4602      	mov	r2, r0
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	1ad3      	subs	r3, r2, r3
 80040ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e09b      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80040f8:	4b40      	ldr	r3, [pc, #256]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 80040fa:	6a1b      	ldr	r3, [r3, #32]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1ee      	bne.n	80040e2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004104:	7dfb      	ldrb	r3, [r7, #23]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d105      	bne.n	8004116 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800410a:	4b3c      	ldr	r3, [pc, #240]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4a3b      	ldr	r2, [pc, #236]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004110:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004114:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	2b00      	cmp	r3, #0
 800411c:	f000 8087 	beq.w	800422e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004120:	4b36      	ldr	r3, [pc, #216]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004122:	685b      	ldr	r3, [r3, #4]
 8004124:	f003 030c 	and.w	r3, r3, #12
 8004128:	2b08      	cmp	r3, #8
 800412a:	d061      	beq.n	80041f0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	69db      	ldr	r3, [r3, #28]
 8004130:	2b02      	cmp	r3, #2
 8004132:	d146      	bne.n	80041c2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004134:	4b33      	ldr	r3, [pc, #204]	; (8004204 <HAL_RCC_OscConfig+0x4cc>)
 8004136:	2200      	movs	r2, #0
 8004138:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800413a:	f7ff fadb 	bl	80036f4 <HAL_GetTick>
 800413e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004142:	f7ff fad7 	bl	80036f4 <HAL_GetTick>
 8004146:	4602      	mov	r2, r0
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e06d      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004154:	4b29      	ldr	r3, [pc, #164]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800415c:	2b00      	cmp	r3, #0
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6a1b      	ldr	r3, [r3, #32]
 8004164:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004168:	d108      	bne.n	800417c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800416a:	4b24      	ldr	r3, [pc, #144]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	4921      	ldr	r1, [pc, #132]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004178:	4313      	orrs	r3, r2
 800417a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800417c:	4b1f      	ldr	r3, [pc, #124]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a19      	ldr	r1, [r3, #32]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	430b      	orrs	r3, r1
 800418e:	491b      	ldr	r1, [pc, #108]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 8004190:	4313      	orrs	r3, r2
 8004192:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004194:	4b1b      	ldr	r3, [pc, #108]	; (8004204 <HAL_RCC_OscConfig+0x4cc>)
 8004196:	2201      	movs	r2, #1
 8004198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800419a:	f7ff faab 	bl	80036f4 <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041a0:	e008      	b.n	80041b4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041a2:	f7ff faa7 	bl	80036f4 <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d901      	bls.n	80041b4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e03d      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80041b4:	4b11      	ldr	r3, [pc, #68]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d0f0      	beq.n	80041a2 <HAL_RCC_OscConfig+0x46a>
 80041c0:	e035      	b.n	800422e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041c2:	4b10      	ldr	r3, [pc, #64]	; (8004204 <HAL_RCC_OscConfig+0x4cc>)
 80041c4:	2200      	movs	r2, #0
 80041c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c8:	f7ff fa94 	bl	80036f4 <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041d0:	f7ff fa90 	bl	80036f4 <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e026      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <HAL_RCC_OscConfig+0x4c4>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d1f0      	bne.n	80041d0 <HAL_RCC_OscConfig+0x498>
 80041ee:	e01e      	b.n	800422e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	2b01      	cmp	r3, #1
 80041f6:	d107      	bne.n	8004208 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e019      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
 80041fc:	40021000 	.word	0x40021000
 8004200:	40007000 	.word	0x40007000
 8004204:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004208:	4b0b      	ldr	r3, [pc, #44]	; (8004238 <HAL_RCC_OscConfig+0x500>)
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	429a      	cmp	r2, r3
 800421a:	d106      	bne.n	800422a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3718      	adds	r7, #24
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40021000 	.word	0x40021000

0800423c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e0d0      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004250:	4b6a      	ldr	r3, [pc, #424]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f003 0307 	and.w	r3, r3, #7
 8004258:	683a      	ldr	r2, [r7, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d910      	bls.n	8004280 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800425e:	4b67      	ldr	r3, [pc, #412]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f023 0207 	bic.w	r2, r3, #7
 8004266:	4965      	ldr	r1, [pc, #404]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	4313      	orrs	r3, r2
 800426c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800426e:	4b63      	ldr	r3, [pc, #396]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	683a      	ldr	r2, [r7, #0]
 8004278:	429a      	cmp	r2, r3
 800427a:	d001      	beq.n	8004280 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800427c:	2301      	movs	r3, #1
 800427e:	e0b8      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f003 0302 	and.w	r3, r3, #2
 8004288:	2b00      	cmp	r3, #0
 800428a:	d020      	beq.n	80042ce <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	2b00      	cmp	r3, #0
 8004296:	d005      	beq.n	80042a4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004298:	4b59      	ldr	r3, [pc, #356]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	4a58      	ldr	r2, [pc, #352]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800429e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80042a2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80042b0:	4b53      	ldr	r3, [pc, #332]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	4a52      	ldr	r2, [pc, #328]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042b6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80042ba:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042bc:	4b50      	ldr	r3, [pc, #320]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042be:	685b      	ldr	r3, [r3, #4]
 80042c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	494d      	ldr	r1, [pc, #308]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042ca:	4313      	orrs	r3, r2
 80042cc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f003 0301 	and.w	r3, r3, #1
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d040      	beq.n	800435c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d107      	bne.n	80042f2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042e2:	4b47      	ldr	r3, [pc, #284]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d115      	bne.n	800431a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042ee:	2301      	movs	r3, #1
 80042f0:	e07f      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d107      	bne.n	800430a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042fa:	4b41      	ldr	r3, [pc, #260]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004302:	2b00      	cmp	r3, #0
 8004304:	d109      	bne.n	800431a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e073      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800430a:	4b3d      	ldr	r3, [pc, #244]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f003 0302 	and.w	r3, r3, #2
 8004312:	2b00      	cmp	r3, #0
 8004314:	d101      	bne.n	800431a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e06b      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800431a:	4b39      	ldr	r3, [pc, #228]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f023 0203 	bic.w	r2, r3, #3
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	4936      	ldr	r1, [pc, #216]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 8004328:	4313      	orrs	r3, r2
 800432a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800432c:	f7ff f9e2 	bl	80036f4 <HAL_GetTick>
 8004330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004332:	e00a      	b.n	800434a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004334:	f7ff f9de 	bl	80036f4 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004342:	4293      	cmp	r3, r2
 8004344:	d901      	bls.n	800434a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004346:	2303      	movs	r3, #3
 8004348:	e053      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800434a:	4b2d      	ldr	r3, [pc, #180]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 020c 	and.w	r2, r3, #12
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	429a      	cmp	r2, r3
 800435a:	d1eb      	bne.n	8004334 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800435c:	4b27      	ldr	r3, [pc, #156]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0307 	and.w	r3, r3, #7
 8004364:	683a      	ldr	r2, [r7, #0]
 8004366:	429a      	cmp	r2, r3
 8004368:	d210      	bcs.n	800438c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800436a:	4b24      	ldr	r3, [pc, #144]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f023 0207 	bic.w	r2, r3, #7
 8004372:	4922      	ldr	r1, [pc, #136]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 8004374:	683b      	ldr	r3, [r7, #0]
 8004376:	4313      	orrs	r3, r2
 8004378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800437a:	4b20      	ldr	r3, [pc, #128]	; (80043fc <HAL_RCC_ClockConfig+0x1c0>)
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0307 	and.w	r3, r3, #7
 8004382:	683a      	ldr	r2, [r7, #0]
 8004384:	429a      	cmp	r2, r3
 8004386:	d001      	beq.n	800438c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e032      	b.n	80043f2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0304 	and.w	r3, r3, #4
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004398:	4b19      	ldr	r3, [pc, #100]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	68db      	ldr	r3, [r3, #12]
 80043a4:	4916      	ldr	r1, [pc, #88]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d009      	beq.n	80043ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80043b6:	4b12      	ldr	r3, [pc, #72]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	00db      	lsls	r3, r3, #3
 80043c4:	490e      	ldr	r1, [pc, #56]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80043c6:	4313      	orrs	r3, r2
 80043c8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80043ca:	f000 f859 	bl	8004480 <HAL_RCC_GetSysClockFreq>
 80043ce:	4602      	mov	r2, r0
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_RCC_ClockConfig+0x1c4>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	091b      	lsrs	r3, r3, #4
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	490a      	ldr	r1, [pc, #40]	; (8004404 <HAL_RCC_ClockConfig+0x1c8>)
 80043dc:	5ccb      	ldrb	r3, [r1, r3]
 80043de:	fa22 f303 	lsr.w	r3, r2, r3
 80043e2:	4a09      	ldr	r2, [pc, #36]	; (8004408 <HAL_RCC_ClockConfig+0x1cc>)
 80043e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80043e6:	4b09      	ldr	r3, [pc, #36]	; (800440c <HAL_RCC_ClockConfig+0x1d0>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f7ff f940 	bl	8003670 <HAL_InitTick>

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	4618      	mov	r0, r3
 80043f4:	3710      	adds	r7, #16
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	bf00      	nop
 80043fc:	40022000 	.word	0x40022000
 8004400:	40021000 	.word	0x40021000
 8004404:	080439fc 	.word	0x080439fc
 8004408:	200000c0 	.word	0x200000c0
 800440c:	20000120 	.word	0x20000120

08004410 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b08a      	sub	sp, #40	; 0x28
 8004414:	af00      	add	r7, sp, #0
 8004416:	60f8      	str	r0, [r7, #12]
 8004418:	60b9      	str	r1, [r7, #8]
 800441a:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 800441c:	f107 0318 	add.w	r3, r7, #24
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 800442a:	2302      	movs	r3, #2
 800442c:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 800442e:	2303      	movs	r3, #3
 8004430:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 8004432:	2300      	movs	r3, #0
 8004434:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 8004436:	f44f 7380 	mov.w	r3, #256	; 0x100
 800443a:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 800443c:	4b0e      	ldr	r3, [pc, #56]	; (8004478 <HAL_RCC_MCOConfig+0x68>)
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <HAL_RCC_MCOConfig+0x68>)
 8004442:	f043 0304 	orr.w	r3, r3, #4
 8004446:	6193      	str	r3, [r2, #24]
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_RCC_MCOConfig+0x68>)
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 8004454:	f107 0318 	add.w	r3, r7, #24
 8004458:	4619      	mov	r1, r3
 800445a:	4808      	ldr	r0, [pc, #32]	; (800447c <HAL_RCC_MCOConfig+0x6c>)
 800445c:	f7ff fa86 	bl	800396c <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8004460:	4b05      	ldr	r3, [pc, #20]	; (8004478 <HAL_RCC_MCOConfig+0x68>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8004468:	4903      	ldr	r1, [pc, #12]	; (8004478 <HAL_RCC_MCOConfig+0x68>)
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	4313      	orrs	r3, r2
 800446e:	604b      	str	r3, [r1, #4]
}
 8004470:	bf00      	nop
 8004472:	3728      	adds	r7, #40	; 0x28
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	40021000 	.word	0x40021000
 800447c:	40010800 	.word	0x40010800

08004480 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004480:	b490      	push	{r4, r7}
 8004482:	b08a      	sub	sp, #40	; 0x28
 8004484:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004486:	4b29      	ldr	r3, [pc, #164]	; (800452c <HAL_RCC_GetSysClockFreq+0xac>)
 8004488:	1d3c      	adds	r4, r7, #4
 800448a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800448c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004490:	f240 2301 	movw	r3, #513	; 0x201
 8004494:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004496:	2300      	movs	r3, #0
 8004498:	61fb      	str	r3, [r7, #28]
 800449a:	2300      	movs	r3, #0
 800449c:	61bb      	str	r3, [r7, #24]
 800449e:	2300      	movs	r3, #0
 80044a0:	627b      	str	r3, [r7, #36]	; 0x24
 80044a2:	2300      	movs	r3, #0
 80044a4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80044a6:	2300      	movs	r3, #0
 80044a8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044aa:	4b21      	ldr	r3, [pc, #132]	; (8004530 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f003 030c 	and.w	r3, r3, #12
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d002      	beq.n	80044c0 <HAL_RCC_GetSysClockFreq+0x40>
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d003      	beq.n	80044c6 <HAL_RCC_GetSysClockFreq+0x46>
 80044be:	e02b      	b.n	8004518 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80044c0:	4b1c      	ldr	r3, [pc, #112]	; (8004534 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044c2:	623b      	str	r3, [r7, #32]
      break;
 80044c4:	e02b      	b.n	800451e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	0c9b      	lsrs	r3, r3, #18
 80044ca:	f003 030f 	and.w	r3, r3, #15
 80044ce:	3328      	adds	r3, #40	; 0x28
 80044d0:	443b      	add	r3, r7
 80044d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80044d6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d012      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80044e2:	4b13      	ldr	r3, [pc, #76]	; (8004530 <HAL_RCC_GetSysClockFreq+0xb0>)
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	0c5b      	lsrs	r3, r3, #17
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	3328      	adds	r3, #40	; 0x28
 80044ee:	443b      	add	r3, r7
 80044f0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80044f4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	4a0e      	ldr	r2, [pc, #56]	; (8004534 <HAL_RCC_GetSysClockFreq+0xb4>)
 80044fa:	fb03 f202 	mul.w	r2, r3, r2
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	fbb2 f3f3 	udiv	r3, r2, r3
 8004504:	627b      	str	r3, [r7, #36]	; 0x24
 8004506:	e004      	b.n	8004512 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	4a0b      	ldr	r2, [pc, #44]	; (8004538 <HAL_RCC_GetSysClockFreq+0xb8>)
 800450c:	fb02 f303 	mul.w	r3, r2, r3
 8004510:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004514:	623b      	str	r3, [r7, #32]
      break;
 8004516:	e002      	b.n	800451e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004518:	4b06      	ldr	r3, [pc, #24]	; (8004534 <HAL_RCC_GetSysClockFreq+0xb4>)
 800451a:	623b      	str	r3, [r7, #32]
      break;
 800451c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800451e:	6a3b      	ldr	r3, [r7, #32]
}
 8004520:	4618      	mov	r0, r3
 8004522:	3728      	adds	r7, #40	; 0x28
 8004524:	46bd      	mov	sp, r7
 8004526:	bc90      	pop	{r4, r7}
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	08006668 	.word	0x08006668
 8004530:	40021000 	.word	0x40021000
 8004534:	007a1200 	.word	0x007a1200
 8004538:	003d0900 	.word	0x003d0900

0800453c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b02      	ldr	r3, [pc, #8]	; (800454c <HAL_RCC_GetHCLKFreq+0x10>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	4618      	mov	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	bc80      	pop	{r7}
 800454a:	4770      	bx	lr
 800454c:	200000c0 	.word	0x200000c0

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004554:	f7ff fff2 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004558:	4602      	mov	r2, r0
 800455a:	4b05      	ldr	r3, [pc, #20]	; (8004570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	0a1b      	lsrs	r3, r3, #8
 8004560:	f003 0307 	and.w	r3, r3, #7
 8004564:	4903      	ldr	r1, [pc, #12]	; (8004574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004566:	5ccb      	ldrb	r3, [r1, r3]
 8004568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800456c:	4618      	mov	r0, r3
 800456e:	bd80      	pop	{r7, pc}
 8004570:	40021000 	.word	0x40021000
 8004574:	08043a0c 	.word	0x08043a0c

08004578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800457c:	f7ff ffde 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004580:	4602      	mov	r2, r0
 8004582:	4b05      	ldr	r3, [pc, #20]	; (8004598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	0adb      	lsrs	r3, r3, #11
 8004588:	f003 0307 	and.w	r3, r3, #7
 800458c:	4903      	ldr	r1, [pc, #12]	; (800459c <HAL_RCC_GetPCLK2Freq+0x24>)
 800458e:	5ccb      	ldrb	r3, [r1, r3]
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004594:	4618      	mov	r0, r3
 8004596:	bd80      	pop	{r7, pc}
 8004598:	40021000 	.word	0x40021000
 800459c:	08043a0c 	.word	0x08043a0c

080045a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045a8:	4b0a      	ldr	r3, [pc, #40]	; (80045d4 <RCC_Delay+0x34>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	4a0a      	ldr	r2, [pc, #40]	; (80045d8 <RCC_Delay+0x38>)
 80045ae:	fba2 2303 	umull	r2, r3, r2, r3
 80045b2:	0a5b      	lsrs	r3, r3, #9
 80045b4:	687a      	ldr	r2, [r7, #4]
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80045bc:	bf00      	nop
  }
  while (Delay --);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1e5a      	subs	r2, r3, #1
 80045c2:	60fa      	str	r2, [r7, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f9      	bne.n	80045bc <RCC_Delay+0x1c>
}
 80045c8:	bf00      	nop
 80045ca:	bf00      	nop
 80045cc:	3714      	adds	r7, #20
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bc80      	pop	{r7}
 80045d2:	4770      	bx	lr
 80045d4:	200000c0 	.word	0x200000c0
 80045d8:	10624dd3 	.word	0x10624dd3

080045dc <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FSMC_NORSRAM_TimingTypeDef *Timing,
                                FSMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	60b9      	str	r1, [r7, #8]
 80045e6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if ((hsram == NULL) || (hsram->Init.BurstAccessMode == FSMC_BURST_ACCESS_MODE_ENABLE))
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d004      	beq.n	80045f8 <HAL_SRAM_Init+0x1c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045f6:	d101      	bne.n	80045fc <HAL_SRAM_Init+0x20>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e038      	b.n	800466e <HAL_SRAM_Init+0x92>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d106      	bne.n	8004616 <HAL_SRAM_Init+0x3a>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7fe fbf3 	bl	8002dfc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FSMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	3308      	adds	r3, #8
 800461e:	4619      	mov	r1, r3
 8004620:	4610      	mov	r0, r2
 8004622:	f001 f909 	bl	8005838 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FSMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	461a      	mov	r2, r3
 8004630:	68b9      	ldr	r1, [r7, #8]
 8004632:	f001 f96b 	bl	800590c <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FSMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6858      	ldr	r0, [r3, #4]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	f001 f996 	bl	8005974 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FSMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	6892      	ldr	r2, [r2, #8]
 8004650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	6892      	ldr	r2, [r2, #8]
 800465c:	f041 0101 	orr.w	r1, r1, #1
 8004660:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b082      	sub	sp, #8
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e041      	b.n	800470c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468e:	b2db      	uxtb	r3, r3
 8004690:	2b00      	cmp	r3, #0
 8004692:	d106      	bne.n	80046a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f7fe fa83 	bl	8002ba8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2202      	movs	r2, #2
 80046a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	3304      	adds	r3, #4
 80046b2:	4619      	mov	r1, r3
 80046b4:	4610      	mov	r0, r2
 80046b6:	f000 fb19 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2201      	movs	r2, #1
 80046ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004714:	b480      	push	{r7}
 8004716:	b085      	sub	sp, #20
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b01      	cmp	r3, #1
 8004726:	d001      	beq.n	800472c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004728:	2301      	movs	r3, #1
 800472a:	e03c      	b.n	80047a6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a1d      	ldr	r2, [pc, #116]	; (80047b0 <HAL_TIM_Base_Start+0x9c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d018      	beq.n	8004770 <HAL_TIM_Base_Start+0x5c>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a1c      	ldr	r2, [pc, #112]	; (80047b4 <HAL_TIM_Base_Start+0xa0>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <HAL_TIM_Base_Start+0x5c>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004750:	d00e      	beq.n	8004770 <HAL_TIM_Base_Start+0x5c>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_TIM_Base_Start+0xa4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_TIM_Base_Start+0x5c>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a16      	ldr	r2, [pc, #88]	; (80047bc <HAL_TIM_Base_Start+0xa8>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_TIM_Base_Start+0x5c>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a15      	ldr	r2, [pc, #84]	; (80047c0 <HAL_TIM_Base_Start+0xac>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d111      	bne.n	8004794 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f003 0307 	and.w	r3, r3, #7
 800477a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	2b06      	cmp	r3, #6
 8004780:	d010      	beq.n	80047a4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f042 0201 	orr.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004792:	e007      	b.n	80047a4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047a4:	2300      	movs	r3, #0
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3714      	adds	r7, #20
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bc80      	pop	{r7}
 80047ae:	4770      	bx	lr
 80047b0:	40012c00 	.word	0x40012c00
 80047b4:	40013400 	.word	0x40013400
 80047b8:	40000400 	.word	0x40000400
 80047bc:	40000800 	.word	0x40000800
 80047c0:	40000c00 	.word	0x40000c00

080047c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b082      	sub	sp, #8
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e041      	b.n	800485a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d106      	bne.n	80047f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80047ea:	6878      	ldr	r0, [r7, #4]
 80047ec:	f000 f839 	bl	8004862 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	3304      	adds	r3, #4
 8004800:	4619      	mov	r1, r3
 8004802:	4610      	mov	r0, r2
 8004804:	f000 fa72 	bl	8004cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3708      	adds	r7, #8
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800486a:	bf00      	nop
 800486c:	370c      	adds	r7, #12
 800486e:	46bd      	mov	sp, r7
 8004870:	bc80      	pop	{r7}
 8004872:	4770      	bx	lr

08004874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d109      	bne.n	8004898 <HAL_TIM_PWM_Start+0x24>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b01      	cmp	r3, #1
 800488e:	bf14      	ite	ne
 8004890:	2301      	movne	r3, #1
 8004892:	2300      	moveq	r3, #0
 8004894:	b2db      	uxtb	r3, r3
 8004896:	e022      	b.n	80048de <HAL_TIM_PWM_Start+0x6a>
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	2b04      	cmp	r3, #4
 800489c:	d109      	bne.n	80048b2 <HAL_TIM_PWM_Start+0x3e>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	bf14      	ite	ne
 80048aa:	2301      	movne	r3, #1
 80048ac:	2300      	moveq	r3, #0
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	e015      	b.n	80048de <HAL_TIM_PWM_Start+0x6a>
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	2b08      	cmp	r3, #8
 80048b6:	d109      	bne.n	80048cc <HAL_TIM_PWM_Start+0x58>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80048be:	b2db      	uxtb	r3, r3
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	bf14      	ite	ne
 80048c4:	2301      	movne	r3, #1
 80048c6:	2300      	moveq	r3, #0
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	e008      	b.n	80048de <HAL_TIM_PWM_Start+0x6a>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	bf14      	ite	ne
 80048d8:	2301      	movne	r3, #1
 80048da:	2300      	moveq	r3, #0
 80048dc:	b2db      	uxtb	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e072      	b.n	80049cc <HAL_TIM_PWM_Start+0x158>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_PWM_Start+0x82>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2202      	movs	r2, #2
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048f4:	e013      	b.n	800491e <HAL_TIM_PWM_Start+0xaa>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b04      	cmp	r3, #4
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_PWM_Start+0x92>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2202      	movs	r2, #2
 8004900:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004904:	e00b      	b.n	800491e <HAL_TIM_PWM_Start+0xaa>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	2b08      	cmp	r3, #8
 800490a:	d104      	bne.n	8004916 <HAL_TIM_PWM_Start+0xa2>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2202      	movs	r2, #2
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004914:	e003      	b.n	800491e <HAL_TIM_PWM_Start+0xaa>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2202      	movs	r2, #2
 800491a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	2201      	movs	r2, #1
 8004924:	6839      	ldr	r1, [r7, #0]
 8004926:	4618      	mov	r0, r3
 8004928:	f000 fc9c 	bl	8005264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a28      	ldr	r2, [pc, #160]	; (80049d4 <HAL_TIM_PWM_Start+0x160>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d004      	beq.n	8004940 <HAL_TIM_PWM_Start+0xcc>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a27      	ldr	r2, [pc, #156]	; (80049d8 <HAL_TIM_PWM_Start+0x164>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d101      	bne.n	8004944 <HAL_TIM_PWM_Start+0xd0>
 8004940:	2301      	movs	r3, #1
 8004942:	e000      	b.n	8004946 <HAL_TIM_PWM_Start+0xd2>
 8004944:	2300      	movs	r3, #0
 8004946:	2b00      	cmp	r3, #0
 8004948:	d007      	beq.n	800495a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004958:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4a1d      	ldr	r2, [pc, #116]	; (80049d4 <HAL_TIM_PWM_Start+0x160>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d018      	beq.n	8004996 <HAL_TIM_PWM_Start+0x122>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a1b      	ldr	r2, [pc, #108]	; (80049d8 <HAL_TIM_PWM_Start+0x164>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d013      	beq.n	8004996 <HAL_TIM_PWM_Start+0x122>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004976:	d00e      	beq.n	8004996 <HAL_TIM_PWM_Start+0x122>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a17      	ldr	r2, [pc, #92]	; (80049dc <HAL_TIM_PWM_Start+0x168>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d009      	beq.n	8004996 <HAL_TIM_PWM_Start+0x122>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a16      	ldr	r2, [pc, #88]	; (80049e0 <HAL_TIM_PWM_Start+0x16c>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d004      	beq.n	8004996 <HAL_TIM_PWM_Start+0x122>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a14      	ldr	r2, [pc, #80]	; (80049e4 <HAL_TIM_PWM_Start+0x170>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d111      	bne.n	80049ba <HAL_TIM_PWM_Start+0x146>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	f003 0307 	and.w	r3, r3, #7
 80049a0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2b06      	cmp	r3, #6
 80049a6:	d010      	beq.n	80049ca <HAL_TIM_PWM_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0201 	orr.w	r2, r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049b8:	e007      	b.n	80049ca <HAL_TIM_PWM_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3710      	adds	r7, #16
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40012c00 	.word	0x40012c00
 80049d8:	40013400 	.word	0x40013400
 80049dc:	40000400 	.word	0x40000400
 80049e0:	40000800 	.word	0x40000800
 80049e4:	40000c00 	.word	0x40000c00

080049e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b084      	sub	sp, #16
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d101      	bne.n	8004a02 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80049fe:	2302      	movs	r3, #2
 8004a00:	e0ac      	b.n	8004b5c <HAL_TIM_PWM_ConfigChannel+0x174>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2201      	movs	r2, #1
 8004a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2b0c      	cmp	r3, #12
 8004a0e:	f200 809f 	bhi.w	8004b50 <HAL_TIM_PWM_ConfigChannel+0x168>
 8004a12:	a201      	add	r2, pc, #4	; (adr r2, 8004a18 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004a14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a18:	08004a4d 	.word	0x08004a4d
 8004a1c:	08004b51 	.word	0x08004b51
 8004a20:	08004b51 	.word	0x08004b51
 8004a24:	08004b51 	.word	0x08004b51
 8004a28:	08004a8d 	.word	0x08004a8d
 8004a2c:	08004b51 	.word	0x08004b51
 8004a30:	08004b51 	.word	0x08004b51
 8004a34:	08004b51 	.word	0x08004b51
 8004a38:	08004acf 	.word	0x08004acf
 8004a3c:	08004b51 	.word	0x08004b51
 8004a40:	08004b51 	.word	0x08004b51
 8004a44:	08004b51 	.word	0x08004b51
 8004a48:	08004b0f 	.word	0x08004b0f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68b9      	ldr	r1, [r7, #8]
 8004a52:	4618      	mov	r0, r3
 8004a54:	f000 f9c4 	bl	8004de0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699a      	ldr	r2, [r3, #24]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f042 0208 	orr.w	r2, r2, #8
 8004a66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0204 	bic.w	r2, r2, #4
 8004a76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	6999      	ldr	r1, [r3, #24]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	691a      	ldr	r2, [r3, #16]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	619a      	str	r2, [r3, #24]
      break;
 8004a8a:	e062      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fa14 	bl	8004ec0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699a      	ldr	r2, [r3, #24]
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aa6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ab6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6999      	ldr	r1, [r3, #24]
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	021a      	lsls	r2, r3, #8
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	619a      	str	r2, [r3, #24]
      break;
 8004acc:	e041      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68b9      	ldr	r1, [r7, #8]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fa67 	bl	8004fa8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f042 0208 	orr.w	r2, r2, #8
 8004ae8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	69da      	ldr	r2, [r3, #28]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0204 	bic.w	r2, r2, #4
 8004af8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69d9      	ldr	r1, [r3, #28]
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	691a      	ldr	r2, [r3, #16]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	61da      	str	r2, [r3, #28]
      break;
 8004b0c:	e021      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68b9      	ldr	r1, [r7, #8]
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 fabb 	bl	8005090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	69da      	ldr	r2, [r3, #28]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	69da      	ldr	r2, [r3, #28]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	69d9      	ldr	r1, [r3, #28]
 8004b40:	68bb      	ldr	r3, [r7, #8]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	021a      	lsls	r2, r3, #8
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	430a      	orrs	r2, r1
 8004b4c:	61da      	str	r2, [r3, #28]
      break;
 8004b4e:	e000      	b.n	8004b52 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004b50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	2200      	movs	r2, #0
 8004b56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}

08004b64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
 8004b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d101      	bne.n	8004b7c <HAL_TIM_ConfigClockSource+0x18>
 8004b78:	2302      	movs	r3, #2
 8004b7a:	e0b3      	b.n	8004ce4 <HAL_TIM_ConfigClockSource+0x180>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2202      	movs	r2, #2
 8004b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b9a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ba2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bb4:	d03e      	beq.n	8004c34 <HAL_TIM_ConfigClockSource+0xd0>
 8004bb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004bba:	f200 8087 	bhi.w	8004ccc <HAL_TIM_ConfigClockSource+0x168>
 8004bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bc2:	f000 8085 	beq.w	8004cd0 <HAL_TIM_ConfigClockSource+0x16c>
 8004bc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bca:	d87f      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x168>
 8004bcc:	2b70      	cmp	r3, #112	; 0x70
 8004bce:	d01a      	beq.n	8004c06 <HAL_TIM_ConfigClockSource+0xa2>
 8004bd0:	2b70      	cmp	r3, #112	; 0x70
 8004bd2:	d87b      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x168>
 8004bd4:	2b60      	cmp	r3, #96	; 0x60
 8004bd6:	d050      	beq.n	8004c7a <HAL_TIM_ConfigClockSource+0x116>
 8004bd8:	2b60      	cmp	r3, #96	; 0x60
 8004bda:	d877      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x168>
 8004bdc:	2b50      	cmp	r3, #80	; 0x50
 8004bde:	d03c      	beq.n	8004c5a <HAL_TIM_ConfigClockSource+0xf6>
 8004be0:	2b50      	cmp	r3, #80	; 0x50
 8004be2:	d873      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x168>
 8004be4:	2b40      	cmp	r3, #64	; 0x40
 8004be6:	d058      	beq.n	8004c9a <HAL_TIM_ConfigClockSource+0x136>
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	d86f      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x168>
 8004bec:	2b30      	cmp	r3, #48	; 0x30
 8004bee:	d064      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x156>
 8004bf0:	2b30      	cmp	r3, #48	; 0x30
 8004bf2:	d86b      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x168>
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	d060      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x156>
 8004bf8:	2b20      	cmp	r3, #32
 8004bfa:	d867      	bhi.n	8004ccc <HAL_TIM_ConfigClockSource+0x168>
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d05c      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x156>
 8004c00:	2b10      	cmp	r3, #16
 8004c02:	d05a      	beq.n	8004cba <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004c04:	e062      	b.n	8004ccc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	6899      	ldr	r1, [r3, #8]
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	f000 fb06 	bl	8005226 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c28:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	609a      	str	r2, [r3, #8]
      break;
 8004c32:	e04e      	b.n	8004cd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6818      	ldr	r0, [r3, #0]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	6899      	ldr	r1, [r3, #8]
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685a      	ldr	r2, [r3, #4]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f000 faef 	bl	8005226 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689a      	ldr	r2, [r3, #8]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c56:	609a      	str	r2, [r3, #8]
      break;
 8004c58:	e03b      	b.n	8004cd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6818      	ldr	r0, [r3, #0]
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	6859      	ldr	r1, [r3, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	68db      	ldr	r3, [r3, #12]
 8004c66:	461a      	mov	r2, r3
 8004c68:	f000 fa66 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2150      	movs	r1, #80	; 0x50
 8004c72:	4618      	mov	r0, r3
 8004c74:	f000 fabd 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004c78:	e02b      	b.n	8004cd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6818      	ldr	r0, [r3, #0]
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	6859      	ldr	r1, [r3, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	461a      	mov	r2, r3
 8004c88:	f000 fa84 	bl	8005194 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	2160      	movs	r1, #96	; 0x60
 8004c92:	4618      	mov	r0, r3
 8004c94:	f000 faad 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004c98:	e01b      	b.n	8004cd2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6818      	ldr	r0, [r3, #0]
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	6859      	ldr	r1, [r3, #4]
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	68db      	ldr	r3, [r3, #12]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	f000 fa46 	bl	8005138 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	2140      	movs	r1, #64	; 0x40
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f000 fa9d 	bl	80051f2 <TIM_ITRx_SetConfig>
      break;
 8004cb8:	e00b      	b.n	8004cd2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	4610      	mov	r0, r2
 8004cc6:	f000 fa94 	bl	80051f2 <TIM_ITRx_SetConfig>
        break;
 8004cca:	e002      	b.n	8004cd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004ccc:	bf00      	nop
 8004cce:	e000      	b.n	8004cd2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004cd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
 8004cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	4a33      	ldr	r2, [pc, #204]	; (8004dcc <TIM_Base_SetConfig+0xe0>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d013      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	4a32      	ldr	r2, [pc, #200]	; (8004dd0 <TIM_Base_SetConfig+0xe4>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d00f      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d12:	d00b      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	4a2f      	ldr	r2, [pc, #188]	; (8004dd4 <TIM_Base_SetConfig+0xe8>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d007      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a2e      	ldr	r2, [pc, #184]	; (8004dd8 <TIM_Base_SetConfig+0xec>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_Base_SetConfig+0x40>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a2d      	ldr	r2, [pc, #180]	; (8004ddc <TIM_Base_SetConfig+0xf0>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d108      	bne.n	8004d3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	68fa      	ldr	r2, [r7, #12]
 8004d3a:	4313      	orrs	r3, r2
 8004d3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <TIM_Base_SetConfig+0xe0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d013      	beq.n	8004d6e <TIM_Base_SetConfig+0x82>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <TIM_Base_SetConfig+0xe4>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d00f      	beq.n	8004d6e <TIM_Base_SetConfig+0x82>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d54:	d00b      	beq.n	8004d6e <TIM_Base_SetConfig+0x82>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a1e      	ldr	r2, [pc, #120]	; (8004dd4 <TIM_Base_SetConfig+0xe8>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d007      	beq.n	8004d6e <TIM_Base_SetConfig+0x82>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	4a1d      	ldr	r2, [pc, #116]	; (8004dd8 <TIM_Base_SetConfig+0xec>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d003      	beq.n	8004d6e <TIM_Base_SetConfig+0x82>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <TIM_Base_SetConfig+0xf0>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d108      	bne.n	8004d80 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	695b      	ldr	r3, [r3, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689a      	ldr	r2, [r3, #8]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	681a      	ldr	r2, [r3, #0]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4a09      	ldr	r2, [pc, #36]	; (8004dcc <TIM_Base_SetConfig+0xe0>)
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d003      	beq.n	8004db4 <TIM_Base_SetConfig+0xc8>
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a08      	ldr	r2, [pc, #32]	; (8004dd0 <TIM_Base_SetConfig+0xe4>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d103      	bne.n	8004dbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	691a      	ldr	r2, [r3, #16]
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	615a      	str	r2, [r3, #20]
}
 8004dc2:	bf00      	nop
 8004dc4:	3714      	adds	r7, #20
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bc80      	pop	{r7}
 8004dca:	4770      	bx	lr
 8004dcc:	40012c00 	.word	0x40012c00
 8004dd0:	40013400 	.word	0x40013400
 8004dd4:	40000400 	.word	0x40000400
 8004dd8:	40000800 	.word	0x40000800
 8004ddc:	40000c00 	.word	0x40000c00

08004de0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004de0:	b480      	push	{r7}
 8004de2:	b087      	sub	sp, #28
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a1b      	ldr	r3, [r3, #32]
 8004dee:	f023 0201 	bic.w	r2, r3, #1
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	699b      	ldr	r3, [r3, #24]
 8004e06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f023 0303 	bic.w	r3, r3, #3
 8004e16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68fa      	ldr	r2, [r7, #12]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f023 0302 	bic.w	r3, r3, #2
 8004e28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	689b      	ldr	r3, [r3, #8]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a20      	ldr	r2, [pc, #128]	; (8004eb8 <TIM_OC1_SetConfig+0xd8>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_OC1_SetConfig+0x64>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a1f      	ldr	r2, [pc, #124]	; (8004ebc <TIM_OC1_SetConfig+0xdc>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d10c      	bne.n	8004e5e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	f023 0308 	bic.w	r3, r3, #8
 8004e4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	68db      	ldr	r3, [r3, #12]
 8004e50:	697a      	ldr	r2, [r7, #20]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f023 0304 	bic.w	r3, r3, #4
 8004e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a15      	ldr	r2, [pc, #84]	; (8004eb8 <TIM_OC1_SetConfig+0xd8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d003      	beq.n	8004e6e <TIM_OC1_SetConfig+0x8e>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	4a14      	ldr	r2, [pc, #80]	; (8004ebc <TIM_OC1_SetConfig+0xdc>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d111      	bne.n	8004e92 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685a      	ldr	r2, [r3, #4]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	697a      	ldr	r2, [r7, #20]
 8004eaa:	621a      	str	r2, [r3, #32]
}
 8004eac:	bf00      	nop
 8004eae:	371c      	adds	r7, #28
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bc80      	pop	{r7}
 8004eb4:	4770      	bx	lr
 8004eb6:	bf00      	nop
 8004eb8:	40012c00 	.word	0x40012c00
 8004ebc:	40013400 	.word	0x40013400

08004ec0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	f023 0210 	bic.w	r2, r3, #16
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	685b      	ldr	r3, [r3, #4]
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	021b      	lsls	r3, r3, #8
 8004efe:	68fa      	ldr	r2, [r7, #12]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	f023 0320 	bic.w	r3, r3, #32
 8004f0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	011b      	lsls	r3, r3, #4
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a21      	ldr	r2, [pc, #132]	; (8004fa0 <TIM_OC2_SetConfig+0xe0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_OC2_SetConfig+0x68>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a20      	ldr	r2, [pc, #128]	; (8004fa4 <TIM_OC2_SetConfig+0xe4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d10d      	bne.n	8004f44 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	011b      	lsls	r3, r3, #4
 8004f36:	697a      	ldr	r2, [r7, #20]
 8004f38:	4313      	orrs	r3, r2
 8004f3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f42:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a16      	ldr	r2, [pc, #88]	; (8004fa0 <TIM_OC2_SetConfig+0xe0>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC2_SetConfig+0x94>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a15      	ldr	r2, [pc, #84]	; (8004fa4 <TIM_OC2_SetConfig+0xe4>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d113      	bne.n	8004f7c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f54:	693b      	ldr	r3, [r7, #16]
 8004f56:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f5a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f62:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	695b      	ldr	r3, [r3, #20]
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685a      	ldr	r2, [r3, #4]
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	621a      	str	r2, [r3, #32]
}
 8004f96:	bf00      	nop
 8004f98:	371c      	adds	r7, #28
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bc80      	pop	{r7}
 8004f9e:	4770      	bx	lr
 8004fa0:	40012c00 	.word	0x40012c00
 8004fa4:	40013400 	.word	0x40013400

08004fa8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b087      	sub	sp, #28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
 8004fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a1b      	ldr	r3, [r3, #32]
 8004fb6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	69db      	ldr	r3, [r3, #28]
 8004fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0303 	bic.w	r3, r3, #3
 8004fde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68fa      	ldr	r2, [r7, #12]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ff0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a21      	ldr	r2, [pc, #132]	; (8005088 <TIM_OC3_SetConfig+0xe0>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d003      	beq.n	800500e <TIM_OC3_SetConfig+0x66>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a20      	ldr	r2, [pc, #128]	; (800508c <TIM_OC3_SetConfig+0xe4>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d10d      	bne.n	800502a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005014:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	68db      	ldr	r3, [r3, #12]
 800501a:	021b      	lsls	r3, r3, #8
 800501c:	697a      	ldr	r2, [r7, #20]
 800501e:	4313      	orrs	r3, r2
 8005020:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005028:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a16      	ldr	r2, [pc, #88]	; (8005088 <TIM_OC3_SetConfig+0xe0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_OC3_SetConfig+0x92>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a15      	ldr	r2, [pc, #84]	; (800508c <TIM_OC3_SetConfig+0xe4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d113      	bne.n	8005062 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005040:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005048:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	695b      	ldr	r3, [r3, #20]
 800504e:	011b      	lsls	r3, r3, #4
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4313      	orrs	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	699b      	ldr	r3, [r3, #24]
 800505a:	011b      	lsls	r3, r3, #4
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	68fa      	ldr	r2, [r7, #12]
 800506c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	621a      	str	r2, [r3, #32]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	bc80      	pop	{r7}
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40012c00 	.word	0x40012c00
 800508c:	40013400 	.word	0x40013400

08005090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
 8005098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6a1b      	ldr	r3, [r3, #32]
 80050aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	021b      	lsls	r3, r3, #8
 80050ce:	68fa      	ldr	r2, [r7, #12]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	031b      	lsls	r3, r3, #12
 80050e2:	693a      	ldr	r2, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	4a11      	ldr	r2, [pc, #68]	; (8005130 <TIM_OC4_SetConfig+0xa0>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d003      	beq.n	80050f8 <TIM_OC4_SetConfig+0x68>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	4a10      	ldr	r2, [pc, #64]	; (8005134 <TIM_OC4_SetConfig+0xa4>)
 80050f4:	4293      	cmp	r3, r2
 80050f6:	d109      	bne.n	800510c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	019b      	lsls	r3, r3, #6
 8005106:	697a      	ldr	r2, [r7, #20]
 8005108:	4313      	orrs	r3, r2
 800510a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	697a      	ldr	r2, [r7, #20]
 8005110:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685a      	ldr	r2, [r3, #4]
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	bc80      	pop	{r7}
 800512e:	4770      	bx	lr
 8005130:	40012c00 	.word	0x40012c00
 8005134:	40013400 	.word	0x40013400

08005138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005138:	b480      	push	{r7}
 800513a:	b087      	sub	sp, #28
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6a1b      	ldr	r3, [r3, #32]
 800514e:	f023 0201 	bic.w	r2, r3, #1
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	699b      	ldr	r3, [r3, #24]
 800515a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800516e:	697b      	ldr	r3, [r7, #20]
 8005170:	f023 030a 	bic.w	r3, r3, #10
 8005174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4313      	orrs	r3, r2
 800517c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]
}
 800518a:	bf00      	nop
 800518c:	371c      	adds	r7, #28
 800518e:	46bd      	mov	sp, r7
 8005190:	bc80      	pop	{r7}
 8005192:	4770      	bx	lr

08005194 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6a1b      	ldr	r3, [r3, #32]
 80051a4:	f023 0210 	bic.w	r2, r3, #16
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	699b      	ldr	r3, [r3, #24]
 80051b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80051be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	031b      	lsls	r3, r3, #12
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	011b      	lsls	r3, r3, #4
 80051d6:	693a      	ldr	r2, [r7, #16]
 80051d8:	4313      	orrs	r3, r2
 80051da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	693a      	ldr	r2, [r7, #16]
 80051e6:	621a      	str	r2, [r3, #32]
}
 80051e8:	bf00      	nop
 80051ea:	371c      	adds	r7, #28
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bc80      	pop	{r7}
 80051f0:	4770      	bx	lr

080051f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051f2:	b480      	push	{r7}
 80051f4:	b085      	sub	sp, #20
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005208:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800520a:	683a      	ldr	r2, [r7, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	4313      	orrs	r3, r2
 8005210:	f043 0307 	orr.w	r3, r3, #7
 8005214:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	609a      	str	r2, [r3, #8]
}
 800521c:	bf00      	nop
 800521e:	3714      	adds	r7, #20
 8005220:	46bd      	mov	sp, r7
 8005222:	bc80      	pop	{r7}
 8005224:	4770      	bx	lr

08005226 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005226:	b480      	push	{r7}
 8005228:	b087      	sub	sp, #28
 800522a:	af00      	add	r7, sp, #0
 800522c:	60f8      	str	r0, [r7, #12]
 800522e:	60b9      	str	r1, [r7, #8]
 8005230:	607a      	str	r2, [r7, #4]
 8005232:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005240:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	021a      	lsls	r2, r3, #8
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	431a      	orrs	r2, r3
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	4313      	orrs	r3, r2
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	697a      	ldr	r2, [r7, #20]
 8005258:	609a      	str	r2, [r3, #8]
}
 800525a:	bf00      	nop
 800525c:	371c      	adds	r7, #28
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005264:	b480      	push	{r7}
 8005266:	b087      	sub	sp, #28
 8005268:	af00      	add	r7, sp, #0
 800526a:	60f8      	str	r0, [r7, #12]
 800526c:	60b9      	str	r1, [r7, #8]
 800526e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	f003 031f 	and.w	r3, r3, #31
 8005276:	2201      	movs	r2, #1
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	6a1a      	ldr	r2, [r3, #32]
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	43db      	mvns	r3, r3
 8005286:	401a      	ands	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6a1a      	ldr	r2, [r3, #32]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	f003 031f 	and.w	r3, r3, #31
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	fa01 f303 	lsl.w	r3, r1, r3
 800529c:	431a      	orrs	r2, r3
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bc80      	pop	{r7}
 80052aa:	4770      	bx	lr

080052ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e050      	b.n	8005366 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a1b      	ldr	r2, [pc, #108]	; (8005370 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d018      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	4a19      	ldr	r2, [pc, #100]	; (8005374 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d013      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800531a:	d00e      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a15      	ldr	r2, [pc, #84]	; (8005378 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d009      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a14      	ldr	r2, [pc, #80]	; (800537c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d004      	beq.n	800533a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a12      	ldr	r2, [pc, #72]	; (8005380 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d10c      	bne.n	8005354 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005340:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	68ba      	ldr	r2, [r7, #8]
 8005348:	4313      	orrs	r3, r2
 800534a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	bc80      	pop	{r7}
 800536e:	4770      	bx	lr
 8005370:	40012c00 	.word	0x40012c00
 8005374:	40013400 	.word	0x40013400
 8005378:	40000400 	.word	0x40000400
 800537c:	40000800 	.word	0x40000800
 8005380:	40000c00 	.word	0x40000c00

08005384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e03f      	b.n	8005416 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fd fc96 	bl	8002cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2224      	movs	r2, #36	; 0x24
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	68da      	ldr	r2, [r3, #12]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f9a7 	bl	800571c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	691a      	ldr	r2, [r3, #16]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	695a      	ldr	r2, [r3, #20]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68da      	ldr	r2, [r3, #12]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2200      	movs	r2, #0
 8005402:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2220      	movs	r2, #32
 8005408:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005414:	2300      	movs	r3, #0
}
 8005416:	4618      	mov	r0, r3
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}

0800541e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b08a      	sub	sp, #40	; 0x28
 8005422:	af02      	add	r7, sp, #8
 8005424:	60f8      	str	r0, [r7, #12]
 8005426:	60b9      	str	r1, [r7, #8]
 8005428:	603b      	str	r3, [r7, #0]
 800542a:	4613      	mov	r3, r2
 800542c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800542e:	2300      	movs	r3, #0
 8005430:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005438:	b2db      	uxtb	r3, r3
 800543a:	2b20      	cmp	r3, #32
 800543c:	d17c      	bne.n	8005538 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d002      	beq.n	800544a <HAL_UART_Transmit+0x2c>
 8005444:	88fb      	ldrh	r3, [r7, #6]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800544a:	2301      	movs	r3, #1
 800544c:	e075      	b.n	800553a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005454:	2b01      	cmp	r3, #1
 8005456:	d101      	bne.n	800545c <HAL_UART_Transmit+0x3e>
 8005458:	2302      	movs	r3, #2
 800545a:	e06e      	b.n	800553a <HAL_UART_Transmit+0x11c>
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	2200      	movs	r2, #0
 8005468:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2221      	movs	r2, #33	; 0x21
 800546e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005472:	f7fe f93f 	bl	80036f4 <HAL_GetTick>
 8005476:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	88fa      	ldrh	r2, [r7, #6]
 800547c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	88fa      	ldrh	r2, [r7, #6]
 8005482:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800548c:	d108      	bne.n	80054a0 <HAL_UART_Transmit+0x82>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d104      	bne.n	80054a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	e003      	b.n	80054a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80054b0:	e02a      	b.n	8005508 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	9300      	str	r3, [sp, #0]
 80054b6:	697b      	ldr	r3, [r7, #20]
 80054b8:	2200      	movs	r2, #0
 80054ba:	2180      	movs	r1, #128	; 0x80
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f8e2 	bl	8005686 <UART_WaitOnFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e036      	b.n	800553a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d10b      	bne.n	80054ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054d2:	69bb      	ldr	r3, [r7, #24]
 80054d4:	881b      	ldrh	r3, [r3, #0]
 80054d6:	461a      	mov	r2, r3
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	3302      	adds	r3, #2
 80054e6:	61bb      	str	r3, [r7, #24]
 80054e8:	e007      	b.n	80054fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80054ea:	69fb      	ldr	r3, [r7, #28]
 80054ec:	781a      	ldrb	r2, [r3, #0]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	3301      	adds	r3, #1
 80054f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80054fe:	b29b      	uxth	r3, r3
 8005500:	3b01      	subs	r3, #1
 8005502:	b29a      	uxth	r2, r3
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800550c:	b29b      	uxth	r3, r3
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1cf      	bne.n	80054b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	2200      	movs	r2, #0
 800551a:	2140      	movs	r1, #64	; 0x40
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 f8b2 	bl	8005686 <UART_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005528:	2303      	movs	r3, #3
 800552a:	e006      	b.n	800553a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2220      	movs	r2, #32
 8005530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	e000      	b.n	800553a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005538:	2302      	movs	r3, #2
  }
}
 800553a:	4618      	mov	r0, r3
 800553c:	3720      	adds	r7, #32
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}

08005542 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b08a      	sub	sp, #40	; 0x28
 8005546:	af02      	add	r7, sp, #8
 8005548:	60f8      	str	r0, [r7, #12]
 800554a:	60b9      	str	r1, [r7, #8]
 800554c:	603b      	str	r3, [r7, #0]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800555c:	b2db      	uxtb	r3, r3
 800555e:	2b20      	cmp	r3, #32
 8005560:	f040 808c 	bne.w	800567c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <HAL_UART_Receive+0x2e>
 800556a:	88fb      	ldrh	r3, [r7, #6]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e084      	b.n	800567e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800557a:	2b01      	cmp	r3, #1
 800557c:	d101      	bne.n	8005582 <HAL_UART_Receive+0x40>
 800557e:	2302      	movs	r3, #2
 8005580:	e07d      	b.n	800567e <HAL_UART_Receive+0x13c>
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2201      	movs	r2, #1
 8005586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2222      	movs	r2, #34	; 0x22
 8005594:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	2200      	movs	r2, #0
 800559c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800559e:	f7fe f8a9 	bl	80036f4 <HAL_GetTick>
 80055a2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	88fa      	ldrh	r2, [r7, #6]
 80055a8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	88fa      	ldrh	r2, [r7, #6]
 80055ae:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055b8:	d108      	bne.n	80055cc <HAL_UART_Receive+0x8a>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	691b      	ldr	r3, [r3, #16]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d104      	bne.n	80055cc <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	61bb      	str	r3, [r7, #24]
 80055ca:	e003      	b.n	80055d4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055d0:	2300      	movs	r3, #0
 80055d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80055dc:	e043      	b.n	8005666 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	9300      	str	r3, [sp, #0]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2200      	movs	r2, #0
 80055e6:	2120      	movs	r1, #32
 80055e8:	68f8      	ldr	r0, [r7, #12]
 80055ea:	f000 f84c 	bl	8005686 <UART_WaitOnFlagUntilTimeout>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d001      	beq.n	80055f8 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 80055f4:	2303      	movs	r3, #3
 80055f6:	e042      	b.n	800567e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 80055f8:	69fb      	ldr	r3, [r7, #28]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d10c      	bne.n	8005618 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	b29b      	uxth	r3, r3
 8005606:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800560a:	b29a      	uxth	r2, r3
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	3302      	adds	r3, #2
 8005614:	61bb      	str	r3, [r7, #24]
 8005616:	e01f      	b.n	8005658 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005620:	d007      	beq.n	8005632 <HAL_UART_Receive+0xf0>
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	689b      	ldr	r3, [r3, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d10a      	bne.n	8005640 <HAL_UART_Receive+0xfe>
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d106      	bne.n	8005640 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	b2da      	uxtb	r2, r3
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	701a      	strb	r2, [r3, #0]
 800563e:	e008      	b.n	8005652 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800564c:	b2da      	uxtb	r2, r3
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	3301      	adds	r3, #1
 8005656:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800565c:	b29b      	uxth	r3, r3
 800565e:	3b01      	subs	r3, #1
 8005660:	b29a      	uxth	r2, r3
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800566a:	b29b      	uxth	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	d1b6      	bne.n	80055de <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	2220      	movs	r2, #32
 8005674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8005678:	2300      	movs	r3, #0
 800567a:	e000      	b.n	800567e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 800567c:	2302      	movs	r3, #2
  }
}
 800567e:	4618      	mov	r0, r3
 8005680:	3720      	adds	r7, #32
 8005682:	46bd      	mov	sp, r7
 8005684:	bd80      	pop	{r7, pc}

08005686 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005686:	b580      	push	{r7, lr}
 8005688:	b084      	sub	sp, #16
 800568a:	af00      	add	r7, sp, #0
 800568c:	60f8      	str	r0, [r7, #12]
 800568e:	60b9      	str	r1, [r7, #8]
 8005690:	603b      	str	r3, [r7, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005696:	e02c      	b.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800569e:	d028      	beq.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d007      	beq.n	80056b6 <UART_WaitOnFlagUntilTimeout+0x30>
 80056a6:	f7fe f825 	bl	80036f4 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	69ba      	ldr	r2, [r7, #24]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d21d      	bcs.n	80056f2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	68da      	ldr	r2, [r3, #12]
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80056c4:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	695a      	ldr	r2, [r3, #20]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	2200      	movs	r2, #0
 80056ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e00f      	b.n	8005712 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681a      	ldr	r2, [r3, #0]
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	4013      	ands	r3, r2
 80056fc:	68ba      	ldr	r2, [r7, #8]
 80056fe:	429a      	cmp	r2, r3
 8005700:	bf0c      	ite	eq
 8005702:	2301      	moveq	r3, #1
 8005704:	2300      	movne	r3, #0
 8005706:	b2db      	uxtb	r3, r3
 8005708:	461a      	mov	r2, r3
 800570a:	79fb      	ldrb	r3, [r7, #7]
 800570c:	429a      	cmp	r2, r3
 800570e:	d0c3      	beq.n	8005698 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005710:	2300      	movs	r3, #0
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	bd80      	pop	{r7, pc}
	...

0800571c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	430a      	orrs	r2, r1
 8005738:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	691b      	ldr	r3, [r3, #16]
 8005742:	431a      	orrs	r2, r3
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	4313      	orrs	r3, r2
 800574a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005756:	f023 030c 	bic.w	r3, r3, #12
 800575a:	687a      	ldr	r2, [r7, #4]
 800575c:	6812      	ldr	r2, [r2, #0]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	430b      	orrs	r3, r1
 8005762:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	695b      	ldr	r3, [r3, #20]
 800576a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	699a      	ldr	r2, [r3, #24]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a2c      	ldr	r2, [pc, #176]	; (8005830 <UART_SetConfig+0x114>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d103      	bne.n	800578c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005784:	f7fe fef8 	bl	8004578 <HAL_RCC_GetPCLK2Freq>
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	e002      	b.n	8005792 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800578c:	f7fe fee0 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8005790:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	4613      	mov	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	4413      	add	r3, r2
 800579a:	009a      	lsls	r2, r3, #2
 800579c:	441a      	add	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	4a22      	ldr	r2, [pc, #136]	; (8005834 <UART_SetConfig+0x118>)
 80057aa:	fba2 2303 	umull	r2, r3, r2, r3
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	0119      	lsls	r1, r3, #4
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4613      	mov	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	4413      	add	r3, r2
 80057ba:	009a      	lsls	r2, r3, #2
 80057bc:	441a      	add	r2, r3
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	009b      	lsls	r3, r3, #2
 80057c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80057c8:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <UART_SetConfig+0x118>)
 80057ca:	fba3 0302 	umull	r0, r3, r3, r2
 80057ce:	095b      	lsrs	r3, r3, #5
 80057d0:	2064      	movs	r0, #100	; 0x64
 80057d2:	fb00 f303 	mul.w	r3, r0, r3
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	011b      	lsls	r3, r3, #4
 80057da:	3332      	adds	r3, #50	; 0x32
 80057dc:	4a15      	ldr	r2, [pc, #84]	; (8005834 <UART_SetConfig+0x118>)
 80057de:	fba2 2303 	umull	r2, r3, r2, r3
 80057e2:	095b      	lsrs	r3, r3, #5
 80057e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80057e8:	4419      	add	r1, r3
 80057ea:	68fa      	ldr	r2, [r7, #12]
 80057ec:	4613      	mov	r3, r2
 80057ee:	009b      	lsls	r3, r3, #2
 80057f0:	4413      	add	r3, r2
 80057f2:	009a      	lsls	r2, r3, #2
 80057f4:	441a      	add	r2, r3
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	009b      	lsls	r3, r3, #2
 80057fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005800:	4b0c      	ldr	r3, [pc, #48]	; (8005834 <UART_SetConfig+0x118>)
 8005802:	fba3 0302 	umull	r0, r3, r3, r2
 8005806:	095b      	lsrs	r3, r3, #5
 8005808:	2064      	movs	r0, #100	; 0x64
 800580a:	fb00 f303 	mul.w	r3, r0, r3
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	011b      	lsls	r3, r3, #4
 8005812:	3332      	adds	r3, #50	; 0x32
 8005814:	4a07      	ldr	r2, [pc, #28]	; (8005834 <UART_SetConfig+0x118>)
 8005816:	fba2 2303 	umull	r2, r3, r2, r3
 800581a:	095b      	lsrs	r3, r3, #5
 800581c:	f003 020f 	and.w	r2, r3, #15
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	440a      	add	r2, r1
 8005826:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005828:	bf00      	nop
 800582a:	3710      	adds	r7, #16
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}
 8005830:	40013800 	.word	0x40013800
 8005834:	51eb851f 	.word	0x51eb851f

08005838 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8005838:	b480      	push	{r7}
 800583a:	b087      	sub	sp, #28
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_ASYNWAIT(Init->AsynchronousWait));
  assert_param(IS_FSMC_WRITE_BURST(Init->WriteBurst));
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	681a      	ldr	r2, [r3, #0]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	6812      	ldr	r2, [r2, #0]
 8005850:	f023 0101 	bic.w	r1, r3, #1
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	2b08      	cmp	r3, #8
 8005860:	d102      	bne.n	8005868 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005862:	2340      	movs	r3, #64	; 0x40
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	e001      	b.n	800586c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8005868:	2300      	movs	r3, #0
 800586a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8005878:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800587e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005884:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800588a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8005890:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8005896:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WriteOperation          | \
 800589c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->WaitSignal              | \
 80058a2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
              Init->ExtendedMode            | \
 80058a8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  btcr_reg = (flashaccess                   | \
 80058ae:	4313      	orrs	r3, r2
 80058b0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->WrapMode;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	693a      	ldr	r2, [r7, #16]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCRx_MBKEN                |
 80058c6:	4b10      	ldr	r3, [pc, #64]	; (8005908 <FSMC_NORSRAM_Init+0xd0>)
 80058c8:	60fb      	str	r3, [r7, #12]
          FSMC_BCRx_WAITEN               |
          FSMC_BCRx_EXTMOD               |
          FSMC_BCRx_ASYNCWAIT            |
          FSMC_BCRx_CBURSTRW);

  mask |= FSMC_BCRx_WRAPMOD;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058d0:	60fb      	str	r3, [r7, #12]
  mask |= 0x00070000U; /* CPSIZE to be defined in CMSIS file */
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 80058d8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	43db      	mvns	r3, r3
 80058e8:	ea02 0103 	and.w	r1, r2, r3
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	693b      	ldr	r3, [r7, #16]
 80058f2:	4319      	orrs	r1, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]


  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	371c      	adds	r7, #28
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	0008fb7f 	.word	0x0008fb7f

0800590c <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800590c:	b480      	push	{r7}
 800590e:	b085      	sub	sp, #20
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	1c5a      	adds	r2, r3, #1
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005922:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	011b      	lsls	r3, r3, #4
 8005930:	431a      	orrs	r2, r3
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	021b      	lsls	r3, r3, #8
 8005938:	431a      	orrs	r2, r3
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	68db      	ldr	r3, [r3, #12]
 800593e:	041b      	lsls	r3, r3, #16
 8005940:	431a      	orrs	r2, r3
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	3b01      	subs	r3, #1
 8005948:	051b      	lsls	r3, r3, #20
 800594a:	431a      	orrs	r2, r3
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	695b      	ldr	r3, [r3, #20]
 8005950:	3b02      	subs	r3, #2
 8005952:	061b      	lsls	r3, r3, #24
 8005954:	431a      	orrs	r2, r3
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	4313      	orrs	r3, r2
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	3201      	adds	r2, #1
 8005960:	4319      	orrs	r1, r3
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       ((Timing->BusTurnAroundDuration)  << FSMC_BTRx_BUSTURN_Pos) |
                                                       (((Timing->CLKDivision) - 1U)     << FSMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FSMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005974:	b480      	push	{r7}
 8005976:	b085      	sub	sp, #20
 8005978:	af00      	add	r7, sp, #0
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005988:	d11d      	bne.n	80059c6 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
#if defined(FSMC_BWTRx_BUSTURN)
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	687a      	ldr	r2, [r7, #4]
 800598e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005992:	4b13      	ldr	r3, [pc, #76]	; (80059e0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005994:	4013      	ands	r3, r2
 8005996:	68ba      	ldr	r2, [r7, #8]
 8005998:	6811      	ldr	r1, [r2, #0]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	6852      	ldr	r2, [r2, #4]
 800599e:	0112      	lsls	r2, r2, #4
 80059a0:	4311      	orrs	r1, r2
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	6892      	ldr	r2, [r2, #8]
 80059a6:	0212      	lsls	r2, r2, #8
 80059a8:	4311      	orrs	r1, r2
 80059aa:	68ba      	ldr	r2, [r7, #8]
 80059ac:	6992      	ldr	r2, [r2, #24]
 80059ae:	4311      	orrs	r1, r2
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	68d2      	ldr	r2, [r2, #12]
 80059b4:	0412      	lsls	r2, r2, #16
 80059b6:	430a      	orrs	r2, r1
 80059b8:	ea43 0102 	orr.w	r1, r3, r2
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80059c4:	e005      	b.n	80059d2 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     (((Timing->DataLatency) - 2U)     << FSMC_BWTRx_DATLAT_Pos)));
#endif /* FSMC_BWTRx_BUSTURN */
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80059ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3714      	adds	r7, #20
 80059d8:	46bd      	mov	sp, r7
 80059da:	bc80      	pop	{r7}
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	cff00000 	.word	0xcff00000

080059e4 <__errno>:
 80059e4:	4b01      	ldr	r3, [pc, #4]	; (80059ec <__errno+0x8>)
 80059e6:	6818      	ldr	r0, [r3, #0]
 80059e8:	4770      	bx	lr
 80059ea:	bf00      	nop
 80059ec:	20000128 	.word	0x20000128

080059f0 <__libc_init_array>:
 80059f0:	b570      	push	{r4, r5, r6, lr}
 80059f2:	2600      	movs	r6, #0
 80059f4:	4d0c      	ldr	r5, [pc, #48]	; (8005a28 <__libc_init_array+0x38>)
 80059f6:	4c0d      	ldr	r4, [pc, #52]	; (8005a2c <__libc_init_array+0x3c>)
 80059f8:	1b64      	subs	r4, r4, r5
 80059fa:	10a4      	asrs	r4, r4, #2
 80059fc:	42a6      	cmp	r6, r4
 80059fe:	d109      	bne.n	8005a14 <__libc_init_array+0x24>
 8005a00:	f000 fe24 	bl	800664c <_init>
 8005a04:	2600      	movs	r6, #0
 8005a06:	4d0a      	ldr	r5, [pc, #40]	; (8005a30 <__libc_init_array+0x40>)
 8005a08:	4c0a      	ldr	r4, [pc, #40]	; (8005a34 <__libc_init_array+0x44>)
 8005a0a:	1b64      	subs	r4, r4, r5
 8005a0c:	10a4      	asrs	r4, r4, #2
 8005a0e:	42a6      	cmp	r6, r4
 8005a10:	d105      	bne.n	8005a1e <__libc_init_array+0x2e>
 8005a12:	bd70      	pop	{r4, r5, r6, pc}
 8005a14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a18:	4798      	blx	r3
 8005a1a:	3601      	adds	r6, #1
 8005a1c:	e7ee      	b.n	80059fc <__libc_init_array+0xc>
 8005a1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a22:	4798      	blx	r3
 8005a24:	3601      	adds	r6, #1
 8005a26:	e7f2      	b.n	8005a0e <__libc_init_array+0x1e>
 8005a28:	08043b94 	.word	0x08043b94
 8005a2c:	08043b94 	.word	0x08043b94
 8005a30:	08043b94 	.word	0x08043b94
 8005a34:	08043b98 	.word	0x08043b98

08005a38 <memset>:
 8005a38:	4603      	mov	r3, r0
 8005a3a:	4402      	add	r2, r0
 8005a3c:	4293      	cmp	r3, r2
 8005a3e:	d100      	bne.n	8005a42 <memset+0xa>
 8005a40:	4770      	bx	lr
 8005a42:	f803 1b01 	strb.w	r1, [r3], #1
 8005a46:	e7f9      	b.n	8005a3c <memset+0x4>

08005a48 <siscanf>:
 8005a48:	b40e      	push	{r1, r2, r3}
 8005a4a:	f44f 7201 	mov.w	r2, #516	; 0x204
 8005a4e:	b530      	push	{r4, r5, lr}
 8005a50:	b09c      	sub	sp, #112	; 0x70
 8005a52:	ac1f      	add	r4, sp, #124	; 0x7c
 8005a54:	f854 5b04 	ldr.w	r5, [r4], #4
 8005a58:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005a5c:	9002      	str	r0, [sp, #8]
 8005a5e:	9006      	str	r0, [sp, #24]
 8005a60:	f7fa fbe2 	bl	8000228 <strlen>
 8005a64:	4b0b      	ldr	r3, [pc, #44]	; (8005a94 <siscanf+0x4c>)
 8005a66:	9003      	str	r0, [sp, #12]
 8005a68:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	930f      	str	r3, [sp, #60]	; 0x3c
 8005a6e:	9314      	str	r3, [sp, #80]	; 0x50
 8005a70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a74:	9007      	str	r0, [sp, #28]
 8005a76:	4808      	ldr	r0, [pc, #32]	; (8005a98 <siscanf+0x50>)
 8005a78:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a7c:	462a      	mov	r2, r5
 8005a7e:	4623      	mov	r3, r4
 8005a80:	a902      	add	r1, sp, #8
 8005a82:	6800      	ldr	r0, [r0, #0]
 8005a84:	9401      	str	r4, [sp, #4]
 8005a86:	f000 f865 	bl	8005b54 <__ssvfiscanf_r>
 8005a8a:	b01c      	add	sp, #112	; 0x70
 8005a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a90:	b003      	add	sp, #12
 8005a92:	4770      	bx	lr
 8005a94:	08005a9d 	.word	0x08005a9d
 8005a98:	20000128 	.word	0x20000128

08005a9c <__seofread>:
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	4770      	bx	lr

08005aa0 <_sungetc_r>:
 8005aa0:	b538      	push	{r3, r4, r5, lr}
 8005aa2:	1c4b      	adds	r3, r1, #1
 8005aa4:	4614      	mov	r4, r2
 8005aa6:	d103      	bne.n	8005ab0 <_sungetc_r+0x10>
 8005aa8:	f04f 35ff 	mov.w	r5, #4294967295
 8005aac:	4628      	mov	r0, r5
 8005aae:	bd38      	pop	{r3, r4, r5, pc}
 8005ab0:	8993      	ldrh	r3, [r2, #12]
 8005ab2:	b2cd      	uxtb	r5, r1
 8005ab4:	f023 0320 	bic.w	r3, r3, #32
 8005ab8:	8193      	strh	r3, [r2, #12]
 8005aba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005abc:	6852      	ldr	r2, [r2, #4]
 8005abe:	b18b      	cbz	r3, 8005ae4 <_sungetc_r+0x44>
 8005ac0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	dd08      	ble.n	8005ad8 <_sungetc_r+0x38>
 8005ac6:	6823      	ldr	r3, [r4, #0]
 8005ac8:	1e5a      	subs	r2, r3, #1
 8005aca:	6022      	str	r2, [r4, #0]
 8005acc:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005ad0:	6863      	ldr	r3, [r4, #4]
 8005ad2:	3301      	adds	r3, #1
 8005ad4:	6063      	str	r3, [r4, #4]
 8005ad6:	e7e9      	b.n	8005aac <_sungetc_r+0xc>
 8005ad8:	4621      	mov	r1, r4
 8005ada:	f000 fc31 	bl	8006340 <__submore>
 8005ade:	2800      	cmp	r0, #0
 8005ae0:	d0f1      	beq.n	8005ac6 <_sungetc_r+0x26>
 8005ae2:	e7e1      	b.n	8005aa8 <_sungetc_r+0x8>
 8005ae4:	6921      	ldr	r1, [r4, #16]
 8005ae6:	6823      	ldr	r3, [r4, #0]
 8005ae8:	b151      	cbz	r1, 8005b00 <_sungetc_r+0x60>
 8005aea:	4299      	cmp	r1, r3
 8005aec:	d208      	bcs.n	8005b00 <_sungetc_r+0x60>
 8005aee:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8005af2:	42a9      	cmp	r1, r5
 8005af4:	d104      	bne.n	8005b00 <_sungetc_r+0x60>
 8005af6:	3b01      	subs	r3, #1
 8005af8:	3201      	adds	r2, #1
 8005afa:	6023      	str	r3, [r4, #0]
 8005afc:	6062      	str	r2, [r4, #4]
 8005afe:	e7d5      	b.n	8005aac <_sungetc_r+0xc>
 8005b00:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005b04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b08:	6363      	str	r3, [r4, #52]	; 0x34
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	63a3      	str	r3, [r4, #56]	; 0x38
 8005b0e:	4623      	mov	r3, r4
 8005b10:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005b14:	6023      	str	r3, [r4, #0]
 8005b16:	2301      	movs	r3, #1
 8005b18:	e7dc      	b.n	8005ad4 <_sungetc_r+0x34>

08005b1a <__ssrefill_r>:
 8005b1a:	b510      	push	{r4, lr}
 8005b1c:	460c      	mov	r4, r1
 8005b1e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005b20:	b169      	cbz	r1, 8005b3e <__ssrefill_r+0x24>
 8005b22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b26:	4299      	cmp	r1, r3
 8005b28:	d001      	beq.n	8005b2e <__ssrefill_r+0x14>
 8005b2a:	f000 fc5f 	bl	80063ec <_free_r>
 8005b2e:	2000      	movs	r0, #0
 8005b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b32:	6360      	str	r0, [r4, #52]	; 0x34
 8005b34:	6063      	str	r3, [r4, #4]
 8005b36:	b113      	cbz	r3, 8005b3e <__ssrefill_r+0x24>
 8005b38:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005b3a:	6023      	str	r3, [r4, #0]
 8005b3c:	bd10      	pop	{r4, pc}
 8005b3e:	6923      	ldr	r3, [r4, #16]
 8005b40:	f04f 30ff 	mov.w	r0, #4294967295
 8005b44:	6023      	str	r3, [r4, #0]
 8005b46:	2300      	movs	r3, #0
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	89a3      	ldrh	r3, [r4, #12]
 8005b4c:	f043 0320 	orr.w	r3, r3, #32
 8005b50:	81a3      	strh	r3, [r4, #12]
 8005b52:	e7f3      	b.n	8005b3c <__ssrefill_r+0x22>

08005b54 <__ssvfiscanf_r>:
 8005b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b58:	460c      	mov	r4, r1
 8005b5a:	2100      	movs	r1, #0
 8005b5c:	4606      	mov	r6, r0
 8005b5e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8005b62:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8005b66:	49a7      	ldr	r1, [pc, #668]	; (8005e04 <__ssvfiscanf_r+0x2b0>)
 8005b68:	f10d 0804 	add.w	r8, sp, #4
 8005b6c:	91a0      	str	r1, [sp, #640]	; 0x280
 8005b6e:	49a6      	ldr	r1, [pc, #664]	; (8005e08 <__ssvfiscanf_r+0x2b4>)
 8005b70:	4fa6      	ldr	r7, [pc, #664]	; (8005e0c <__ssvfiscanf_r+0x2b8>)
 8005b72:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8005e10 <__ssvfiscanf_r+0x2bc>
 8005b76:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8005b7a:	91a1      	str	r1, [sp, #644]	; 0x284
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	7813      	ldrb	r3, [r2, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 815c 	beq.w	8005e3e <__ssvfiscanf_r+0x2ea>
 8005b86:	5dd9      	ldrb	r1, [r3, r7]
 8005b88:	1c55      	adds	r5, r2, #1
 8005b8a:	f011 0108 	ands.w	r1, r1, #8
 8005b8e:	d019      	beq.n	8005bc4 <__ssvfiscanf_r+0x70>
 8005b90:	6863      	ldr	r3, [r4, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	dd0f      	ble.n	8005bb6 <__ssvfiscanf_r+0x62>
 8005b96:	6823      	ldr	r3, [r4, #0]
 8005b98:	781a      	ldrb	r2, [r3, #0]
 8005b9a:	5cba      	ldrb	r2, [r7, r2]
 8005b9c:	0712      	lsls	r2, r2, #28
 8005b9e:	d401      	bmi.n	8005ba4 <__ssvfiscanf_r+0x50>
 8005ba0:	462a      	mov	r2, r5
 8005ba2:	e7ec      	b.n	8005b7e <__ssvfiscanf_r+0x2a>
 8005ba4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005ba6:	3301      	adds	r3, #1
 8005ba8:	3201      	adds	r2, #1
 8005baa:	9245      	str	r2, [sp, #276]	; 0x114
 8005bac:	6862      	ldr	r2, [r4, #4]
 8005bae:	6023      	str	r3, [r4, #0]
 8005bb0:	3a01      	subs	r2, #1
 8005bb2:	6062      	str	r2, [r4, #4]
 8005bb4:	e7ec      	b.n	8005b90 <__ssvfiscanf_r+0x3c>
 8005bb6:	4621      	mov	r1, r4
 8005bb8:	4630      	mov	r0, r6
 8005bba:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005bbc:	4798      	blx	r3
 8005bbe:	2800      	cmp	r0, #0
 8005bc0:	d0e9      	beq.n	8005b96 <__ssvfiscanf_r+0x42>
 8005bc2:	e7ed      	b.n	8005ba0 <__ssvfiscanf_r+0x4c>
 8005bc4:	2b25      	cmp	r3, #37	; 0x25
 8005bc6:	d012      	beq.n	8005bee <__ssvfiscanf_r+0x9a>
 8005bc8:	469a      	mov	sl, r3
 8005bca:	6863      	ldr	r3, [r4, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f340 8094 	ble.w	8005cfa <__ssvfiscanf_r+0x1a6>
 8005bd2:	6822      	ldr	r2, [r4, #0]
 8005bd4:	7813      	ldrb	r3, [r2, #0]
 8005bd6:	4553      	cmp	r3, sl
 8005bd8:	f040 8131 	bne.w	8005e3e <__ssvfiscanf_r+0x2ea>
 8005bdc:	6863      	ldr	r3, [r4, #4]
 8005bde:	3201      	adds	r2, #1
 8005be0:	3b01      	subs	r3, #1
 8005be2:	6063      	str	r3, [r4, #4]
 8005be4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8005be6:	6022      	str	r2, [r4, #0]
 8005be8:	3301      	adds	r3, #1
 8005bea:	9345      	str	r3, [sp, #276]	; 0x114
 8005bec:	e7d8      	b.n	8005ba0 <__ssvfiscanf_r+0x4c>
 8005bee:	9141      	str	r1, [sp, #260]	; 0x104
 8005bf0:	9143      	str	r1, [sp, #268]	; 0x10c
 8005bf2:	7853      	ldrb	r3, [r2, #1]
 8005bf4:	2b2a      	cmp	r3, #42	; 0x2a
 8005bf6:	bf04      	itt	eq
 8005bf8:	2310      	moveq	r3, #16
 8005bfa:	1c95      	addeq	r5, r2, #2
 8005bfc:	f04f 020a 	mov.w	r2, #10
 8005c00:	bf08      	it	eq
 8005c02:	9341      	streq	r3, [sp, #260]	; 0x104
 8005c04:	46aa      	mov	sl, r5
 8005c06:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8005c0a:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8005c0e:	2b09      	cmp	r3, #9
 8005c10:	d91d      	bls.n	8005c4e <__ssvfiscanf_r+0xfa>
 8005c12:	2203      	movs	r2, #3
 8005c14:	487e      	ldr	r0, [pc, #504]	; (8005e10 <__ssvfiscanf_r+0x2bc>)
 8005c16:	f000 fbcd 	bl	80063b4 <memchr>
 8005c1a:	b140      	cbz	r0, 8005c2e <__ssvfiscanf_r+0xda>
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	4655      	mov	r5, sl
 8005c20:	eba0 0009 	sub.w	r0, r0, r9
 8005c24:	fa03 f000 	lsl.w	r0, r3, r0
 8005c28:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005c2a:	4318      	orrs	r0, r3
 8005c2c:	9041      	str	r0, [sp, #260]	; 0x104
 8005c2e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005c32:	2b78      	cmp	r3, #120	; 0x78
 8005c34:	d806      	bhi.n	8005c44 <__ssvfiscanf_r+0xf0>
 8005c36:	2b57      	cmp	r3, #87	; 0x57
 8005c38:	d810      	bhi.n	8005c5c <__ssvfiscanf_r+0x108>
 8005c3a:	2b25      	cmp	r3, #37	; 0x25
 8005c3c:	d0c4      	beq.n	8005bc8 <__ssvfiscanf_r+0x74>
 8005c3e:	d857      	bhi.n	8005cf0 <__ssvfiscanf_r+0x19c>
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d065      	beq.n	8005d10 <__ssvfiscanf_r+0x1bc>
 8005c44:	2303      	movs	r3, #3
 8005c46:	9347      	str	r3, [sp, #284]	; 0x11c
 8005c48:	230a      	movs	r3, #10
 8005c4a:	9342      	str	r3, [sp, #264]	; 0x108
 8005c4c:	e072      	b.n	8005d34 <__ssvfiscanf_r+0x1e0>
 8005c4e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8005c50:	4655      	mov	r5, sl
 8005c52:	fb02 1103 	mla	r1, r2, r3, r1
 8005c56:	3930      	subs	r1, #48	; 0x30
 8005c58:	9143      	str	r1, [sp, #268]	; 0x10c
 8005c5a:	e7d3      	b.n	8005c04 <__ssvfiscanf_r+0xb0>
 8005c5c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8005c60:	2a20      	cmp	r2, #32
 8005c62:	d8ef      	bhi.n	8005c44 <__ssvfiscanf_r+0xf0>
 8005c64:	a101      	add	r1, pc, #4	; (adr r1, 8005c6c <__ssvfiscanf_r+0x118>)
 8005c66:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005c6a:	bf00      	nop
 8005c6c:	08005d1f 	.word	0x08005d1f
 8005c70:	08005c45 	.word	0x08005c45
 8005c74:	08005c45 	.word	0x08005c45
 8005c78:	08005d7d 	.word	0x08005d7d
 8005c7c:	08005c45 	.word	0x08005c45
 8005c80:	08005c45 	.word	0x08005c45
 8005c84:	08005c45 	.word	0x08005c45
 8005c88:	08005c45 	.word	0x08005c45
 8005c8c:	08005c45 	.word	0x08005c45
 8005c90:	08005c45 	.word	0x08005c45
 8005c94:	08005c45 	.word	0x08005c45
 8005c98:	08005d93 	.word	0x08005d93
 8005c9c:	08005d69 	.word	0x08005d69
 8005ca0:	08005cf7 	.word	0x08005cf7
 8005ca4:	08005cf7 	.word	0x08005cf7
 8005ca8:	08005cf7 	.word	0x08005cf7
 8005cac:	08005c45 	.word	0x08005c45
 8005cb0:	08005d6d 	.word	0x08005d6d
 8005cb4:	08005c45 	.word	0x08005c45
 8005cb8:	08005c45 	.word	0x08005c45
 8005cbc:	08005c45 	.word	0x08005c45
 8005cc0:	08005c45 	.word	0x08005c45
 8005cc4:	08005da3 	.word	0x08005da3
 8005cc8:	08005d75 	.word	0x08005d75
 8005ccc:	08005d17 	.word	0x08005d17
 8005cd0:	08005c45 	.word	0x08005c45
 8005cd4:	08005c45 	.word	0x08005c45
 8005cd8:	08005d9f 	.word	0x08005d9f
 8005cdc:	08005c45 	.word	0x08005c45
 8005ce0:	08005d69 	.word	0x08005d69
 8005ce4:	08005c45 	.word	0x08005c45
 8005ce8:	08005c45 	.word	0x08005c45
 8005cec:	08005d1f 	.word	0x08005d1f
 8005cf0:	3b45      	subs	r3, #69	; 0x45
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d8a6      	bhi.n	8005c44 <__ssvfiscanf_r+0xf0>
 8005cf6:	2305      	movs	r3, #5
 8005cf8:	e01b      	b.n	8005d32 <__ssvfiscanf_r+0x1de>
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	4630      	mov	r0, r6
 8005cfe:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005d00:	4798      	blx	r3
 8005d02:	2800      	cmp	r0, #0
 8005d04:	f43f af65 	beq.w	8005bd2 <__ssvfiscanf_r+0x7e>
 8005d08:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	f040 808d 	bne.w	8005e2a <__ssvfiscanf_r+0x2d6>
 8005d10:	f04f 30ff 	mov.w	r0, #4294967295
 8005d14:	e08f      	b.n	8005e36 <__ssvfiscanf_r+0x2e2>
 8005d16:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005d18:	f042 0220 	orr.w	r2, r2, #32
 8005d1c:	9241      	str	r2, [sp, #260]	; 0x104
 8005d1e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8005d20:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d24:	9241      	str	r2, [sp, #260]	; 0x104
 8005d26:	2210      	movs	r2, #16
 8005d28:	2b6f      	cmp	r3, #111	; 0x6f
 8005d2a:	bf34      	ite	cc
 8005d2c:	2303      	movcc	r3, #3
 8005d2e:	2304      	movcs	r3, #4
 8005d30:	9242      	str	r2, [sp, #264]	; 0x108
 8005d32:	9347      	str	r3, [sp, #284]	; 0x11c
 8005d34:	6863      	ldr	r3, [r4, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	dd42      	ble.n	8005dc0 <__ssvfiscanf_r+0x26c>
 8005d3a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d3c:	0659      	lsls	r1, r3, #25
 8005d3e:	d404      	bmi.n	8005d4a <__ssvfiscanf_r+0x1f6>
 8005d40:	6823      	ldr	r3, [r4, #0]
 8005d42:	781a      	ldrb	r2, [r3, #0]
 8005d44:	5cba      	ldrb	r2, [r7, r2]
 8005d46:	0712      	lsls	r2, r2, #28
 8005d48:	d441      	bmi.n	8005dce <__ssvfiscanf_r+0x27a>
 8005d4a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8005d4c:	2b02      	cmp	r3, #2
 8005d4e:	dc50      	bgt.n	8005df2 <__ssvfiscanf_r+0x29e>
 8005d50:	466b      	mov	r3, sp
 8005d52:	4622      	mov	r2, r4
 8005d54:	4630      	mov	r0, r6
 8005d56:	a941      	add	r1, sp, #260	; 0x104
 8005d58:	f000 f876 	bl	8005e48 <_scanf_chars>
 8005d5c:	2801      	cmp	r0, #1
 8005d5e:	d06e      	beq.n	8005e3e <__ssvfiscanf_r+0x2ea>
 8005d60:	2802      	cmp	r0, #2
 8005d62:	f47f af1d 	bne.w	8005ba0 <__ssvfiscanf_r+0x4c>
 8005d66:	e7cf      	b.n	8005d08 <__ssvfiscanf_r+0x1b4>
 8005d68:	220a      	movs	r2, #10
 8005d6a:	e7dd      	b.n	8005d28 <__ssvfiscanf_r+0x1d4>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9342      	str	r3, [sp, #264]	; 0x108
 8005d70:	2303      	movs	r3, #3
 8005d72:	e7de      	b.n	8005d32 <__ssvfiscanf_r+0x1de>
 8005d74:	2308      	movs	r3, #8
 8005d76:	9342      	str	r3, [sp, #264]	; 0x108
 8005d78:	2304      	movs	r3, #4
 8005d7a:	e7da      	b.n	8005d32 <__ssvfiscanf_r+0x1de>
 8005d7c:	4629      	mov	r1, r5
 8005d7e:	4640      	mov	r0, r8
 8005d80:	f000 f9b4 	bl	80060ec <__sccl>
 8005d84:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d86:	4605      	mov	r5, r0
 8005d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d8c:	9341      	str	r3, [sp, #260]	; 0x104
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e7cf      	b.n	8005d32 <__ssvfiscanf_r+0x1de>
 8005d92:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8005d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005d98:	9341      	str	r3, [sp, #260]	; 0x104
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e7c9      	b.n	8005d32 <__ssvfiscanf_r+0x1de>
 8005d9e:	2302      	movs	r3, #2
 8005da0:	e7c7      	b.n	8005d32 <__ssvfiscanf_r+0x1de>
 8005da2:	9841      	ldr	r0, [sp, #260]	; 0x104
 8005da4:	06c3      	lsls	r3, r0, #27
 8005da6:	f53f aefb 	bmi.w	8005ba0 <__ssvfiscanf_r+0x4c>
 8005daa:	9b00      	ldr	r3, [sp, #0]
 8005dac:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005dae:	1d19      	adds	r1, r3, #4
 8005db0:	9100      	str	r1, [sp, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f010 0f01 	tst.w	r0, #1
 8005db8:	bf14      	ite	ne
 8005dba:	801a      	strhne	r2, [r3, #0]
 8005dbc:	601a      	streq	r2, [r3, #0]
 8005dbe:	e6ef      	b.n	8005ba0 <__ssvfiscanf_r+0x4c>
 8005dc0:	4621      	mov	r1, r4
 8005dc2:	4630      	mov	r0, r6
 8005dc4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005dc6:	4798      	blx	r3
 8005dc8:	2800      	cmp	r0, #0
 8005dca:	d0b6      	beq.n	8005d3a <__ssvfiscanf_r+0x1e6>
 8005dcc:	e79c      	b.n	8005d08 <__ssvfiscanf_r+0x1b4>
 8005dce:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8005dd0:	3201      	adds	r2, #1
 8005dd2:	9245      	str	r2, [sp, #276]	; 0x114
 8005dd4:	6862      	ldr	r2, [r4, #4]
 8005dd6:	3a01      	subs	r2, #1
 8005dd8:	2a00      	cmp	r2, #0
 8005dda:	6062      	str	r2, [r4, #4]
 8005ddc:	dd02      	ble.n	8005de4 <__ssvfiscanf_r+0x290>
 8005dde:	3301      	adds	r3, #1
 8005de0:	6023      	str	r3, [r4, #0]
 8005de2:	e7ad      	b.n	8005d40 <__ssvfiscanf_r+0x1ec>
 8005de4:	4621      	mov	r1, r4
 8005de6:	4630      	mov	r0, r6
 8005de8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8005dea:	4798      	blx	r3
 8005dec:	2800      	cmp	r0, #0
 8005dee:	d0a7      	beq.n	8005d40 <__ssvfiscanf_r+0x1ec>
 8005df0:	e78a      	b.n	8005d08 <__ssvfiscanf_r+0x1b4>
 8005df2:	2b04      	cmp	r3, #4
 8005df4:	dc0e      	bgt.n	8005e14 <__ssvfiscanf_r+0x2c0>
 8005df6:	466b      	mov	r3, sp
 8005df8:	4622      	mov	r2, r4
 8005dfa:	4630      	mov	r0, r6
 8005dfc:	a941      	add	r1, sp, #260	; 0x104
 8005dfe:	f000 f87d 	bl	8005efc <_scanf_i>
 8005e02:	e7ab      	b.n	8005d5c <__ssvfiscanf_r+0x208>
 8005e04:	08005aa1 	.word	0x08005aa1
 8005e08:	08005b1b 	.word	0x08005b1b
 8005e0c:	08043a34 	.word	0x08043a34
 8005e10:	08043a14 	.word	0x08043a14
 8005e14:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <__ssvfiscanf_r+0x2f0>)
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	f43f aec2 	beq.w	8005ba0 <__ssvfiscanf_r+0x4c>
 8005e1c:	466b      	mov	r3, sp
 8005e1e:	4622      	mov	r2, r4
 8005e20:	4630      	mov	r0, r6
 8005e22:	a941      	add	r1, sp, #260	; 0x104
 8005e24:	f3af 8000 	nop.w
 8005e28:	e798      	b.n	8005d5c <__ssvfiscanf_r+0x208>
 8005e2a:	89a3      	ldrh	r3, [r4, #12]
 8005e2c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005e30:	bf18      	it	ne
 8005e32:	f04f 30ff 	movne.w	r0, #4294967295
 8005e36:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8005e3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e3e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8005e40:	e7f9      	b.n	8005e36 <__ssvfiscanf_r+0x2e2>
 8005e42:	bf00      	nop
 8005e44:	00000000 	.word	0x00000000

08005e48 <_scanf_chars>:
 8005e48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e4c:	4615      	mov	r5, r2
 8005e4e:	688a      	ldr	r2, [r1, #8]
 8005e50:	4680      	mov	r8, r0
 8005e52:	460c      	mov	r4, r1
 8005e54:	b932      	cbnz	r2, 8005e64 <_scanf_chars+0x1c>
 8005e56:	698a      	ldr	r2, [r1, #24]
 8005e58:	2a00      	cmp	r2, #0
 8005e5a:	bf0c      	ite	eq
 8005e5c:	2201      	moveq	r2, #1
 8005e5e:	f04f 32ff 	movne.w	r2, #4294967295
 8005e62:	608a      	str	r2, [r1, #8]
 8005e64:	2700      	movs	r7, #0
 8005e66:	6822      	ldr	r2, [r4, #0]
 8005e68:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8005ef8 <_scanf_chars+0xb0>
 8005e6c:	06d1      	lsls	r1, r2, #27
 8005e6e:	bf5f      	itttt	pl
 8005e70:	681a      	ldrpl	r2, [r3, #0]
 8005e72:	1d11      	addpl	r1, r2, #4
 8005e74:	6019      	strpl	r1, [r3, #0]
 8005e76:	6816      	ldrpl	r6, [r2, #0]
 8005e78:	69a0      	ldr	r0, [r4, #24]
 8005e7a:	b188      	cbz	r0, 8005ea0 <_scanf_chars+0x58>
 8005e7c:	2801      	cmp	r0, #1
 8005e7e:	d107      	bne.n	8005e90 <_scanf_chars+0x48>
 8005e80:	682b      	ldr	r3, [r5, #0]
 8005e82:	781a      	ldrb	r2, [r3, #0]
 8005e84:	6963      	ldr	r3, [r4, #20]
 8005e86:	5c9b      	ldrb	r3, [r3, r2]
 8005e88:	b953      	cbnz	r3, 8005ea0 <_scanf_chars+0x58>
 8005e8a:	2f00      	cmp	r7, #0
 8005e8c:	d031      	beq.n	8005ef2 <_scanf_chars+0xaa>
 8005e8e:	e022      	b.n	8005ed6 <_scanf_chars+0x8e>
 8005e90:	2802      	cmp	r0, #2
 8005e92:	d120      	bne.n	8005ed6 <_scanf_chars+0x8e>
 8005e94:	682b      	ldr	r3, [r5, #0]
 8005e96:	781b      	ldrb	r3, [r3, #0]
 8005e98:	f813 3009 	ldrb.w	r3, [r3, r9]
 8005e9c:	071b      	lsls	r3, r3, #28
 8005e9e:	d41a      	bmi.n	8005ed6 <_scanf_chars+0x8e>
 8005ea0:	6823      	ldr	r3, [r4, #0]
 8005ea2:	3701      	adds	r7, #1
 8005ea4:	06da      	lsls	r2, r3, #27
 8005ea6:	bf5e      	ittt	pl
 8005ea8:	682b      	ldrpl	r3, [r5, #0]
 8005eaa:	781b      	ldrbpl	r3, [r3, #0]
 8005eac:	f806 3b01 	strbpl.w	r3, [r6], #1
 8005eb0:	682a      	ldr	r2, [r5, #0]
 8005eb2:	686b      	ldr	r3, [r5, #4]
 8005eb4:	3201      	adds	r2, #1
 8005eb6:	602a      	str	r2, [r5, #0]
 8005eb8:	68a2      	ldr	r2, [r4, #8]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	3a01      	subs	r2, #1
 8005ebe:	606b      	str	r3, [r5, #4]
 8005ec0:	60a2      	str	r2, [r4, #8]
 8005ec2:	b142      	cbz	r2, 8005ed6 <_scanf_chars+0x8e>
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	dcd7      	bgt.n	8005e78 <_scanf_chars+0x30>
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4640      	mov	r0, r8
 8005ecc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005ed0:	4798      	blx	r3
 8005ed2:	2800      	cmp	r0, #0
 8005ed4:	d0d0      	beq.n	8005e78 <_scanf_chars+0x30>
 8005ed6:	6823      	ldr	r3, [r4, #0]
 8005ed8:	f013 0310 	ands.w	r3, r3, #16
 8005edc:	d105      	bne.n	8005eea <_scanf_chars+0xa2>
 8005ede:	68e2      	ldr	r2, [r4, #12]
 8005ee0:	3201      	adds	r2, #1
 8005ee2:	60e2      	str	r2, [r4, #12]
 8005ee4:	69a2      	ldr	r2, [r4, #24]
 8005ee6:	b102      	cbz	r2, 8005eea <_scanf_chars+0xa2>
 8005ee8:	7033      	strb	r3, [r6, #0]
 8005eea:	2000      	movs	r0, #0
 8005eec:	6923      	ldr	r3, [r4, #16]
 8005eee:	443b      	add	r3, r7
 8005ef0:	6123      	str	r3, [r4, #16]
 8005ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ef6:	bf00      	nop
 8005ef8:	08043a34 	.word	0x08043a34

08005efc <_scanf_i>:
 8005efc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f00:	460c      	mov	r4, r1
 8005f02:	4698      	mov	r8, r3
 8005f04:	4b75      	ldr	r3, [pc, #468]	; (80060dc <_scanf_i+0x1e0>)
 8005f06:	b087      	sub	sp, #28
 8005f08:	4682      	mov	sl, r0
 8005f0a:	4616      	mov	r6, r2
 8005f0c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005f10:	ab03      	add	r3, sp, #12
 8005f12:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005f16:	4b72      	ldr	r3, [pc, #456]	; (80060e0 <_scanf_i+0x1e4>)
 8005f18:	69a1      	ldr	r1, [r4, #24]
 8005f1a:	4a72      	ldr	r2, [pc, #456]	; (80060e4 <_scanf_i+0x1e8>)
 8005f1c:	4627      	mov	r7, r4
 8005f1e:	2903      	cmp	r1, #3
 8005f20:	bf18      	it	ne
 8005f22:	461a      	movne	r2, r3
 8005f24:	68a3      	ldr	r3, [r4, #8]
 8005f26:	9201      	str	r2, [sp, #4]
 8005f28:	1e5a      	subs	r2, r3, #1
 8005f2a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005f2e:	bf81      	itttt	hi
 8005f30:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005f34:	eb03 0905 	addhi.w	r9, r3, r5
 8005f38:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005f3c:	60a3      	strhi	r3, [r4, #8]
 8005f3e:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005f42:	bf98      	it	ls
 8005f44:	f04f 0900 	movls.w	r9, #0
 8005f48:	463d      	mov	r5, r7
 8005f4a:	f04f 0b00 	mov.w	fp, #0
 8005f4e:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8005f52:	6023      	str	r3, [r4, #0]
 8005f54:	6831      	ldr	r1, [r6, #0]
 8005f56:	ab03      	add	r3, sp, #12
 8005f58:	2202      	movs	r2, #2
 8005f5a:	7809      	ldrb	r1, [r1, #0]
 8005f5c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005f60:	f000 fa28 	bl	80063b4 <memchr>
 8005f64:	b328      	cbz	r0, 8005fb2 <_scanf_i+0xb6>
 8005f66:	f1bb 0f01 	cmp.w	fp, #1
 8005f6a:	d159      	bne.n	8006020 <_scanf_i+0x124>
 8005f6c:	6862      	ldr	r2, [r4, #4]
 8005f6e:	b92a      	cbnz	r2, 8005f7c <_scanf_i+0x80>
 8005f70:	2308      	movs	r3, #8
 8005f72:	6822      	ldr	r2, [r4, #0]
 8005f74:	6063      	str	r3, [r4, #4]
 8005f76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f7a:	6022      	str	r2, [r4, #0]
 8005f7c:	6822      	ldr	r2, [r4, #0]
 8005f7e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8005f82:	6022      	str	r2, [r4, #0]
 8005f84:	68a2      	ldr	r2, [r4, #8]
 8005f86:	1e51      	subs	r1, r2, #1
 8005f88:	60a1      	str	r1, [r4, #8]
 8005f8a:	b192      	cbz	r2, 8005fb2 <_scanf_i+0xb6>
 8005f8c:	6832      	ldr	r2, [r6, #0]
 8005f8e:	1c51      	adds	r1, r2, #1
 8005f90:	6031      	str	r1, [r6, #0]
 8005f92:	7812      	ldrb	r2, [r2, #0]
 8005f94:	f805 2b01 	strb.w	r2, [r5], #1
 8005f98:	6872      	ldr	r2, [r6, #4]
 8005f9a:	3a01      	subs	r2, #1
 8005f9c:	2a00      	cmp	r2, #0
 8005f9e:	6072      	str	r2, [r6, #4]
 8005fa0:	dc07      	bgt.n	8005fb2 <_scanf_i+0xb6>
 8005fa2:	4631      	mov	r1, r6
 8005fa4:	4650      	mov	r0, sl
 8005fa6:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8005faa:	4790      	blx	r2
 8005fac:	2800      	cmp	r0, #0
 8005fae:	f040 8085 	bne.w	80060bc <_scanf_i+0x1c0>
 8005fb2:	f10b 0b01 	add.w	fp, fp, #1
 8005fb6:	f1bb 0f03 	cmp.w	fp, #3
 8005fba:	d1cb      	bne.n	8005f54 <_scanf_i+0x58>
 8005fbc:	6863      	ldr	r3, [r4, #4]
 8005fbe:	b90b      	cbnz	r3, 8005fc4 <_scanf_i+0xc8>
 8005fc0:	230a      	movs	r3, #10
 8005fc2:	6063      	str	r3, [r4, #4]
 8005fc4:	6863      	ldr	r3, [r4, #4]
 8005fc6:	4948      	ldr	r1, [pc, #288]	; (80060e8 <_scanf_i+0x1ec>)
 8005fc8:	6960      	ldr	r0, [r4, #20]
 8005fca:	1ac9      	subs	r1, r1, r3
 8005fcc:	f000 f88e 	bl	80060ec <__sccl>
 8005fd0:	f04f 0b00 	mov.w	fp, #0
 8005fd4:	68a3      	ldr	r3, [r4, #8]
 8005fd6:	6822      	ldr	r2, [r4, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d03d      	beq.n	8006058 <_scanf_i+0x15c>
 8005fdc:	6831      	ldr	r1, [r6, #0]
 8005fde:	6960      	ldr	r0, [r4, #20]
 8005fe0:	f891 c000 	ldrb.w	ip, [r1]
 8005fe4:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005fe8:	2800      	cmp	r0, #0
 8005fea:	d035      	beq.n	8006058 <_scanf_i+0x15c>
 8005fec:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8005ff0:	d124      	bne.n	800603c <_scanf_i+0x140>
 8005ff2:	0510      	lsls	r0, r2, #20
 8005ff4:	d522      	bpl.n	800603c <_scanf_i+0x140>
 8005ff6:	f10b 0b01 	add.w	fp, fp, #1
 8005ffa:	f1b9 0f00 	cmp.w	r9, #0
 8005ffe:	d003      	beq.n	8006008 <_scanf_i+0x10c>
 8006000:	3301      	adds	r3, #1
 8006002:	f109 39ff 	add.w	r9, r9, #4294967295
 8006006:	60a3      	str	r3, [r4, #8]
 8006008:	6873      	ldr	r3, [r6, #4]
 800600a:	3b01      	subs	r3, #1
 800600c:	2b00      	cmp	r3, #0
 800600e:	6073      	str	r3, [r6, #4]
 8006010:	dd1b      	ble.n	800604a <_scanf_i+0x14e>
 8006012:	6833      	ldr	r3, [r6, #0]
 8006014:	3301      	adds	r3, #1
 8006016:	6033      	str	r3, [r6, #0]
 8006018:	68a3      	ldr	r3, [r4, #8]
 800601a:	3b01      	subs	r3, #1
 800601c:	60a3      	str	r3, [r4, #8]
 800601e:	e7d9      	b.n	8005fd4 <_scanf_i+0xd8>
 8006020:	f1bb 0f02 	cmp.w	fp, #2
 8006024:	d1ae      	bne.n	8005f84 <_scanf_i+0x88>
 8006026:	6822      	ldr	r2, [r4, #0]
 8006028:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800602c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006030:	d1bf      	bne.n	8005fb2 <_scanf_i+0xb6>
 8006032:	2310      	movs	r3, #16
 8006034:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006038:	6063      	str	r3, [r4, #4]
 800603a:	e7a2      	b.n	8005f82 <_scanf_i+0x86>
 800603c:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8006040:	6022      	str	r2, [r4, #0]
 8006042:	780b      	ldrb	r3, [r1, #0]
 8006044:	f805 3b01 	strb.w	r3, [r5], #1
 8006048:	e7de      	b.n	8006008 <_scanf_i+0x10c>
 800604a:	4631      	mov	r1, r6
 800604c:	4650      	mov	r0, sl
 800604e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006052:	4798      	blx	r3
 8006054:	2800      	cmp	r0, #0
 8006056:	d0df      	beq.n	8006018 <_scanf_i+0x11c>
 8006058:	6823      	ldr	r3, [r4, #0]
 800605a:	05db      	lsls	r3, r3, #23
 800605c:	d50d      	bpl.n	800607a <_scanf_i+0x17e>
 800605e:	42bd      	cmp	r5, r7
 8006060:	d909      	bls.n	8006076 <_scanf_i+0x17a>
 8006062:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006066:	4632      	mov	r2, r6
 8006068:	4650      	mov	r0, sl
 800606a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800606e:	f105 39ff 	add.w	r9, r5, #4294967295
 8006072:	4798      	blx	r3
 8006074:	464d      	mov	r5, r9
 8006076:	42bd      	cmp	r5, r7
 8006078:	d02d      	beq.n	80060d6 <_scanf_i+0x1da>
 800607a:	6822      	ldr	r2, [r4, #0]
 800607c:	f012 0210 	ands.w	r2, r2, #16
 8006080:	d113      	bne.n	80060aa <_scanf_i+0x1ae>
 8006082:	702a      	strb	r2, [r5, #0]
 8006084:	4639      	mov	r1, r7
 8006086:	6863      	ldr	r3, [r4, #4]
 8006088:	4650      	mov	r0, sl
 800608a:	9e01      	ldr	r6, [sp, #4]
 800608c:	47b0      	blx	r6
 800608e:	6821      	ldr	r1, [r4, #0]
 8006090:	f8d8 3000 	ldr.w	r3, [r8]
 8006094:	f011 0f20 	tst.w	r1, #32
 8006098:	d013      	beq.n	80060c2 <_scanf_i+0x1c6>
 800609a:	1d1a      	adds	r2, r3, #4
 800609c:	f8c8 2000 	str.w	r2, [r8]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	6018      	str	r0, [r3, #0]
 80060a4:	68e3      	ldr	r3, [r4, #12]
 80060a6:	3301      	adds	r3, #1
 80060a8:	60e3      	str	r3, [r4, #12]
 80060aa:	2000      	movs	r0, #0
 80060ac:	1bed      	subs	r5, r5, r7
 80060ae:	44ab      	add	fp, r5
 80060b0:	6925      	ldr	r5, [r4, #16]
 80060b2:	445d      	add	r5, fp
 80060b4:	6125      	str	r5, [r4, #16]
 80060b6:	b007      	add	sp, #28
 80060b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060bc:	f04f 0b00 	mov.w	fp, #0
 80060c0:	e7ca      	b.n	8006058 <_scanf_i+0x15c>
 80060c2:	1d1a      	adds	r2, r3, #4
 80060c4:	f8c8 2000 	str.w	r2, [r8]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f011 0f01 	tst.w	r1, #1
 80060ce:	bf14      	ite	ne
 80060d0:	8018      	strhne	r0, [r3, #0]
 80060d2:	6018      	streq	r0, [r3, #0]
 80060d4:	e7e6      	b.n	80060a4 <_scanf_i+0x1a8>
 80060d6:	2001      	movs	r0, #1
 80060d8:	e7ed      	b.n	80060b6 <_scanf_i+0x1ba>
 80060da:	bf00      	nop
 80060dc:	08006678 	.word	0x08006678
 80060e0:	0800633d 	.word	0x0800633d
 80060e4:	08006255 	.word	0x08006255
 80060e8:	08043a31 	.word	0x08043a31

080060ec <__sccl>:
 80060ec:	b570      	push	{r4, r5, r6, lr}
 80060ee:	780b      	ldrb	r3, [r1, #0]
 80060f0:	4604      	mov	r4, r0
 80060f2:	2b5e      	cmp	r3, #94	; 0x5e
 80060f4:	bf13      	iteet	ne
 80060f6:	2200      	movne	r2, #0
 80060f8:	2201      	moveq	r2, #1
 80060fa:	784b      	ldrbeq	r3, [r1, #1]
 80060fc:	1c48      	addne	r0, r1, #1
 80060fe:	bf08      	it	eq
 8006100:	1c88      	addeq	r0, r1, #2
 8006102:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8006106:	1e61      	subs	r1, r4, #1
 8006108:	f801 2f01 	strb.w	r2, [r1, #1]!
 800610c:	42a9      	cmp	r1, r5
 800610e:	d1fb      	bne.n	8006108 <__sccl+0x1c>
 8006110:	b90b      	cbnz	r3, 8006116 <__sccl+0x2a>
 8006112:	3801      	subs	r0, #1
 8006114:	bd70      	pop	{r4, r5, r6, pc}
 8006116:	f082 0201 	eor.w	r2, r2, #1
 800611a:	4605      	mov	r5, r0
 800611c:	54e2      	strb	r2, [r4, r3]
 800611e:	4628      	mov	r0, r5
 8006120:	f810 1b01 	ldrb.w	r1, [r0], #1
 8006124:	292d      	cmp	r1, #45	; 0x2d
 8006126:	d006      	beq.n	8006136 <__sccl+0x4a>
 8006128:	295d      	cmp	r1, #93	; 0x5d
 800612a:	d0f3      	beq.n	8006114 <__sccl+0x28>
 800612c:	b909      	cbnz	r1, 8006132 <__sccl+0x46>
 800612e:	4628      	mov	r0, r5
 8006130:	e7f0      	b.n	8006114 <__sccl+0x28>
 8006132:	460b      	mov	r3, r1
 8006134:	e7f1      	b.n	800611a <__sccl+0x2e>
 8006136:	786e      	ldrb	r6, [r5, #1]
 8006138:	2e5d      	cmp	r6, #93	; 0x5d
 800613a:	d0fa      	beq.n	8006132 <__sccl+0x46>
 800613c:	42b3      	cmp	r3, r6
 800613e:	dcf8      	bgt.n	8006132 <__sccl+0x46>
 8006140:	4619      	mov	r1, r3
 8006142:	3502      	adds	r5, #2
 8006144:	3101      	adds	r1, #1
 8006146:	428e      	cmp	r6, r1
 8006148:	5462      	strb	r2, [r4, r1]
 800614a:	dcfb      	bgt.n	8006144 <__sccl+0x58>
 800614c:	1af1      	subs	r1, r6, r3
 800614e:	3901      	subs	r1, #1
 8006150:	42b3      	cmp	r3, r6
 8006152:	bfa8      	it	ge
 8006154:	2100      	movge	r1, #0
 8006156:	1c58      	adds	r0, r3, #1
 8006158:	1843      	adds	r3, r0, r1
 800615a:	e7e0      	b.n	800611e <__sccl+0x32>

0800615c <_strtol_l.constprop.0>:
 800615c:	2b01      	cmp	r3, #1
 800615e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006162:	4680      	mov	r8, r0
 8006164:	d001      	beq.n	800616a <_strtol_l.constprop.0+0xe>
 8006166:	2b24      	cmp	r3, #36	; 0x24
 8006168:	d906      	bls.n	8006178 <_strtol_l.constprop.0+0x1c>
 800616a:	f7ff fc3b 	bl	80059e4 <__errno>
 800616e:	2316      	movs	r3, #22
 8006170:	6003      	str	r3, [r0, #0]
 8006172:	2000      	movs	r0, #0
 8006174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006178:	460d      	mov	r5, r1
 800617a:	4f35      	ldr	r7, [pc, #212]	; (8006250 <_strtol_l.constprop.0+0xf4>)
 800617c:	4628      	mov	r0, r5
 800617e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006182:	5de6      	ldrb	r6, [r4, r7]
 8006184:	f016 0608 	ands.w	r6, r6, #8
 8006188:	d1f8      	bne.n	800617c <_strtol_l.constprop.0+0x20>
 800618a:	2c2d      	cmp	r4, #45	; 0x2d
 800618c:	d12f      	bne.n	80061ee <_strtol_l.constprop.0+0x92>
 800618e:	2601      	movs	r6, #1
 8006190:	782c      	ldrb	r4, [r5, #0]
 8006192:	1c85      	adds	r5, r0, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d057      	beq.n	8006248 <_strtol_l.constprop.0+0xec>
 8006198:	2b10      	cmp	r3, #16
 800619a:	d109      	bne.n	80061b0 <_strtol_l.constprop.0+0x54>
 800619c:	2c30      	cmp	r4, #48	; 0x30
 800619e:	d107      	bne.n	80061b0 <_strtol_l.constprop.0+0x54>
 80061a0:	7828      	ldrb	r0, [r5, #0]
 80061a2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80061a6:	2858      	cmp	r0, #88	; 0x58
 80061a8:	d149      	bne.n	800623e <_strtol_l.constprop.0+0xe2>
 80061aa:	2310      	movs	r3, #16
 80061ac:	786c      	ldrb	r4, [r5, #1]
 80061ae:	3502      	adds	r5, #2
 80061b0:	2700      	movs	r7, #0
 80061b2:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 80061b6:	f10e 3eff 	add.w	lr, lr, #4294967295
 80061ba:	fbbe f9f3 	udiv	r9, lr, r3
 80061be:	4638      	mov	r0, r7
 80061c0:	fb03 ea19 	mls	sl, r3, r9, lr
 80061c4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80061c8:	f1bc 0f09 	cmp.w	ip, #9
 80061cc:	d814      	bhi.n	80061f8 <_strtol_l.constprop.0+0x9c>
 80061ce:	4664      	mov	r4, ip
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	dd22      	ble.n	800621a <_strtol_l.constprop.0+0xbe>
 80061d4:	2f00      	cmp	r7, #0
 80061d6:	db1d      	blt.n	8006214 <_strtol_l.constprop.0+0xb8>
 80061d8:	4581      	cmp	r9, r0
 80061da:	d31b      	bcc.n	8006214 <_strtol_l.constprop.0+0xb8>
 80061dc:	d101      	bne.n	80061e2 <_strtol_l.constprop.0+0x86>
 80061de:	45a2      	cmp	sl, r4
 80061e0:	db18      	blt.n	8006214 <_strtol_l.constprop.0+0xb8>
 80061e2:	2701      	movs	r7, #1
 80061e4:	fb00 4003 	mla	r0, r0, r3, r4
 80061e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80061ec:	e7ea      	b.n	80061c4 <_strtol_l.constprop.0+0x68>
 80061ee:	2c2b      	cmp	r4, #43	; 0x2b
 80061f0:	bf04      	itt	eq
 80061f2:	782c      	ldrbeq	r4, [r5, #0]
 80061f4:	1c85      	addeq	r5, r0, #2
 80061f6:	e7cd      	b.n	8006194 <_strtol_l.constprop.0+0x38>
 80061f8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80061fc:	f1bc 0f19 	cmp.w	ip, #25
 8006200:	d801      	bhi.n	8006206 <_strtol_l.constprop.0+0xaa>
 8006202:	3c37      	subs	r4, #55	; 0x37
 8006204:	e7e4      	b.n	80061d0 <_strtol_l.constprop.0+0x74>
 8006206:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800620a:	f1bc 0f19 	cmp.w	ip, #25
 800620e:	d804      	bhi.n	800621a <_strtol_l.constprop.0+0xbe>
 8006210:	3c57      	subs	r4, #87	; 0x57
 8006212:	e7dd      	b.n	80061d0 <_strtol_l.constprop.0+0x74>
 8006214:	f04f 37ff 	mov.w	r7, #4294967295
 8006218:	e7e6      	b.n	80061e8 <_strtol_l.constprop.0+0x8c>
 800621a:	2f00      	cmp	r7, #0
 800621c:	da07      	bge.n	800622e <_strtol_l.constprop.0+0xd2>
 800621e:	2322      	movs	r3, #34	; 0x22
 8006220:	4670      	mov	r0, lr
 8006222:	f8c8 3000 	str.w	r3, [r8]
 8006226:	2a00      	cmp	r2, #0
 8006228:	d0a4      	beq.n	8006174 <_strtol_l.constprop.0+0x18>
 800622a:	1e69      	subs	r1, r5, #1
 800622c:	e005      	b.n	800623a <_strtol_l.constprop.0+0xde>
 800622e:	b106      	cbz	r6, 8006232 <_strtol_l.constprop.0+0xd6>
 8006230:	4240      	negs	r0, r0
 8006232:	2a00      	cmp	r2, #0
 8006234:	d09e      	beq.n	8006174 <_strtol_l.constprop.0+0x18>
 8006236:	2f00      	cmp	r7, #0
 8006238:	d1f7      	bne.n	800622a <_strtol_l.constprop.0+0xce>
 800623a:	6011      	str	r1, [r2, #0]
 800623c:	e79a      	b.n	8006174 <_strtol_l.constprop.0+0x18>
 800623e:	2430      	movs	r4, #48	; 0x30
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1b5      	bne.n	80061b0 <_strtol_l.constprop.0+0x54>
 8006244:	2308      	movs	r3, #8
 8006246:	e7b3      	b.n	80061b0 <_strtol_l.constprop.0+0x54>
 8006248:	2c30      	cmp	r4, #48	; 0x30
 800624a:	d0a9      	beq.n	80061a0 <_strtol_l.constprop.0+0x44>
 800624c:	230a      	movs	r3, #10
 800624e:	e7af      	b.n	80061b0 <_strtol_l.constprop.0+0x54>
 8006250:	08043a34 	.word	0x08043a34

08006254 <_strtol_r>:
 8006254:	f7ff bf82 	b.w	800615c <_strtol_l.constprop.0>

08006258 <_strtoul_l.constprop.0>:
 8006258:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800625c:	4686      	mov	lr, r0
 800625e:	460d      	mov	r5, r1
 8006260:	4f35      	ldr	r7, [pc, #212]	; (8006338 <_strtoul_l.constprop.0+0xe0>)
 8006262:	4628      	mov	r0, r5
 8006264:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006268:	5de6      	ldrb	r6, [r4, r7]
 800626a:	f016 0608 	ands.w	r6, r6, #8
 800626e:	d1f8      	bne.n	8006262 <_strtoul_l.constprop.0+0xa>
 8006270:	2c2d      	cmp	r4, #45	; 0x2d
 8006272:	d12f      	bne.n	80062d4 <_strtoul_l.constprop.0+0x7c>
 8006274:	2601      	movs	r6, #1
 8006276:	782c      	ldrb	r4, [r5, #0]
 8006278:	1c85      	adds	r5, r0, #2
 800627a:	2b00      	cmp	r3, #0
 800627c:	d057      	beq.n	800632e <_strtoul_l.constprop.0+0xd6>
 800627e:	2b10      	cmp	r3, #16
 8006280:	d109      	bne.n	8006296 <_strtoul_l.constprop.0+0x3e>
 8006282:	2c30      	cmp	r4, #48	; 0x30
 8006284:	d107      	bne.n	8006296 <_strtoul_l.constprop.0+0x3e>
 8006286:	7828      	ldrb	r0, [r5, #0]
 8006288:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800628c:	2858      	cmp	r0, #88	; 0x58
 800628e:	d149      	bne.n	8006324 <_strtoul_l.constprop.0+0xcc>
 8006290:	2310      	movs	r3, #16
 8006292:	786c      	ldrb	r4, [r5, #1]
 8006294:	3502      	adds	r5, #2
 8006296:	f04f 38ff 	mov.w	r8, #4294967295
 800629a:	fbb8 f8f3 	udiv	r8, r8, r3
 800629e:	2700      	movs	r7, #0
 80062a0:	fb03 f908 	mul.w	r9, r3, r8
 80062a4:	4638      	mov	r0, r7
 80062a6:	ea6f 0909 	mvn.w	r9, r9
 80062aa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80062ae:	f1bc 0f09 	cmp.w	ip, #9
 80062b2:	d814      	bhi.n	80062de <_strtoul_l.constprop.0+0x86>
 80062b4:	4664      	mov	r4, ip
 80062b6:	42a3      	cmp	r3, r4
 80062b8:	dd22      	ble.n	8006300 <_strtoul_l.constprop.0+0xa8>
 80062ba:	2f00      	cmp	r7, #0
 80062bc:	db1d      	blt.n	80062fa <_strtoul_l.constprop.0+0xa2>
 80062be:	4580      	cmp	r8, r0
 80062c0:	d31b      	bcc.n	80062fa <_strtoul_l.constprop.0+0xa2>
 80062c2:	d101      	bne.n	80062c8 <_strtoul_l.constprop.0+0x70>
 80062c4:	45a1      	cmp	r9, r4
 80062c6:	db18      	blt.n	80062fa <_strtoul_l.constprop.0+0xa2>
 80062c8:	2701      	movs	r7, #1
 80062ca:	fb00 4003 	mla	r0, r0, r3, r4
 80062ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 80062d2:	e7ea      	b.n	80062aa <_strtoul_l.constprop.0+0x52>
 80062d4:	2c2b      	cmp	r4, #43	; 0x2b
 80062d6:	bf04      	itt	eq
 80062d8:	782c      	ldrbeq	r4, [r5, #0]
 80062da:	1c85      	addeq	r5, r0, #2
 80062dc:	e7cd      	b.n	800627a <_strtoul_l.constprop.0+0x22>
 80062de:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80062e2:	f1bc 0f19 	cmp.w	ip, #25
 80062e6:	d801      	bhi.n	80062ec <_strtoul_l.constprop.0+0x94>
 80062e8:	3c37      	subs	r4, #55	; 0x37
 80062ea:	e7e4      	b.n	80062b6 <_strtoul_l.constprop.0+0x5e>
 80062ec:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80062f0:	f1bc 0f19 	cmp.w	ip, #25
 80062f4:	d804      	bhi.n	8006300 <_strtoul_l.constprop.0+0xa8>
 80062f6:	3c57      	subs	r4, #87	; 0x57
 80062f8:	e7dd      	b.n	80062b6 <_strtoul_l.constprop.0+0x5e>
 80062fa:	f04f 37ff 	mov.w	r7, #4294967295
 80062fe:	e7e6      	b.n	80062ce <_strtoul_l.constprop.0+0x76>
 8006300:	2f00      	cmp	r7, #0
 8006302:	da07      	bge.n	8006314 <_strtoul_l.constprop.0+0xbc>
 8006304:	2322      	movs	r3, #34	; 0x22
 8006306:	f04f 30ff 	mov.w	r0, #4294967295
 800630a:	f8ce 3000 	str.w	r3, [lr]
 800630e:	b932      	cbnz	r2, 800631e <_strtoul_l.constprop.0+0xc6>
 8006310:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006314:	b106      	cbz	r6, 8006318 <_strtoul_l.constprop.0+0xc0>
 8006316:	4240      	negs	r0, r0
 8006318:	2a00      	cmp	r2, #0
 800631a:	d0f9      	beq.n	8006310 <_strtoul_l.constprop.0+0xb8>
 800631c:	b107      	cbz	r7, 8006320 <_strtoul_l.constprop.0+0xc8>
 800631e:	1e69      	subs	r1, r5, #1
 8006320:	6011      	str	r1, [r2, #0]
 8006322:	e7f5      	b.n	8006310 <_strtoul_l.constprop.0+0xb8>
 8006324:	2430      	movs	r4, #48	; 0x30
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1b5      	bne.n	8006296 <_strtoul_l.constprop.0+0x3e>
 800632a:	2308      	movs	r3, #8
 800632c:	e7b3      	b.n	8006296 <_strtoul_l.constprop.0+0x3e>
 800632e:	2c30      	cmp	r4, #48	; 0x30
 8006330:	d0a9      	beq.n	8006286 <_strtoul_l.constprop.0+0x2e>
 8006332:	230a      	movs	r3, #10
 8006334:	e7af      	b.n	8006296 <_strtoul_l.constprop.0+0x3e>
 8006336:	bf00      	nop
 8006338:	08043a34 	.word	0x08043a34

0800633c <_strtoul_r>:
 800633c:	f7ff bf8c 	b.w	8006258 <_strtoul_l.constprop.0>

08006340 <__submore>:
 8006340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006344:	460c      	mov	r4, r1
 8006346:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800634c:	4299      	cmp	r1, r3
 800634e:	d11b      	bne.n	8006388 <__submore+0x48>
 8006350:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006354:	f000 f8b2 	bl	80064bc <_malloc_r>
 8006358:	b918      	cbnz	r0, 8006362 <__submore+0x22>
 800635a:	f04f 30ff 	mov.w	r0, #4294967295
 800635e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006362:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006366:	63a3      	str	r3, [r4, #56]	; 0x38
 8006368:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800636c:	6360      	str	r0, [r4, #52]	; 0x34
 800636e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8006372:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8006376:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800637a:	7043      	strb	r3, [r0, #1]
 800637c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8006380:	7003      	strb	r3, [r0, #0]
 8006382:	6020      	str	r0, [r4, #0]
 8006384:	2000      	movs	r0, #0
 8006386:	e7ea      	b.n	800635e <__submore+0x1e>
 8006388:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800638a:	0077      	lsls	r7, r6, #1
 800638c:	463a      	mov	r2, r7
 800638e:	f000 f909 	bl	80065a4 <_realloc_r>
 8006392:	4605      	mov	r5, r0
 8006394:	2800      	cmp	r0, #0
 8006396:	d0e0      	beq.n	800635a <__submore+0x1a>
 8006398:	eb00 0806 	add.w	r8, r0, r6
 800639c:	4601      	mov	r1, r0
 800639e:	4632      	mov	r2, r6
 80063a0:	4640      	mov	r0, r8
 80063a2:	f000 f815 	bl	80063d0 <memcpy>
 80063a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80063aa:	f8c4 8000 	str.w	r8, [r4]
 80063ae:	e7e9      	b.n	8006384 <__submore+0x44>

080063b0 <__retarget_lock_acquire_recursive>:
 80063b0:	4770      	bx	lr

080063b2 <__retarget_lock_release_recursive>:
 80063b2:	4770      	bx	lr

080063b4 <memchr>:
 80063b4:	4603      	mov	r3, r0
 80063b6:	b510      	push	{r4, lr}
 80063b8:	b2c9      	uxtb	r1, r1
 80063ba:	4402      	add	r2, r0
 80063bc:	4293      	cmp	r3, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	d101      	bne.n	80063c6 <memchr+0x12>
 80063c2:	2000      	movs	r0, #0
 80063c4:	e003      	b.n	80063ce <memchr+0x1a>
 80063c6:	7804      	ldrb	r4, [r0, #0]
 80063c8:	3301      	adds	r3, #1
 80063ca:	428c      	cmp	r4, r1
 80063cc:	d1f6      	bne.n	80063bc <memchr+0x8>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <memcpy>:
 80063d0:	440a      	add	r2, r1
 80063d2:	4291      	cmp	r1, r2
 80063d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063d8:	d100      	bne.n	80063dc <memcpy+0xc>
 80063da:	4770      	bx	lr
 80063dc:	b510      	push	{r4, lr}
 80063de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e2:	4291      	cmp	r1, r2
 80063e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063e8:	d1f9      	bne.n	80063de <memcpy+0xe>
 80063ea:	bd10      	pop	{r4, pc}

080063ec <_free_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4605      	mov	r5, r0
 80063f0:	2900      	cmp	r1, #0
 80063f2:	d040      	beq.n	8006476 <_free_r+0x8a>
 80063f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063f8:	1f0c      	subs	r4, r1, #4
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	bfb8      	it	lt
 80063fe:	18e4      	addlt	r4, r4, r3
 8006400:	f000 f910 	bl	8006624 <__malloc_lock>
 8006404:	4a1c      	ldr	r2, [pc, #112]	; (8006478 <_free_r+0x8c>)
 8006406:	6813      	ldr	r3, [r2, #0]
 8006408:	b933      	cbnz	r3, 8006418 <_free_r+0x2c>
 800640a:	6063      	str	r3, [r4, #4]
 800640c:	6014      	str	r4, [r2, #0]
 800640e:	4628      	mov	r0, r5
 8006410:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006414:	f000 b90c 	b.w	8006630 <__malloc_unlock>
 8006418:	42a3      	cmp	r3, r4
 800641a:	d908      	bls.n	800642e <_free_r+0x42>
 800641c:	6820      	ldr	r0, [r4, #0]
 800641e:	1821      	adds	r1, r4, r0
 8006420:	428b      	cmp	r3, r1
 8006422:	bf01      	itttt	eq
 8006424:	6819      	ldreq	r1, [r3, #0]
 8006426:	685b      	ldreq	r3, [r3, #4]
 8006428:	1809      	addeq	r1, r1, r0
 800642a:	6021      	streq	r1, [r4, #0]
 800642c:	e7ed      	b.n	800640a <_free_r+0x1e>
 800642e:	461a      	mov	r2, r3
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	b10b      	cbz	r3, 8006438 <_free_r+0x4c>
 8006434:	42a3      	cmp	r3, r4
 8006436:	d9fa      	bls.n	800642e <_free_r+0x42>
 8006438:	6811      	ldr	r1, [r2, #0]
 800643a:	1850      	adds	r0, r2, r1
 800643c:	42a0      	cmp	r0, r4
 800643e:	d10b      	bne.n	8006458 <_free_r+0x6c>
 8006440:	6820      	ldr	r0, [r4, #0]
 8006442:	4401      	add	r1, r0
 8006444:	1850      	adds	r0, r2, r1
 8006446:	4283      	cmp	r3, r0
 8006448:	6011      	str	r1, [r2, #0]
 800644a:	d1e0      	bne.n	800640e <_free_r+0x22>
 800644c:	6818      	ldr	r0, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	4401      	add	r1, r0
 8006452:	6011      	str	r1, [r2, #0]
 8006454:	6053      	str	r3, [r2, #4]
 8006456:	e7da      	b.n	800640e <_free_r+0x22>
 8006458:	d902      	bls.n	8006460 <_free_r+0x74>
 800645a:	230c      	movs	r3, #12
 800645c:	602b      	str	r3, [r5, #0]
 800645e:	e7d6      	b.n	800640e <_free_r+0x22>
 8006460:	6820      	ldr	r0, [r4, #0]
 8006462:	1821      	adds	r1, r4, r0
 8006464:	428b      	cmp	r3, r1
 8006466:	bf01      	itttt	eq
 8006468:	6819      	ldreq	r1, [r3, #0]
 800646a:	685b      	ldreq	r3, [r3, #4]
 800646c:	1809      	addeq	r1, r1, r0
 800646e:	6021      	streq	r1, [r4, #0]
 8006470:	6063      	str	r3, [r4, #4]
 8006472:	6054      	str	r4, [r2, #4]
 8006474:	e7cb      	b.n	800640e <_free_r+0x22>
 8006476:	bd38      	pop	{r3, r4, r5, pc}
 8006478:	20000344 	.word	0x20000344

0800647c <sbrk_aligned>:
 800647c:	b570      	push	{r4, r5, r6, lr}
 800647e:	4e0e      	ldr	r6, [pc, #56]	; (80064b8 <sbrk_aligned+0x3c>)
 8006480:	460c      	mov	r4, r1
 8006482:	6831      	ldr	r1, [r6, #0]
 8006484:	4605      	mov	r5, r0
 8006486:	b911      	cbnz	r1, 800648e <sbrk_aligned+0x12>
 8006488:	f000 f8bc 	bl	8006604 <_sbrk_r>
 800648c:	6030      	str	r0, [r6, #0]
 800648e:	4621      	mov	r1, r4
 8006490:	4628      	mov	r0, r5
 8006492:	f000 f8b7 	bl	8006604 <_sbrk_r>
 8006496:	1c43      	adds	r3, r0, #1
 8006498:	d00a      	beq.n	80064b0 <sbrk_aligned+0x34>
 800649a:	1cc4      	adds	r4, r0, #3
 800649c:	f024 0403 	bic.w	r4, r4, #3
 80064a0:	42a0      	cmp	r0, r4
 80064a2:	d007      	beq.n	80064b4 <sbrk_aligned+0x38>
 80064a4:	1a21      	subs	r1, r4, r0
 80064a6:	4628      	mov	r0, r5
 80064a8:	f000 f8ac 	bl	8006604 <_sbrk_r>
 80064ac:	3001      	adds	r0, #1
 80064ae:	d101      	bne.n	80064b4 <sbrk_aligned+0x38>
 80064b0:	f04f 34ff 	mov.w	r4, #4294967295
 80064b4:	4620      	mov	r0, r4
 80064b6:	bd70      	pop	{r4, r5, r6, pc}
 80064b8:	20000348 	.word	0x20000348

080064bc <_malloc_r>:
 80064bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064c0:	1ccd      	adds	r5, r1, #3
 80064c2:	f025 0503 	bic.w	r5, r5, #3
 80064c6:	3508      	adds	r5, #8
 80064c8:	2d0c      	cmp	r5, #12
 80064ca:	bf38      	it	cc
 80064cc:	250c      	movcc	r5, #12
 80064ce:	2d00      	cmp	r5, #0
 80064d0:	4607      	mov	r7, r0
 80064d2:	db01      	blt.n	80064d8 <_malloc_r+0x1c>
 80064d4:	42a9      	cmp	r1, r5
 80064d6:	d905      	bls.n	80064e4 <_malloc_r+0x28>
 80064d8:	230c      	movs	r3, #12
 80064da:	2600      	movs	r6, #0
 80064dc:	603b      	str	r3, [r7, #0]
 80064de:	4630      	mov	r0, r6
 80064e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80064e4:	4e2e      	ldr	r6, [pc, #184]	; (80065a0 <_malloc_r+0xe4>)
 80064e6:	f000 f89d 	bl	8006624 <__malloc_lock>
 80064ea:	6833      	ldr	r3, [r6, #0]
 80064ec:	461c      	mov	r4, r3
 80064ee:	bb34      	cbnz	r4, 800653e <_malloc_r+0x82>
 80064f0:	4629      	mov	r1, r5
 80064f2:	4638      	mov	r0, r7
 80064f4:	f7ff ffc2 	bl	800647c <sbrk_aligned>
 80064f8:	1c43      	adds	r3, r0, #1
 80064fa:	4604      	mov	r4, r0
 80064fc:	d14d      	bne.n	800659a <_malloc_r+0xde>
 80064fe:	6834      	ldr	r4, [r6, #0]
 8006500:	4626      	mov	r6, r4
 8006502:	2e00      	cmp	r6, #0
 8006504:	d140      	bne.n	8006588 <_malloc_r+0xcc>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	4631      	mov	r1, r6
 800650a:	4638      	mov	r0, r7
 800650c:	eb04 0803 	add.w	r8, r4, r3
 8006510:	f000 f878 	bl	8006604 <_sbrk_r>
 8006514:	4580      	cmp	r8, r0
 8006516:	d13a      	bne.n	800658e <_malloc_r+0xd2>
 8006518:	6821      	ldr	r1, [r4, #0]
 800651a:	3503      	adds	r5, #3
 800651c:	1a6d      	subs	r5, r5, r1
 800651e:	f025 0503 	bic.w	r5, r5, #3
 8006522:	3508      	adds	r5, #8
 8006524:	2d0c      	cmp	r5, #12
 8006526:	bf38      	it	cc
 8006528:	250c      	movcc	r5, #12
 800652a:	4638      	mov	r0, r7
 800652c:	4629      	mov	r1, r5
 800652e:	f7ff ffa5 	bl	800647c <sbrk_aligned>
 8006532:	3001      	adds	r0, #1
 8006534:	d02b      	beq.n	800658e <_malloc_r+0xd2>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	442b      	add	r3, r5
 800653a:	6023      	str	r3, [r4, #0]
 800653c:	e00e      	b.n	800655c <_malloc_r+0xa0>
 800653e:	6822      	ldr	r2, [r4, #0]
 8006540:	1b52      	subs	r2, r2, r5
 8006542:	d41e      	bmi.n	8006582 <_malloc_r+0xc6>
 8006544:	2a0b      	cmp	r2, #11
 8006546:	d916      	bls.n	8006576 <_malloc_r+0xba>
 8006548:	1961      	adds	r1, r4, r5
 800654a:	42a3      	cmp	r3, r4
 800654c:	6025      	str	r5, [r4, #0]
 800654e:	bf18      	it	ne
 8006550:	6059      	strne	r1, [r3, #4]
 8006552:	6863      	ldr	r3, [r4, #4]
 8006554:	bf08      	it	eq
 8006556:	6031      	streq	r1, [r6, #0]
 8006558:	5162      	str	r2, [r4, r5]
 800655a:	604b      	str	r3, [r1, #4]
 800655c:	4638      	mov	r0, r7
 800655e:	f104 060b 	add.w	r6, r4, #11
 8006562:	f000 f865 	bl	8006630 <__malloc_unlock>
 8006566:	f026 0607 	bic.w	r6, r6, #7
 800656a:	1d23      	adds	r3, r4, #4
 800656c:	1af2      	subs	r2, r6, r3
 800656e:	d0b6      	beq.n	80064de <_malloc_r+0x22>
 8006570:	1b9b      	subs	r3, r3, r6
 8006572:	50a3      	str	r3, [r4, r2]
 8006574:	e7b3      	b.n	80064de <_malloc_r+0x22>
 8006576:	6862      	ldr	r2, [r4, #4]
 8006578:	42a3      	cmp	r3, r4
 800657a:	bf0c      	ite	eq
 800657c:	6032      	streq	r2, [r6, #0]
 800657e:	605a      	strne	r2, [r3, #4]
 8006580:	e7ec      	b.n	800655c <_malloc_r+0xa0>
 8006582:	4623      	mov	r3, r4
 8006584:	6864      	ldr	r4, [r4, #4]
 8006586:	e7b2      	b.n	80064ee <_malloc_r+0x32>
 8006588:	4634      	mov	r4, r6
 800658a:	6876      	ldr	r6, [r6, #4]
 800658c:	e7b9      	b.n	8006502 <_malloc_r+0x46>
 800658e:	230c      	movs	r3, #12
 8006590:	4638      	mov	r0, r7
 8006592:	603b      	str	r3, [r7, #0]
 8006594:	f000 f84c 	bl	8006630 <__malloc_unlock>
 8006598:	e7a1      	b.n	80064de <_malloc_r+0x22>
 800659a:	6025      	str	r5, [r4, #0]
 800659c:	e7de      	b.n	800655c <_malloc_r+0xa0>
 800659e:	bf00      	nop
 80065a0:	20000344 	.word	0x20000344

080065a4 <_realloc_r>:
 80065a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a8:	4680      	mov	r8, r0
 80065aa:	4614      	mov	r4, r2
 80065ac:	460e      	mov	r6, r1
 80065ae:	b921      	cbnz	r1, 80065ba <_realloc_r+0x16>
 80065b0:	4611      	mov	r1, r2
 80065b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065b6:	f7ff bf81 	b.w	80064bc <_malloc_r>
 80065ba:	b92a      	cbnz	r2, 80065c8 <_realloc_r+0x24>
 80065bc:	f7ff ff16 	bl	80063ec <_free_r>
 80065c0:	4625      	mov	r5, r4
 80065c2:	4628      	mov	r0, r5
 80065c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065c8:	f000 f838 	bl	800663c <_malloc_usable_size_r>
 80065cc:	4284      	cmp	r4, r0
 80065ce:	4607      	mov	r7, r0
 80065d0:	d802      	bhi.n	80065d8 <_realloc_r+0x34>
 80065d2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80065d6:	d812      	bhi.n	80065fe <_realloc_r+0x5a>
 80065d8:	4621      	mov	r1, r4
 80065da:	4640      	mov	r0, r8
 80065dc:	f7ff ff6e 	bl	80064bc <_malloc_r>
 80065e0:	4605      	mov	r5, r0
 80065e2:	2800      	cmp	r0, #0
 80065e4:	d0ed      	beq.n	80065c2 <_realloc_r+0x1e>
 80065e6:	42bc      	cmp	r4, r7
 80065e8:	4622      	mov	r2, r4
 80065ea:	4631      	mov	r1, r6
 80065ec:	bf28      	it	cs
 80065ee:	463a      	movcs	r2, r7
 80065f0:	f7ff feee 	bl	80063d0 <memcpy>
 80065f4:	4631      	mov	r1, r6
 80065f6:	4640      	mov	r0, r8
 80065f8:	f7ff fef8 	bl	80063ec <_free_r>
 80065fc:	e7e1      	b.n	80065c2 <_realloc_r+0x1e>
 80065fe:	4635      	mov	r5, r6
 8006600:	e7df      	b.n	80065c2 <_realloc_r+0x1e>
	...

08006604 <_sbrk_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	2300      	movs	r3, #0
 8006608:	4d05      	ldr	r5, [pc, #20]	; (8006620 <_sbrk_r+0x1c>)
 800660a:	4604      	mov	r4, r0
 800660c:	4608      	mov	r0, r1
 800660e:	602b      	str	r3, [r5, #0]
 8006610:	f7fc fcc4 	bl	8002f9c <_sbrk>
 8006614:	1c43      	adds	r3, r0, #1
 8006616:	d102      	bne.n	800661e <_sbrk_r+0x1a>
 8006618:	682b      	ldr	r3, [r5, #0]
 800661a:	b103      	cbz	r3, 800661e <_sbrk_r+0x1a>
 800661c:	6023      	str	r3, [r4, #0]
 800661e:	bd38      	pop	{r3, r4, r5, pc}
 8006620:	2000033c 	.word	0x2000033c

08006624 <__malloc_lock>:
 8006624:	4801      	ldr	r0, [pc, #4]	; (800662c <__malloc_lock+0x8>)
 8006626:	f7ff bec3 	b.w	80063b0 <__retarget_lock_acquire_recursive>
 800662a:	bf00      	nop
 800662c:	20000340 	.word	0x20000340

08006630 <__malloc_unlock>:
 8006630:	4801      	ldr	r0, [pc, #4]	; (8006638 <__malloc_unlock+0x8>)
 8006632:	f7ff bebe 	b.w	80063b2 <__retarget_lock_release_recursive>
 8006636:	bf00      	nop
 8006638:	20000340 	.word	0x20000340

0800663c <_malloc_usable_size_r>:
 800663c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006640:	1f18      	subs	r0, r3, #4
 8006642:	2b00      	cmp	r3, #0
 8006644:	bfbc      	itt	lt
 8006646:	580b      	ldrlt	r3, [r1, r0]
 8006648:	18c0      	addlt	r0, r0, r3
 800664a:	4770      	bx	lr

0800664c <_init>:
 800664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800664e:	bf00      	nop
 8006650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006652:	bc08      	pop	{r3}
 8006654:	469e      	mov	lr, r3
 8006656:	4770      	bx	lr

08006658 <_fini>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr
